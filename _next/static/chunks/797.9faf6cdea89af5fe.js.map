{"version":3,"file":"static/chunks/797.9faf6cdea89af5fe.js","mappings":"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","sources":["webpack://_N_E/./components/ui/Globe.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { Color, Scene, Fog, PerspectiveCamera, Vector3 } from \"three\";\nimport ThreeGlobe from \"three-globe\";\nimport { useThree, Object3DNode, Canvas, extend } from \"@react-three/fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport countries from \"@/data/globe.json\";\ndeclare module \"@react-three/fiber\" {\n  interface ThreeElements {\n    threeGlobe: Object3DNode<ThreeGlobe, typeof ThreeGlobe>;\n  }\n}\nextend({\n  ThreeGlobe\n});\nconst RING_PROPAGATION_SPEED = 3;\nconst aspect = 1.2;\nconst cameraZ = 300;\ntype Position = {\n  order: number;\n  startLat: number;\n  startLng: number;\n  endLat: number;\n  endLng: number;\n  arcAlt: number;\n  color: string;\n};\nexport type GlobeConfig = {\n  pointSize?: number;\n  globeColor?: string;\n  showAtmosphere?: boolean;\n  atmosphereColor?: string;\n  atmosphereAltitude?: number;\n  emissive?: string;\n  emissiveIntensity?: number;\n  shininess?: number;\n  polygonColor?: string;\n  ambientLight?: string;\n  directionalLeftLight?: string;\n  directionalTopLight?: string;\n  pointLight?: string;\n  arcTime?: number;\n  arcLength?: number;\n  rings?: number;\n  maxRings?: number;\n  initialPosition?: {\n    lat: number;\n    lng: number;\n  };\n  autoRotate?: boolean;\n  autoRotateSpeed?: number;\n};\ninterface WorldProps {\n  globeConfig: GlobeConfig;\n  data: Position[];\n}\nlet numbersOfRings = [0];\nexport function Globe({\n  globeConfig,\n  data\n}: WorldProps) {\n  const [globeData, setGlobeData] = useState<{\n    size: number;\n    order: number;\n    color: (t: number) => string;\n    lat: number;\n    lng: number;\n  }[] | null>(null);\n  const globeRef = useRef<ThreeGlobe | null>(null);\n  const defaultProps = {\n    pointSize: 1,\n    atmosphereColor: \"#ffffff\",\n    showAtmosphere: true,\n    atmosphereAltitude: 0.1,\n    polygonColor: \"rgba(255,255,255,0.7)\",\n    globeColor: \"#1d072e\",\n    emissive: \"#000000\",\n    emissiveIntensity: 0.1,\n    shininess: 0.9,\n    arcTime: 2000,\n    arcLength: 0.9,\n    rings: 1,\n    maxRings: 3,\n    ...globeConfig\n  };\n  useEffect(() => {\n    if (globeRef.current) {\n      _buildData();\n      _buildMaterial();\n    }\n  }, [globeRef.current]);\n  const _buildMaterial = () => {\n    if (!globeRef.current) return;\n    const globeMaterial = globeRef.current.globeMaterial() as unknown as {\n      color: Color;\n      emissive: Color;\n      emissiveIntensity: number;\n      shininess: number;\n    };\n    globeMaterial.color = new Color(globeConfig.globeColor);\n    globeMaterial.emissive = new Color(globeConfig.emissive);\n    globeMaterial.emissiveIntensity = globeConfig.emissiveIntensity || 0.1;\n    globeMaterial.shininess = globeConfig.shininess || 0.9;\n  };\n  const _buildData = () => {\n    const arcs = data;\n    let points = [];\n    for (let i = 0; i < arcs.length; i++) {\n      const arc = arcs[i];\n      const rgb = hexToRgb(arc.color) as {\n        r: number;\n        g: number;\n        b: number;\n      };\n      points.push({\n        size: defaultProps.pointSize,\n        order: arc.order,\n        color: (t: number) => `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${1 - t})`,\n        lat: arc.startLat,\n        lng: arc.startLng\n      });\n      points.push({\n        size: defaultProps.pointSize,\n        order: arc.order,\n        color: (t: number) => `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${1 - t})`,\n        lat: arc.endLat,\n        lng: arc.endLng\n      });\n    }\n\n    // remove duplicates for same lat and lng\n    const filteredPoints = points.filter((v, i, a) => a.findIndex(v2 => [\"lat\", \"lng\"].every(k => v2[k as \"lat\" | \"lng\"] === v[k as \"lat\" | \"lng\"])) === i);\n    setGlobeData(filteredPoints);\n  };\n  useEffect(() => {\n    if (globeRef.current && globeData) {\n      globeRef.current.hexPolygonsData(countries.features).hexPolygonResolution(3).hexPolygonMargin(0.7).showAtmosphere(defaultProps.showAtmosphere).atmosphereColor(defaultProps.atmosphereColor).atmosphereAltitude(defaultProps.atmosphereAltitude).hexPolygonColor(e => {\n        return defaultProps.polygonColor;\n      });\n      startAnimation();\n    }\n  }, [globeData]);\n  const startAnimation = () => {\n    if (!globeRef.current || !globeData) return;\n    globeRef.current.arcsData(data).arcStartLat(d => (d as {\n      startLat: number;\n    }).startLat * 1).arcStartLng(d => (d as {\n      startLng: number;\n    }).startLng * 1).arcEndLat(d => (d as {\n      endLat: number;\n    }).endLat * 1).arcEndLng(d => (d as {\n      endLng: number;\n    }).endLng * 1).arcColor((e: any) => (e as {\n      color: string;\n    }).color).arcAltitude(e => {\n      return (e as {\n        arcAlt: number;\n      }).arcAlt * 1;\n    }).arcStroke(e => {\n      return [0.32, 0.28, 0.3][Math.round(Math.random() * 2)];\n    }).arcDashLength(defaultProps.arcLength).arcDashInitialGap(e => (e as {\n      order: number;\n    }).order * 1).arcDashGap(15).arcDashAnimateTime(e => defaultProps.arcTime);\n    globeRef.current.pointsData(data).pointColor(e => (e as {\n      color: string;\n    }).color).pointsMerge(true).pointAltitude(0.0).pointRadius(2);\n    globeRef.current.ringsData([]).ringColor((e: any) => (t: any) => e.color(t)).ringMaxRadius(defaultProps.maxRings).ringPropagationSpeed(RING_PROPAGATION_SPEED).ringRepeatPeriod(defaultProps.arcTime * defaultProps.arcLength / defaultProps.rings);\n  };\n  useEffect(() => {\n    if (!globeRef.current || !globeData) return;\n    const interval = setInterval(() => {\n      if (!globeRef.current || !globeData) return;\n      numbersOfRings = genRandomNumbers(0, data.length, Math.floor(data.length * 4 / 5));\n      globeRef.current.ringsData(globeData.filter((d, i) => numbersOfRings.includes(i)));\n    }, 2000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [globeRef.current, globeData]);\n  return <>\r\n      <threeGlobe ref={globeRef} data-sentry-element=\"threeGlobe\" data-sentry-source-file=\"Globe.tsx\" />\r\n    </>;\n}\nexport function WebGLRendererConfig() {\n  const {\n    gl,\n    size\n  } = useThree();\n  useEffect(() => {\n    gl.setPixelRatio(window.devicePixelRatio);\n    gl.setSize(size.width, size.height);\n    gl.setClearColor(0xffaaff, 0);\n  }, []);\n  return null;\n}\nexport function World(props: WorldProps) {\n  const {\n    globeConfig\n  } = props;\n  const scene = new Scene();\n  scene.fog = new Fog(0xffffff, 400, 2000);\n  return <Canvas scene={scene} camera={new PerspectiveCamera(50, aspect, 180, 1800)} data-sentry-element=\"Canvas\" data-sentry-component=\"World\" data-sentry-source-file=\"Globe.tsx\">\r\n      <WebGLRendererConfig data-sentry-element=\"WebGLRendererConfig\" data-sentry-source-file=\"Globe.tsx\" />\r\n      <ambientLight color={globeConfig.ambientLight} intensity={0.6} data-sentry-element=\"ambientLight\" data-sentry-source-file=\"Globe.tsx\" />\r\n      <directionalLight color={globeConfig.directionalLeftLight} position={new Vector3(-400, 100, 400)} data-sentry-element=\"directionalLight\" data-sentry-source-file=\"Globe.tsx\" />\r\n      <directionalLight color={globeConfig.directionalTopLight} position={new Vector3(-200, 500, 200)} data-sentry-element=\"directionalLight\" data-sentry-source-file=\"Globe.tsx\" />\r\n      <pointLight color={globeConfig.pointLight} position={new Vector3(-200, 500, 200)} intensity={0.8} data-sentry-element=\"pointLight\" data-sentry-source-file=\"Globe.tsx\" />\r\n      <Globe {...props} data-sentry-element=\"Globe\" data-sentry-source-file=\"Globe.tsx\" />\r\n      <OrbitControls enablePan={false} enableZoom={false} minDistance={cameraZ} maxDistance={cameraZ} autoRotateSpeed={1} autoRotate={true} minPolarAngle={Math.PI / 3.5} maxPolarAngle={Math.PI - Math.PI / 3} data-sentry-element=\"OrbitControls\" data-sentry-source-file=\"Globe.tsx\" />\r\n    </Canvas>;\n}\nexport function hexToRgb(hex: string) {\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: parseInt(result[1], 16),\n    g: parseInt(result[2], 16),\n    b: parseInt(result[3], 16)\n  } : null;\n}\nexport function genRandomNumbers(min: number, max: number, count: number) {\n  const arr = [];\n  while (arr.length < count) {\n    const r = Math.floor(Math.random() * (max - min)) + min;\n    if (arr.indexOf(r) === -1) arr.push(r);\n  }\n  return arr;\n}"],"names":["extend","ThreeGlobe","numbersOfRings","Globe","param","globeConfig","data","globeData","setGlobeData","useState","globeRef","useRef","defaultProps","pointSize","atmosphereColor","showAtmosphere","atmosphereAltitude","polygonColor","globeColor","emissive","emissiveIntensity","shininess","arcTime","arcLength","rings","maxRings","useEffect","current","_buildData","_buildMaterial","globeMaterial","color","Color","points","i","arcs","length","arc","rgb","hexToRgb","push","size","order","r","g","concat","b","t","lat","startLat","lng","startLng","endLat","endLng","filter","v","a","findIndex","v2","every","k","hexPolygonsData","countries","hexPolygonResolution","hexPolygonMargin","hexPolygonColor","e","startAnimation","arcsData","arcStartLat","d","arcStartLng","arcEndLat","arcEndLng","arcColor","arcAltitude","arcAlt","arcStroke","Math","round","random","arcDashLength","arcDashInitialGap","arcDashGap","arcDashAnimateTime","pointsData","pointColor","pointsMerge","pointAltitude","pointRadius","ringsData","ringColor","ringMaxRadius","ringPropagationSpeed","ringRepeatPeriod","interval","setInterval","genRandomNumbers","floor","includes","clearInterval","jsx_runtime","jsx","Fragment","threeGlobe","ref","data-sentry-element","data-sentry-source-file","WebGLRendererConfig","gl","useThree","setPixelRatio","window","devicePixelRatio","setSize","width","height","setClearColor","World","props","scene","Scene","fog","Fog","jsxs","Canvas","camera","PerspectiveCamera","data-sentry-component","ambientLight","intensity","directionalLight","directionalLeftLight","position","Vector3","directionalTopLight","pointLight","OrbitControls","enablePan","enableZoom","minDistance","maxDistance","autoRotateSpeed","autoRotate","minPolarAngle","PI","maxPolarAngle","hex","replace","m","result","exec","parseInt","min","max","count","arr","indexOf"],"sourceRoot":""}