{"version":3,"file":"static/chunks/133.899cf5a255779fb0.js","mappings":"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","sources":["webpack://_N_E/./node_modules/earcut/src/earcut.js","webpack://_N_E/./node_modules/frame-ticker/dist/FrameTicker.js","webpack://_N_E/./node_modules/rafor/index.js","webpack://_N_E/./node_modules/yaot/index.js","webpack://_N_E/./node_modules/yaot/lib/bounds3.js","webpack://_N_E/./node_modules/yaot/lib/treeNode.js","webpack://_N_E/./node_modules/@tweenjs/tween.js/dist/tween.esm.js","webpack://_N_E/./node_modules/accessor-fn/dist/accessor-fn.mjs","webpack://_N_E/./node_modules/d3-array/src/fsum.js","webpack://_N_E/./node_modules/d3-array/src/max.js","webpack://_N_E/./node_modules/d3-array/src/sum.js","webpack://_N_E/./node_modules/d3-color/src/define.js","webpack://_N_E/./node_modules/d3-color/src/color.js","webpack://_N_E/./node_modules/d3-geo/src/length.js","webpack://_N_E/./node_modules/d3-geo/src/distance.js","webpack://_N_E/./node_modules/d3-array/src/range.js","webpack://_N_E/./node_modules/d3-geo/src/graticule.js","webpack://_N_E/./node_modules/d3-geo/src/interpolate.js","webpack://_N_E/./node_modules/d3-geo/src/math.js","webpack://_N_E/./node_modules/d3-geo/src/noop.js","webpack://_N_E/./node_modules/d3-geo/src/stream.js","webpack://_N_E/./node_modules/d3-interpolate/src/array.js","webpack://_N_E/./node_modules/d3-interpolate/src/number.js","webpack://_N_E/./node_modules/d3-interpolate/src/numberArray.js","webpack://_N_E/./node_modules/d3-interpolate/src/basis.js","webpack://_N_E/./node_modules/d3-interpolate/src/basisClosed.js","webpack://_N_E/./node_modules/d3-interpolate/src/constant.js","webpack://_N_E/./node_modules/d3-interpolate/src/color.js","webpack://_N_E/./node_modules/d3-interpolate/src/rgb.js","webpack://_N_E/./node_modules/d3-interpolate/src/date.js","webpack://_N_E/./node_modules/d3-interpolate/src/object.js","webpack://_N_E/./node_modules/d3-interpolate/src/string.js","webpack://_N_E/./node_modules/d3-interpolate/src/value.js","webpack://_N_E/./node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js","webpack://_N_E/./node_modules/d3-array/src/ticks.js","webpack://_N_E/./node_modules/d3-array/src/ascending.js","webpack://_N_E/./node_modules/d3-array/src/descending.js","webpack://_N_E/./node_modules/d3-array/src/bisector.js","webpack://_N_E/./node_modules/d3-array/src/number.js","webpack://_N_E/./node_modules/d3-array/src/bisect.js","webpack://_N_E/./node_modules/d3-interpolate/src/round.js","webpack://_N_E/./node_modules/d3-scale/src/constant.js","webpack://_N_E/./node_modules/d3-scale/src/number.js","webpack://_N_E/./node_modules/d3-scale/src/continuous.js","webpack://_N_E/./node_modules/d3-scale/src/init.js","webpack://_N_E/./node_modules/d3-format/src/formatSpecifier.js","webpack://_N_E/./node_modules/d3-format/src/formatDecimal.js","webpack://_N_E/./node_modules/d3-format/src/exponent.js","webpack://_N_E/./node_modules/d3-format/src/precisionPrefix.js","webpack://_N_E/./node_modules/d3-format/src/formatGroup.js","webpack://_N_E/./node_modules/d3-format/src/formatNumerals.js","webpack://_N_E/./node_modules/d3-format/src/formatTrim.js","webpack://_N_E/./node_modules/d3-format/src/formatPrefixAuto.js","webpack://_N_E/./node_modules/d3-format/src/formatRounded.js","webpack://_N_E/./node_modules/d3-format/src/formatTypes.js","webpack://_N_E/./node_modules/d3-format/src/identity.js","webpack://_N_E/./node_modules/d3-format/src/locale.js","webpack://_N_E/./node_modules/d3-format/src/defaultLocale.js","webpack://_N_E/./node_modules/d3-format/src/precisionRound.js","webpack://_N_E/./node_modules/d3-format/src/precisionFixed.js","webpack://_N_E/./node_modules/d3-scale/src/tickFormat.js","webpack://_N_E/./node_modules/d3-scale/src/linear.js","webpack://_N_E/./node_modules/data-joint/dist/data-joint.mjs","webpack://_N_E/./node_modules/index-array-by/dist/index-array-by.mjs","webpack://_N_E/./node_modules/lodash-es/isObject.js","webpack://_N_E/./node_modules/lodash-es/_freeGlobal.js","webpack://_N_E/./node_modules/lodash-es/_root.js","webpack://_N_E/./node_modules/lodash-es/now.js","webpack://_N_E/./node_modules/lodash-es/_trimmedEndIndex.js","webpack://_N_E/./node_modules/lodash-es/_baseTrim.js","webpack://_N_E/./node_modules/lodash-es/_Symbol.js","webpack://_N_E/./node_modules/lodash-es/_getRawTag.js","webpack://_N_E/./node_modules/lodash-es/_objectToString.js","webpack://_N_E/./node_modules/lodash-es/_baseGetTag.js","webpack://_N_E/./node_modules/lodash-es/isObjectLike.js","webpack://_N_E/./node_modules/lodash-es/isSymbol.js","webpack://_N_E/./node_modules/lodash-es/toNumber.js","webpack://_N_E/./node_modules/lodash-es/debounce.js","webpack://_N_E/./node_modules/kapsule/dist/kapsule.mjs","webpack://_N_E/./node_modules/d3-array/src/merge.js","webpack://_N_E/./node_modules/d3-array/src/mean.js","webpack://_N_E/./node_modules/d3-array/src/extent.js","webpack://_N_E/./node_modules/robust-predicates/esm/util.js","webpack://_N_E/./node_modules/robust-predicates/esm/orient2d.js","webpack://_N_E/./node_modules/robust-predicates/esm/orient3d.js","webpack://_N_E/./node_modules/robust-predicates/esm/incircle.js","webpack://_N_E/./node_modules/robust-predicates/esm/insphere.js","webpack://_N_E/./node_modules/robust-predicates/index.js","webpack://_N_E/./node_modules/delaunator/index.js","webpack://_N_E/./node_modules/@turf/helpers/dist/es/index.js","webpack://_N_E/./node_modules/@turf/invariant/dist/es/index.js","webpack://_N_E/./node_modules/@turf/boolean-point-in-polygon/dist/es/index.js","webpack://_N_E/./node_modules/d3-geo/src/area.js","webpack://_N_E/./node_modules/d3-geo/src/cartesian.js","webpack://_N_E/./node_modules/d3-geo/src/bounds.js","webpack://_N_E/./node_modules/d3-geo/src/polygonContains.js","webpack://_N_E/./node_modules/d3-geo/src/contains.js","webpack://_N_E/./node_modules/d3-geo/src/centroid.js","webpack://_N_E/./node_modules/d3-delaunay/src/path.js","webpack://_N_E/./node_modules/d3-delaunay/src/polygon.js","webpack://_N_E/./node_modules/d3-delaunay/src/voronoi.js","webpack://_N_E/./node_modules/d3-delaunay/src/delaunay.js","webpack://_N_E/./node_modules/d3-geo/src/compose.js","webpack://_N_E/./node_modules/d3-geo/src/rotation.js","webpack://_N_E/./node_modules/d3-geo/src/projection/azimuthal.js","webpack://_N_E/./node_modules/d3-geo/src/clip/buffer.js","webpack://_N_E/./node_modules/d3-geo/src/pointEqual.js","webpack://_N_E/./node_modules/d3-geo/src/clip/rejoin.js","webpack://_N_E/./node_modules/d3-geo/src/clip/index.js","webpack://_N_E/./node_modules/d3-geo/src/clip/antimeridian.js","webpack://_N_E/./node_modules/d3-geo/src/circle.js","webpack://_N_E/./node_modules/d3-geo/src/clip/circle.js","webpack://_N_E/./node_modules/d3-geo/src/clip/line.js","webpack://_N_E/./node_modules/d3-geo/src/clip/rectangle.js","webpack://_N_E/./node_modules/d3-geo/src/identity.js","webpack://_N_E/./node_modules/d3-geo/src/transform.js","webpack://_N_E/./node_modules/d3-geo/src/path/bounds.js","webpack://_N_E/./node_modules/d3-geo/src/projection/fit.js","webpack://_N_E/./node_modules/d3-geo/src/projection/resample.js","webpack://_N_E/./node_modules/d3-geo/src/projection/index.js","webpack://_N_E/./node_modules/d3-geo/src/projection/stereographic.js","webpack://_N_E/./node_modules/d3-geo-voronoi/src/math.js","webpack://_N_E/./node_modules/d3-geo-voronoi/src/cartesian.js","webpack://_N_E/./node_modules/d3-geo-voronoi/src/delaunay.js","webpack://_N_E/./node_modules/d3-geo-voronoi/src/voronoi.js","webpack://_N_E/./node_modules/three-conic-polygon-geometry/dist/three-conic-polygon-geometry.mjs","webpack://_N_E/./node_modules/three-fatline/dist/three-fatline.mjs","webpack://_N_E/./node_modules/three-geojson-geometry/node_modules/earcut/src/earcut.js","webpack://_N_E/./node_modules/three-geojson-geometry/dist/three-geojson-geometry.mjs","webpack://_N_E/./node_modules/three/examples/jsm/geometries/TextGeometry.js","webpack://_N_E/./node_modules/three/examples/jsm/loaders/FontLoader.js","webpack://_N_E/./node_modules/three/examples/jsm/renderers/CSS2DRenderer.js","webpack://_N_E/./node_modules/three/examples/jsm/utils/BufferGeometryUtils.js","webpack://_N_E/./node_modules/tinycolor2/esm/tinycolor.js"],"sourcesContent":["'use strict';\n\nmodule.exports = earcut;\nmodule.exports.default = earcut;\n\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 32767 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim | 0);\n            triangles.push(ear.i / dim | 0);\n            triangles.push(next.i / dim | 0);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    var p = c.next;\n    while (p !== a) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    var ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    var x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(x0, y0, minX, minY, invSize),\n        maxZ = zOrder(x1, y1, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim | 0);\n            triangles.push(p.i / dim | 0);\n            triangles.push(b.i / dim | 0);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\n                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        outerNode = eliminateHole(queue[i], outerNode);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    var bridge = findHoleBridge(hole, outerNode);\n    if (!bridge) {\n        return outerNode;\n    }\n\n    var bridgeReverse = splitPolygon(bridge, hole);\n\n    // filter collinear points around the cuts\n    filterPoints(bridgeReverse, bridgeReverse.next);\n    return filterPoints(bridge, bridge.next);\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                m = p.x < p.next.x ? p : p.next;\n                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = (x - minX) * invSize | 0;\n    y = (y - minY) * invSize | 0;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&\n           (ax - px) * (by - py) >= (bx - px) * (ay - py) &&\n           (bx - px) * (cy - py) >= (cx - px) * (by - py);\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = 0;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n","!function(e,t){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=t():\"function\"==typeof define&&define.amd?define(\"FrameTicker\",[],t):\"object\"==typeof exports?exports.FrameTicker=t():e.FrameTicker=t()}(this,function(){return function(e){function t(n){if(i[n])return i[n].exports;var r=i[n]={exports:{},id:n,loaded:!1};return e[n].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var i={};return t.m=e,t.c=i,t.p=\"\",t(0)}([function(e,t,i){\"use strict\";var n=i(1),r=function(){function e(e,t,i){void 0===e&&(e=NaN),void 0===t&&(t=NaN),void 0===i&&(i=!1),this._minFPS=t,this._maxFPS=e,this._timeScale=1,this._currentTick=0,this._currentTime=0,this._tickDeltaTime=0,this._isRunning=!1,this._maxInterval=isNaN(this._minFPS)?NaN:1e3/this._minFPS,this._minInterval=isNaN(this._maxFPS)?NaN:1e3/this._maxFPS,this._onResume=new n.default,this._onPause=new n.default,this._onTick=new n.default,this._onTickOncePerFrame=new n.default,i||this.resume()}return e.prototype.updateOnce=function(e){e(this.currentTimeSeconds,this.tickDeltaTimeSeconds,this.currentTick)},e.prototype.resume=function(){this._isRunning||(this._isRunning=!0,this._lastTimeUpdated=this.getTimer(),this._onResume.dispatch(),this.animateOnce())},e.prototype.pause=function(){this._isRunning&&(this._isRunning=!1,this._onPause.dispatch(),window.cancelAnimationFrame(this._animationFrameHandle))},e.prototype.dispose=function(){this.pause(),this._onResume.removeAll(),this._onPause.removeAll(),this._onTick.removeAll()},Object.defineProperty(e.prototype,\"currentTick\",{get:function(){return this._currentTick},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"currentTimeSeconds\",{get:function(){return this._currentTime/1e3},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"tickDeltaTimeSeconds\",{get:function(){return this._tickDeltaTime/1e3},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"timeScale\",{get:function(){return this._timeScale},set:function(e){this._timeScale!==e&&(this._timeScale=e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"onResume\",{get:function(){return this._onResume},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"onPause\",{get:function(){return this._onPause},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"onTick\",{get:function(){return this._onTick},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"onTickOncePerFrame\",{get:function(){return this._onTickOncePerFrame},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,\"isRunning\",{get:function(){return this._isRunning},enumerable:!0,configurable:!0}),e.prototype.animateOnce=function(){var e=this;this._animationFrameHandle=window.requestAnimationFrame(function(){return e.onFrame()})},e.prototype.onFrame=function(){if(this._now=this.getTimer(),this._frameDeltaTime=this._now-this._lastTimeUpdated,isNaN(this._minInterval)||this._frameDeltaTime>=this._minInterval)if(isNaN(this._maxInterval))this.update(this._frameDeltaTime*this._timeScale,!0),this._lastTimeUpdated=this._now;else for(this._interval=Math.min(this._frameDeltaTime,this._maxInterval);this._now>=this._lastTimeUpdated+this._interval;)this.update(this._interval*this._timeScale,this._now<=this._lastTimeUpdated+2*this._maxInterval),this._lastTimeUpdated+=this._interval;this._isRunning&&this.animateOnce()},e.prototype.update=function(e,t){void 0===t&&(t=!0),this._currentTick++,this._currentTime+=e,this._tickDeltaTime=e,this._onTick.dispatch(this.currentTimeSeconds,this.tickDeltaTimeSeconds,this.currentTick),t&&this._onTickOncePerFrame.dispatch(this.currentTimeSeconds,this.tickDeltaTimeSeconds,this.currentTick)},e.prototype.getTimer=function(){return Date.now()},e}();Object.defineProperty(t,\"__esModule\",{value:!0}),t.default=r},function(e,t,i){!function(t,i){e.exports=i()}(this,function(){return function(e){function t(n){if(i[n])return i[n].exports;var r=i[n]={exports:{},id:n,loaded:!1};return e[n].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var i={};return t.m=e,t.c=i,t.p=\"\",t(0)}([function(e,t){\"use strict\";var i=function(){function e(){this.functions=[]}return e.prototype.add=function(e){return this.functions.indexOf(e)===-1&&(this.functions.push(e),!0)},e.prototype.remove=function(e){var t=this.functions.indexOf(e);return t>-1&&(this.functions.splice(t,1),!0)},e.prototype.removeAll=function(){return this.functions.length>0&&(this.functions.length=0,!0)},e.prototype.dispatch=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var i=this.functions.concat();i.forEach(function(t){t.apply(void 0,e)})},Object.defineProperty(e.prototype,\"numItems\",{get:function(){return this.functions.length},enumerable:!0,configurable:!0}),e}();Object.defineProperty(t,\"__esModule\",{value:!0}),t.default=i}])})}])});","module.exports = asyncFor;\n\n/**\n * Iterates over array in async manner. This function attempts to maximize\n * number of elements visited within single event loop cycle, while at the\n * same time tries to not exceed a time threshold allowed to stay within\n * event loop.\n *\n * @param {Array} array which needs to be iterated. Array-like objects are OK too.\n * @param {VisitCalback} visitCallback called for every element within for loop.\n * @param {DoneCallback} doneCallback called when iterator has reached end of array.\n * @param {Object=} options - additional configuration:\n * @param {number} [options.step=1] - default iteration step\n * @param {number} [options.maxTimeMS=8] - maximum time (in milliseconds) which\n *   iterator should spend within single event loop.\n * @param {number} [options.probeElements=5000] - how many elements should iterator\n *   visit to measure its iteration speed.\n */\nfunction asyncFor(array, visitCallback, doneCallback, options) {\n  var start = 0;\n  var elapsed = 0;\n  options = options || {};\n  var step = options.step || 1;\n  var maxTimeMS = options.maxTimeMS || 8;\n  var pointsPerLoopCycle = options.probeElements || 5000;\n  // we should never block main thread for too long...\n  setTimeout(processSubset, 0);\n\n  function processSubset() {\n    var finish = Math.min(array.length, start + pointsPerLoopCycle);\n    var i = start;\n    var timeStart = new Date();\n    for (i = start; i < finish; i += step) {\n      visitCallback(array[i], i, array);\n    }\n    if (i < array.length) {\n      elapsed += (new Date() - timeStart);\n      start = i;\n\n      pointsPerLoopCycle = Math.round(start * maxTimeMS/elapsed);\n      setTimeout(processSubset, 0);\n    } else {\n      doneCallback(array);\n    }\n  }\n}\n","/**\n * Represents octree data structure\n *\n * https://en.wikipedia.org/wiki/Octree\n */\nvar Bounds3 = require('./lib/bounds3.js');\nvar TreeNode = require('./lib/treeNode.js');\nvar EmptyRegion = new Bounds3();\nvar asyncFor = require('rafor');\n\nmodule.exports = createTree;\n\nfunction createTree(options) {\n  options = options || {};\n  var noPoints = [];\n\n  var root;\n  var originalArray;\n  var api = {\n    /**\n     * Initializes tree asynchronously. Very useful when you have millions\n     * of points and do not want to block rendering thread for too long.\n     *\n     * @param {number[]} points array of points for which we are building the\n     * tree. Flat sequence of (x, y, z) coordinates. Array length should be\n     * multiple of 3.\n     *\n     * @param {Function=} doneCallback called when tree is initialized. The\n     * callback will be called with single argument which represent current\n     * tree.\n     */\n    initAsync: initAsync,\n\n    /**\n     * Synchronous version of `initAsync()`. Should only be used for small\n     * trees (less than 50-70k of points).\n     *\n     * @param {number[]} points array of points for which we are building the\n     * tree. Flat sequence of (x, y, z) coordinates. Array length should be\n     * multiple of 3.\n     */\n    init: init,\n\n    /**\n     * Gets bounds of the root node. Bounds are represented by center of the\n     * node (x, y, z) and `half` attribute - distance from the center to an\n     * edge of the root node.\n     */\n    bounds: getBounds,\n\n    /**\n     * Fires a ray from `rayOrigin` into `rayDirection` and collects all points\n     * that lie in the octants intersected by the ray.\n     *\n     * This method implements An Efficient Parametric Algorithm for Octree Traversal\n     * described in http://wscg.zcu.cz/wscg2000/Papers_2000/X31.pdf\n     *\n     * @param {Vector3} rayOrigin x,y,z coordinates where ray starts\n     * @param {Vector3} rayDirection normalized x,y,z direction where ray shoots.\n     * @param {number+} near minimum distance from the ray origin. 0 by default.\n     * @param {number+} far maximum length of the ray. POSITIVE_INFINITY by default\n     *\n     * @return {Array} of indices in the source array. Each index represnts a start\n     * of the x,y,z triplet of a point, that lies in the intersected octant.\n     */\n    intersectRay: intersectRay,\n\n    /**\n     * Once you have collected points from the octants intersected by a ray\n     * (`intersectRay()` method), it may be worth to query points from the surrouning\n     * area.\n     */\n    intersectSphere: intersectSphere,\n\n    /**\n     * Gets root node of the tree\n     */\n    getRoot: getRoot\n  };\n\n  return api;\n\n  function getRoot() {\n    return root;\n  }\n\n  function intersectSphere(cx, cy, cz, r) {\n    if (!root) {\n      // Most likely we are not initialized yet\n      return noPoints;\n    }\n    var indices = [];\n    var r2 = r * r;\n    root.query(indices, originalArray, intersectCheck, preciseCheck);\n    return indices;\n\n    // http://stackoverflow.com/questions/4578967/cube-sphere-intersection-test\n    function intersectCheck(candidate) {\n      var dist = r2;\n      var half = candidate.half;\n      if (cx < candidate.x - half) dist -= sqr(cx - (candidate.x - half));\n      else if (cx > candidate.x + half) dist -= sqr(cx - (candidate.x + half));\n\n      if (cy < candidate.y - half) dist -= sqr(cy - (candidate.y - half));\n      else if (cy > candidate.y + half) dist -= sqr(cy - (candidate.y + half));\n\n      if (cz < candidate.z - half) dist -= sqr(cz - (candidate.z - half));\n      else if (cz > candidate.z + half) dist -= sqr(cz - (candidate.z + half));\n      return dist > 0;\n    }\n\n    function preciseCheck(x, y, z) {\n      return sqr(x - cx) + sqr(y - cy) + sqr(z - cz) < r2;\n    }\n  }\n\n  function sqr(x) {\n    return x * x;\n  }\n\n  function intersectRay(rayOrigin, rayDirection, near, far) {\n    if (!root) {\n      // Most likely we are not initialized yet\n      return noPoints;\n    }\n\n    if (near === undefined) near = 0;\n    if (far === undefined) far = Number.POSITIVE_INFINITY;\n    // we save as squar, to avoid expensive sqrt() operation\n    near *= near;\n    far *= far;\n\n    var indices = [];\n    root.query(indices, originalArray, intersectCheck, farEnough);\n    return indices.sort(byDistanceToCamera);\n\n    function intersectCheck(candidate) {\n      // using http://wscg.zcu.cz/wscg2000/Papers_2000/X31.pdf\n      var half = candidate.half;\n      var t1 = (candidate.x - half - rayOrigin.x) / rayDirection.x,\n        t2 = (candidate.x + half - rayOrigin.x) / rayDirection.x,\n        t3 = (candidate.y + half - rayOrigin.y) / rayDirection.y,\n        t4 = (candidate.y - half - rayOrigin.y) / rayDirection.y,\n        t5 = (candidate.z - half - rayOrigin.z) / rayDirection.z,\n        t6 = (candidate.z + half - rayOrigin.z) / rayDirection.z,\n        tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6)),\n        tmin;\n\n      if (tmax < 0) return false;\n\n      tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));\n      return tmin <= tmax && tmin <= far;\n    }\n\n    function farEnough(x, y, z) {\n      var dist = (x - rayOrigin.x) * (x - rayOrigin.x) +\n                 (y - rayOrigin.y) * (y - rayOrigin.y) +\n                 (z - rayOrigin.z) * (z - rayOrigin.z);\n      return near <= dist && dist <= far;\n    }\n\n    function byDistanceToCamera(idx0, idx1) {\n      var x0 = rayOrigin[idx0];\n      var y0 = rayOrigin[idx0 + 1];\n      var z0 = rayOrigin[idx0 + 2];\n      var dist0 = (x0 - rayOrigin.x) * (x0 - rayOrigin.x) +\n                  (y0 - rayOrigin.y) * (y0 - rayOrigin.y) +\n                  (z0 - rayOrigin.z) * (z0 - rayOrigin.z);\n\n      var x1 = rayOrigin[idx1];\n      var y1 = rayOrigin[idx1 + 1];\n      var z1 = rayOrigin[idx1 + 2];\n\n      var dist1 = (x1 - rayOrigin.x) * (x1 - rayOrigin.x) +\n                  (y1 - rayOrigin.y) * (y1 - rayOrigin.y) +\n                  (z1 - rayOrigin.z) * (z1 - rayOrigin.z);\n      return dist0 - dist1;\n    }\n  }\n\n  function init(points) {\n    verifyPointsInvariant(points);\n    originalArray = points;\n    root = createRootNode(points);\n    for (var i = 0; i < points.length; i += 3) {\n      root.insert(i, originalArray, 0);\n    }\n  }\n\n  function initAsync(points, doneCallback) {\n    verifyPointsInvariant(points);\n\n    var tempRoot = createRootNode(points);\n    asyncFor(points, insertToRoot, doneInternal, { step: 3 });\n\n    function insertToRoot(element, i) {\n      tempRoot.insert(i, points, 0);\n    }\n\n    function doneInternal() {\n      originalArray = points;\n      root = tempRoot;\n      if (typeof doneCallback === 'function') {\n        doneCallback(api);\n      }\n    }\n  }\n\n  function verifyPointsInvariant(points) {\n    if (!points) throw new Error('Points array is required for quadtree to work');\n    if (typeof points.length !== 'number') throw new Error('Points should be array-like object');\n    if (points.length % 3 !== 0) throw new Error('Points array should consist of series of x,y,z coordinates and be multiple of 3');\n  }\n\n  function getBounds() {\n    if (!root) return EmptyRegion;\n    return root.bounds;\n  }\n\n  function createRootNode(points) {\n    // Edge case deserves empty region:\n    if (points.length === 0) {\n      var empty = new Bounds3();\n      return new TreeNode(empty);\n    }\n\n    // Otherwise let's figure out how big should be the root region\n    var minX = Number.POSITIVE_INFINITY;\n    var minY = Number.POSITIVE_INFINITY;\n    var minZ = Number.POSITIVE_INFINITY;\n    var maxX = Number.NEGATIVE_INFINITY;\n    var maxY = Number.NEGATIVE_INFINITY;\n    var maxZ = Number.NEGATIVE_INFINITY;\n    for (var i = 0; i < points.length; i += 3) {\n      var x = points[i],\n        y = points[i + 1],\n        z = points[i + 2];\n      if (x < minX) minX = x;\n      if (x > maxX) maxX = x;\n      if (y < minY) minY = y;\n      if (y > maxY) maxY = y;\n      if (z < minZ) minZ = z;\n      if (z > maxZ) maxZ = z;\n    }\n\n    // Make bounds square:\n    var side = Math.max(Math.max(maxX - minX, maxY - minY), maxZ - minZ);\n    // since we need to have both sides inside the area, let's artificially\n    // grow the root region:\n    side += 2;\n    minX -= 1;\n    minY -= 1;\n    minZ -= 1;\n    var half = side / 2;\n\n    var bounds = new Bounds3(minX + half, minY + half, minZ + half, half);\n    return new TreeNode(bounds);\n  }\n}\n\n","module.exports = Bounds3;\n\nfunction Bounds3(x, y, z, half) {\n  this.x = typeof x === 'number' ? x : 0;\n  this.y = typeof y === 'number' ? y : 0;\n  this.z = typeof z === 'number' ? z : 0;\n  this.half = typeof half === 'number' ? half : 0;\n}\n\nBounds3.prototype.contains = function contains(x, y, z) {\n  var half = this.half;\n  return this.x - half <= x && x < this.x + half &&\n    this.y - half <= y && y < this.y + half &&\n    this.z - half <= z && z < this.z + half;\n};\n\n","var Bounds3 = require('./bounds3.js');\nvar MAX_ITEMS = 4;\n\nmodule.exports = TreeNode;\n\nfunction TreeNode(bounds) {\n  this.bounds = bounds;\n  this.q0 = null;\n  this.q1 = null;\n  this.q2 = null;\n  this.q3 = null;\n  this.q4 = null;\n  this.q5 = null;\n  this.q6 = null;\n  this.q7 = null;\n  this.items = null;\n}\n\nTreeNode.prototype.subdivide = function subdivide() {\n  var bounds = this.bounds;\n  var quarter = bounds.half / 2;\n\n  this.q0 = new TreeNode(new Bounds3(bounds.x - quarter, bounds.y - quarter, bounds.z - quarter, quarter));\n  this.q1 = new TreeNode(new Bounds3(bounds.x + quarter, bounds.y - quarter, bounds.z - quarter, quarter));\n  this.q2 = new TreeNode(new Bounds3(bounds.x - quarter, bounds.y + quarter, bounds.z - quarter, quarter));\n  this.q3 = new TreeNode(new Bounds3(bounds.x + quarter, bounds.y + quarter, bounds.z - quarter, quarter));\n  this.q4 = new TreeNode(new Bounds3(bounds.x - quarter, bounds.y - quarter, bounds.z + quarter, quarter));\n  this.q5 = new TreeNode(new Bounds3(bounds.x + quarter, bounds.y - quarter, bounds.z + quarter, quarter));\n  this.q6 = new TreeNode(new Bounds3(bounds.x - quarter, bounds.y + quarter, bounds.z + quarter, quarter));\n  this.q7 = new TreeNode(new Bounds3(bounds.x + quarter, bounds.y + quarter, bounds.z + quarter, quarter));\n};\n\nTreeNode.prototype.insert = function insert(idx, array, depth) {\n  var isLeaf = this.q0 === null;\n  if (isLeaf) {\n    // TODO: this memory could be recycled to avoid GC\n    if (this.items === null) {\n      this.items = [idx];\n    } else {\n      this.items.push(idx);\n    }\n    if (this.items.length >= MAX_ITEMS && depth < 16) {\n      this.subdivide();\n      for (var i = 0; i < this.items.length; ++i) {\n        this.insert(this.items[i], array, depth + 1);\n      }\n      this.items = null;\n    }\n  } else {\n    var x = array[idx],\n      y = array[idx + 1],\n      z = array[idx + 2];\n    var bounds = this.bounds;\n    var quadIdx = 0; // assume NW\n    if (x > bounds.x) {\n      quadIdx += 1; // nope, we are in E part\n    }\n    if (y > bounds.y) {\n      quadIdx += 2; // Somewhere south.\n    }\n    if (z > bounds.z) {\n      quadIdx += 4; // Somewhere far\n    }\n\n    var child = getChild(this, quadIdx);\n    child.insert(idx, array, depth + 1);\n  }\n};\n\nTreeNode.prototype.query = function queryBounds(results, sourceArray, intersects, preciseCheck) {\n  if (!intersects(this.bounds)) return;\n  var items = this.items;\n  var needsCheck = typeof preciseCheck === 'function';\n  if (items) {\n    for (var i = 0; i < items.length; ++i) {\n      var idx = items[i];\n      if (needsCheck) {\n        if (preciseCheck(sourceArray[idx], sourceArray[idx + 1], sourceArray[idx + 2])) {\n          results.push(idx);\n        }\n      } else {\n        results.push(idx);\n      }\n    }\n  }\n\n  if (!this.q0) return;\n\n  this.q0.query(results, sourceArray, intersects, preciseCheck);\n  this.q1.query(results, sourceArray, intersects, preciseCheck);\n  this.q2.query(results, sourceArray, intersects, preciseCheck);\n  this.q3.query(results, sourceArray, intersects, preciseCheck);\n  this.q4.query(results, sourceArray, intersects, preciseCheck);\n  this.q5.query(results, sourceArray, intersects, preciseCheck);\n  this.q6.query(results, sourceArray, intersects, preciseCheck);\n  this.q7.query(results, sourceArray, intersects, preciseCheck);\n};\n\nfunction getChild(node, idx) {\n  if (idx === 0) return node.q0;\n  if (idx === 1) return node.q1;\n  if (idx === 2) return node.q2;\n  if (idx === 3) return node.q3;\n  if (idx === 4) return node.q4;\n  if (idx === 5) return node.q5;\n  if (idx === 6) return node.q6;\n  if (idx === 7) return node.q7;\n}\n","/**\n * The Ease class provides a collection of easing functions for use with tween.js.\n */\nvar Easing = Object.freeze({\n    Linear: Object.freeze({\n        None: function (amount) {\n            return amount;\n        },\n        In: function (amount) {\n            return amount;\n        },\n        Out: function (amount) {\n            return amount;\n        },\n        InOut: function (amount) {\n            return amount;\n        },\n    }),\n    Quadratic: Object.freeze({\n        In: function (amount) {\n            return amount * amount;\n        },\n        Out: function (amount) {\n            return amount * (2 - amount);\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount;\n            }\n            return -0.5 * (--amount * (amount - 2) - 1);\n        },\n    }),\n    Cubic: Object.freeze({\n        In: function (amount) {\n            return amount * amount * amount;\n        },\n        Out: function (amount) {\n            return --amount * amount * amount + 1;\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount * amount;\n            }\n            return 0.5 * ((amount -= 2) * amount * amount + 2);\n        },\n    }),\n    Quartic: Object.freeze({\n        In: function (amount) {\n            return amount * amount * amount * amount;\n        },\n        Out: function (amount) {\n            return 1 - --amount * amount * amount * amount;\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount * amount * amount;\n            }\n            return -0.5 * ((amount -= 2) * amount * amount * amount - 2);\n        },\n    }),\n    Quintic: Object.freeze({\n        In: function (amount) {\n            return amount * amount * amount * amount * amount;\n        },\n        Out: function (amount) {\n            return --amount * amount * amount * amount * amount + 1;\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return 0.5 * amount * amount * amount * amount * amount;\n            }\n            return 0.5 * ((amount -= 2) * amount * amount * amount * amount + 2);\n        },\n    }),\n    Sinusoidal: Object.freeze({\n        In: function (amount) {\n            return 1 - Math.sin(((1.0 - amount) * Math.PI) / 2);\n        },\n        Out: function (amount) {\n            return Math.sin((amount * Math.PI) / 2);\n        },\n        InOut: function (amount) {\n            return 0.5 * (1 - Math.sin(Math.PI * (0.5 - amount)));\n        },\n    }),\n    Exponential: Object.freeze({\n        In: function (amount) {\n            return amount === 0 ? 0 : Math.pow(1024, amount - 1);\n        },\n        Out: function (amount) {\n            return amount === 1 ? 1 : 1 - Math.pow(2, -10 * amount);\n        },\n        InOut: function (amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            if ((amount *= 2) < 1) {\n                return 0.5 * Math.pow(1024, amount - 1);\n            }\n            return 0.5 * (-Math.pow(2, -10 * (amount - 1)) + 2);\n        },\n    }),\n    Circular: Object.freeze({\n        In: function (amount) {\n            return 1 - Math.sqrt(1 - amount * amount);\n        },\n        Out: function (amount) {\n            return Math.sqrt(1 - --amount * amount);\n        },\n        InOut: function (amount) {\n            if ((amount *= 2) < 1) {\n                return -0.5 * (Math.sqrt(1 - amount * amount) - 1);\n            }\n            return 0.5 * (Math.sqrt(1 - (amount -= 2) * amount) + 1);\n        },\n    }),\n    Elastic: Object.freeze({\n        In: function (amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            return -Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);\n        },\n        Out: function (amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            return Math.pow(2, -10 * amount) * Math.sin((amount - 0.1) * 5 * Math.PI) + 1;\n        },\n        InOut: function (amount) {\n            if (amount === 0) {\n                return 0;\n            }\n            if (amount === 1) {\n                return 1;\n            }\n            amount *= 2;\n            if (amount < 1) {\n                return -0.5 * Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);\n            }\n            return 0.5 * Math.pow(2, -10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI) + 1;\n        },\n    }),\n    Back: Object.freeze({\n        In: function (amount) {\n            var s = 1.70158;\n            return amount === 1 ? 1 : amount * amount * ((s + 1) * amount - s);\n        },\n        Out: function (amount) {\n            var s = 1.70158;\n            return amount === 0 ? 0 : --amount * amount * ((s + 1) * amount + s) + 1;\n        },\n        InOut: function (amount) {\n            var s = 1.70158 * 1.525;\n            if ((amount *= 2) < 1) {\n                return 0.5 * (amount * amount * ((s + 1) * amount - s));\n            }\n            return 0.5 * ((amount -= 2) * amount * ((s + 1) * amount + s) + 2);\n        },\n    }),\n    Bounce: Object.freeze({\n        In: function (amount) {\n            return 1 - Easing.Bounce.Out(1 - amount);\n        },\n        Out: function (amount) {\n            if (amount < 1 / 2.75) {\n                return 7.5625 * amount * amount;\n            }\n            else if (amount < 2 / 2.75) {\n                return 7.5625 * (amount -= 1.5 / 2.75) * amount + 0.75;\n            }\n            else if (amount < 2.5 / 2.75) {\n                return 7.5625 * (amount -= 2.25 / 2.75) * amount + 0.9375;\n            }\n            else {\n                return 7.5625 * (amount -= 2.625 / 2.75) * amount + 0.984375;\n            }\n        },\n        InOut: function (amount) {\n            if (amount < 0.5) {\n                return Easing.Bounce.In(amount * 2) * 0.5;\n            }\n            return Easing.Bounce.Out(amount * 2 - 1) * 0.5 + 0.5;\n        },\n    }),\n    generatePow: function (power) {\n        if (power === void 0) { power = 4; }\n        power = power < Number.EPSILON ? Number.EPSILON : power;\n        power = power > 10000 ? 10000 : power;\n        return {\n            In: function (amount) {\n                return Math.pow(amount, power);\n            },\n            Out: function (amount) {\n                return 1 - Math.pow((1 - amount), power);\n            },\n            InOut: function (amount) {\n                if (amount < 0.5) {\n                    return Math.pow((amount * 2), power) / 2;\n                }\n                return (1 - Math.pow((2 - amount * 2), power)) / 2 + 0.5;\n            },\n        };\n    },\n});\n\nvar now = function () { return performance.now(); };\n\n/**\n * Controlling groups of tweens\n *\n * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.\n * In these cases, you may want to create your own smaller groups of tween\n */\nvar Group = /** @class */ (function () {\n    function Group() {\n        this._tweens = {};\n        this._tweensAddedDuringUpdate = {};\n    }\n    Group.prototype.getAll = function () {\n        var _this = this;\n        return Object.keys(this._tweens).map(function (tweenId) {\n            return _this._tweens[tweenId];\n        });\n    };\n    Group.prototype.removeAll = function () {\n        this._tweens = {};\n    };\n    Group.prototype.add = function (tween) {\n        this._tweens[tween.getId()] = tween;\n        this._tweensAddedDuringUpdate[tween.getId()] = tween;\n    };\n    Group.prototype.remove = function (tween) {\n        delete this._tweens[tween.getId()];\n        delete this._tweensAddedDuringUpdate[tween.getId()];\n    };\n    Group.prototype.update = function (time, preserve) {\n        if (time === void 0) { time = now(); }\n        if (preserve === void 0) { preserve = false; }\n        var tweenIds = Object.keys(this._tweens);\n        if (tweenIds.length === 0) {\n            return false;\n        }\n        // Tweens are updated in \"batches\". If you add a new tween during an\n        // update, then the new tween will be updated in the next batch.\n        // If you remove a tween during an update, it may or may not be updated.\n        // However, if the removed tween was added during the current batch,\n        // then it will not be updated.\n        while (tweenIds.length > 0) {\n            this._tweensAddedDuringUpdate = {};\n            for (var i = 0; i < tweenIds.length; i++) {\n                var tween = this._tweens[tweenIds[i]];\n                var autoStart = !preserve;\n                if (tween && tween.update(time, autoStart) === false && !preserve) {\n                    delete this._tweens[tweenIds[i]];\n                }\n            }\n            tweenIds = Object.keys(this._tweensAddedDuringUpdate);\n        }\n        return true;\n    };\n    return Group;\n}());\n\n/**\n *\n */\nvar Interpolation = {\n    Linear: function (v, k) {\n        var m = v.length - 1;\n        var f = m * k;\n        var i = Math.floor(f);\n        var fn = Interpolation.Utils.Linear;\n        if (k < 0) {\n            return fn(v[0], v[1], f);\n        }\n        if (k > 1) {\n            return fn(v[m], v[m - 1], m - f);\n        }\n        return fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n    },\n    Bezier: function (v, k) {\n        var b = 0;\n        var n = v.length - 1;\n        var pw = Math.pow;\n        var bn = Interpolation.Utils.Bernstein;\n        for (var i = 0; i <= n; i++) {\n            b += pw(1 - k, n - i) * pw(k, i) * v[i] * bn(n, i);\n        }\n        return b;\n    },\n    CatmullRom: function (v, k) {\n        var m = v.length - 1;\n        var f = m * k;\n        var i = Math.floor(f);\n        var fn = Interpolation.Utils.CatmullRom;\n        if (v[0] === v[m]) {\n            if (k < 0) {\n                i = Math.floor((f = m * (1 + k)));\n            }\n            return fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);\n        }\n        else {\n            if (k < 0) {\n                return v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);\n            }\n            if (k > 1) {\n                return v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);\n            }\n            return fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);\n        }\n    },\n    Utils: {\n        Linear: function (p0, p1, t) {\n            return (p1 - p0) * t + p0;\n        },\n        Bernstein: function (n, i) {\n            var fc = Interpolation.Utils.Factorial;\n            return fc(n) / fc(i) / fc(n - i);\n        },\n        Factorial: (function () {\n            var a = [1];\n            return function (n) {\n                var s = 1;\n                if (a[n]) {\n                    return a[n];\n                }\n                for (var i = n; i > 1; i--) {\n                    s *= i;\n                }\n                a[n] = s;\n                return s;\n            };\n        })(),\n        CatmullRom: function (p0, p1, p2, p3, t) {\n            var v0 = (p2 - p0) * 0.5;\n            var v1 = (p3 - p1) * 0.5;\n            var t2 = t * t;\n            var t3 = t * t2;\n            return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n        },\n    },\n};\n\n/**\n * Utils\n */\nvar Sequence = /** @class */ (function () {\n    function Sequence() {\n    }\n    Sequence.nextId = function () {\n        return Sequence._nextId++;\n    };\n    Sequence._nextId = 0;\n    return Sequence;\n}());\n\nvar mainGroup = new Group();\n\n/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */\nvar Tween = /** @class */ (function () {\n    function Tween(_object, _group) {\n        if (_group === void 0) { _group = mainGroup; }\n        this._object = _object;\n        this._group = _group;\n        this._isPaused = false;\n        this._pauseStart = 0;\n        this._valuesStart = {};\n        this._valuesEnd = {};\n        this._valuesStartRepeat = {};\n        this._duration = 1000;\n        this._isDynamic = false;\n        this._initialRepeat = 0;\n        this._repeat = 0;\n        this._yoyo = false;\n        this._isPlaying = false;\n        this._reversed = false;\n        this._delayTime = 0;\n        this._startTime = 0;\n        this._easingFunction = Easing.Linear.None;\n        this._interpolationFunction = Interpolation.Linear;\n        // eslint-disable-next-line\n        this._chainedTweens = [];\n        this._onStartCallbackFired = false;\n        this._onEveryStartCallbackFired = false;\n        this._id = Sequence.nextId();\n        this._isChainStopped = false;\n        this._propertiesAreSetUp = false;\n        this._goToEnd = false;\n    }\n    Tween.prototype.getId = function () {\n        return this._id;\n    };\n    Tween.prototype.isPlaying = function () {\n        return this._isPlaying;\n    };\n    Tween.prototype.isPaused = function () {\n        return this._isPaused;\n    };\n    Tween.prototype.getDuration = function () {\n        return this._duration;\n    };\n    Tween.prototype.to = function (target, duration) {\n        if (duration === void 0) { duration = 1000; }\n        if (this._isPlaying)\n            throw new Error('Can not call Tween.to() while Tween is already started or paused. Stop the Tween first.');\n        this._valuesEnd = target;\n        this._propertiesAreSetUp = false;\n        this._duration = duration < 0 ? 0 : duration;\n        return this;\n    };\n    Tween.prototype.duration = function (duration) {\n        if (duration === void 0) { duration = 1000; }\n        this._duration = duration < 0 ? 0 : duration;\n        return this;\n    };\n    Tween.prototype.dynamic = function (dynamic) {\n        if (dynamic === void 0) { dynamic = false; }\n        this._isDynamic = dynamic;\n        return this;\n    };\n    Tween.prototype.start = function (time, overrideStartingValues) {\n        if (time === void 0) { time = now(); }\n        if (overrideStartingValues === void 0) { overrideStartingValues = false; }\n        if (this._isPlaying) {\n            return this;\n        }\n        // eslint-disable-next-line\n        this._group && this._group.add(this);\n        this._repeat = this._initialRepeat;\n        if (this._reversed) {\n            // If we were reversed (f.e. using the yoyo feature) then we need to\n            // flip the tween direction back to forward.\n            this._reversed = false;\n            for (var property in this._valuesStartRepeat) {\n                this._swapEndStartRepeatValues(property);\n                this._valuesStart[property] = this._valuesStartRepeat[property];\n            }\n        }\n        this._isPlaying = true;\n        this._isPaused = false;\n        this._onStartCallbackFired = false;\n        this._onEveryStartCallbackFired = false;\n        this._isChainStopped = false;\n        this._startTime = time;\n        this._startTime += this._delayTime;\n        if (!this._propertiesAreSetUp || overrideStartingValues) {\n            this._propertiesAreSetUp = true;\n            // If dynamic is not enabled, clone the end values instead of using the passed-in end values.\n            if (!this._isDynamic) {\n                var tmp = {};\n                for (var prop in this._valuesEnd)\n                    tmp[prop] = this._valuesEnd[prop];\n                this._valuesEnd = tmp;\n            }\n            this._setupProperties(this._object, this._valuesStart, this._valuesEnd, this._valuesStartRepeat, overrideStartingValues);\n        }\n        return this;\n    };\n    Tween.prototype.startFromCurrentValues = function (time) {\n        return this.start(time, true);\n    };\n    Tween.prototype._setupProperties = function (_object, _valuesStart, _valuesEnd, _valuesStartRepeat, overrideStartingValues) {\n        for (var property in _valuesEnd) {\n            var startValue = _object[property];\n            var startValueIsArray = Array.isArray(startValue);\n            var propType = startValueIsArray ? 'array' : typeof startValue;\n            var isInterpolationList = !startValueIsArray && Array.isArray(_valuesEnd[property]);\n            // If `to()` specifies a property that doesn't exist in the source object,\n            // we should not set that property in the object\n            if (propType === 'undefined' || propType === 'function') {\n                continue;\n            }\n            // Check if an Array was provided as property value\n            if (isInterpolationList) {\n                var endValues = _valuesEnd[property];\n                if (endValues.length === 0) {\n                    continue;\n                }\n                // Handle an array of relative values.\n                // Creates a local copy of the Array with the start value at the front\n                var temp = [startValue];\n                for (var i = 0, l = endValues.length; i < l; i += 1) {\n                    var value = this._handleRelativeValue(startValue, endValues[i]);\n                    if (isNaN(value)) {\n                        isInterpolationList = false;\n                        console.warn('Found invalid interpolation list. Skipping.');\n                        break;\n                    }\n                    temp.push(value);\n                }\n                if (isInterpolationList) {\n                    // if (_valuesStart[property] === undefined) { // handle end values only the first time. NOT NEEDED? setupProperties is now guarded by _propertiesAreSetUp.\n                    _valuesEnd[property] = temp;\n                    // }\n                }\n            }\n            // handle the deepness of the values\n            if ((propType === 'object' || startValueIsArray) && startValue && !isInterpolationList) {\n                _valuesStart[property] = startValueIsArray ? [] : {};\n                var nestedObject = startValue;\n                for (var prop in nestedObject) {\n                    _valuesStart[property][prop] = nestedObject[prop];\n                }\n                // TODO? repeat nested values? And yoyo? And array values?\n                _valuesStartRepeat[property] = startValueIsArray ? [] : {};\n                var endValues = _valuesEnd[property];\n                // If dynamic is not enabled, clone the end values instead of using the passed-in end values.\n                if (!this._isDynamic) {\n                    var tmp = {};\n                    for (var prop in endValues)\n                        tmp[prop] = endValues[prop];\n                    _valuesEnd[property] = endValues = tmp;\n                }\n                this._setupProperties(nestedObject, _valuesStart[property], endValues, _valuesStartRepeat[property], overrideStartingValues);\n            }\n            else {\n                // Save the starting value, but only once unless override is requested.\n                if (typeof _valuesStart[property] === 'undefined' || overrideStartingValues) {\n                    _valuesStart[property] = startValue;\n                }\n                if (!startValueIsArray) {\n                    // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    _valuesStart[property] *= 1.0; // Ensures we're using numbers, not strings\n                }\n                if (isInterpolationList) {\n                    // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    _valuesStartRepeat[property] = _valuesEnd[property].slice().reverse();\n                }\n                else {\n                    _valuesStartRepeat[property] = _valuesStart[property] || 0;\n                }\n            }\n        }\n    };\n    Tween.prototype.stop = function () {\n        if (!this._isChainStopped) {\n            this._isChainStopped = true;\n            this.stopChainedTweens();\n        }\n        if (!this._isPlaying) {\n            return this;\n        }\n        // eslint-disable-next-line\n        this._group && this._group.remove(this);\n        this._isPlaying = false;\n        this._isPaused = false;\n        if (this._onStopCallback) {\n            this._onStopCallback(this._object);\n        }\n        return this;\n    };\n    Tween.prototype.end = function () {\n        this._goToEnd = true;\n        this.update(Infinity);\n        return this;\n    };\n    Tween.prototype.pause = function (time) {\n        if (time === void 0) { time = now(); }\n        if (this._isPaused || !this._isPlaying) {\n            return this;\n        }\n        this._isPaused = true;\n        this._pauseStart = time;\n        // eslint-disable-next-line\n        this._group && this._group.remove(this);\n        return this;\n    };\n    Tween.prototype.resume = function (time) {\n        if (time === void 0) { time = now(); }\n        if (!this._isPaused || !this._isPlaying) {\n            return this;\n        }\n        this._isPaused = false;\n        this._startTime += time - this._pauseStart;\n        this._pauseStart = 0;\n        // eslint-disable-next-line\n        this._group && this._group.add(this);\n        return this;\n    };\n    Tween.prototype.stopChainedTweens = function () {\n        for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n            this._chainedTweens[i].stop();\n        }\n        return this;\n    };\n    Tween.prototype.group = function (group) {\n        if (group === void 0) { group = mainGroup; }\n        this._group = group;\n        return this;\n    };\n    Tween.prototype.delay = function (amount) {\n        if (amount === void 0) { amount = 0; }\n        this._delayTime = amount;\n        return this;\n    };\n    Tween.prototype.repeat = function (times) {\n        if (times === void 0) { times = 0; }\n        this._initialRepeat = times;\n        this._repeat = times;\n        return this;\n    };\n    Tween.prototype.repeatDelay = function (amount) {\n        this._repeatDelayTime = amount;\n        return this;\n    };\n    Tween.prototype.yoyo = function (yoyo) {\n        if (yoyo === void 0) { yoyo = false; }\n        this._yoyo = yoyo;\n        return this;\n    };\n    Tween.prototype.easing = function (easingFunction) {\n        if (easingFunction === void 0) { easingFunction = Easing.Linear.None; }\n        this._easingFunction = easingFunction;\n        return this;\n    };\n    Tween.prototype.interpolation = function (interpolationFunction) {\n        if (interpolationFunction === void 0) { interpolationFunction = Interpolation.Linear; }\n        this._interpolationFunction = interpolationFunction;\n        return this;\n    };\n    // eslint-disable-next-line\n    Tween.prototype.chain = function () {\n        var tweens = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            tweens[_i] = arguments[_i];\n        }\n        this._chainedTweens = tweens;\n        return this;\n    };\n    Tween.prototype.onStart = function (callback) {\n        this._onStartCallback = callback;\n        return this;\n    };\n    Tween.prototype.onEveryStart = function (callback) {\n        this._onEveryStartCallback = callback;\n        return this;\n    };\n    Tween.prototype.onUpdate = function (callback) {\n        this._onUpdateCallback = callback;\n        return this;\n    };\n    Tween.prototype.onRepeat = function (callback) {\n        this._onRepeatCallback = callback;\n        return this;\n    };\n    Tween.prototype.onComplete = function (callback) {\n        this._onCompleteCallback = callback;\n        return this;\n    };\n    Tween.prototype.onStop = function (callback) {\n        this._onStopCallback = callback;\n        return this;\n    };\n    /**\n     * @returns true if the tween is still playing after the update, false\n     * otherwise (calling update on a paused tween still returns true because\n     * it is still playing, just paused).\n     */\n    Tween.prototype.update = function (time, autoStart) {\n        var _this = this;\n        var _a;\n        if (time === void 0) { time = now(); }\n        if (autoStart === void 0) { autoStart = true; }\n        if (this._isPaused)\n            return true;\n        var property;\n        var endTime = this._startTime + this._duration;\n        if (!this._goToEnd && !this._isPlaying) {\n            if (time > endTime)\n                return false;\n            if (autoStart)\n                this.start(time, true);\n        }\n        this._goToEnd = false;\n        if (time < this._startTime) {\n            return true;\n        }\n        if (this._onStartCallbackFired === false) {\n            if (this._onStartCallback) {\n                this._onStartCallback(this._object);\n            }\n            this._onStartCallbackFired = true;\n        }\n        if (this._onEveryStartCallbackFired === false) {\n            if (this._onEveryStartCallback) {\n                this._onEveryStartCallback(this._object);\n            }\n            this._onEveryStartCallbackFired = true;\n        }\n        var elapsedTime = time - this._startTime;\n        var durationAndDelay = this._duration + ((_a = this._repeatDelayTime) !== null && _a !== void 0 ? _a : this._delayTime);\n        var totalTime = this._duration + this._repeat * durationAndDelay;\n        var calculateElapsedPortion = function () {\n            if (_this._duration === 0)\n                return 1;\n            if (elapsedTime > totalTime) {\n                return 1;\n            }\n            var timesRepeated = Math.trunc(elapsedTime / durationAndDelay);\n            var timeIntoCurrentRepeat = elapsedTime - timesRepeated * durationAndDelay;\n            // TODO use %?\n            // const timeIntoCurrentRepeat = elapsedTime % durationAndDelay\n            var portion = Math.min(timeIntoCurrentRepeat / _this._duration, 1);\n            if (portion === 0 && elapsedTime === _this._duration) {\n                return 1;\n            }\n            return portion;\n        };\n        var elapsed = calculateElapsedPortion();\n        var value = this._easingFunction(elapsed);\n        // properties transformations\n        this._updateProperties(this._object, this._valuesStart, this._valuesEnd, value);\n        if (this._onUpdateCallback) {\n            this._onUpdateCallback(this._object, elapsed);\n        }\n        if (this._duration === 0 || elapsedTime >= this._duration) {\n            if (this._repeat > 0) {\n                var completeCount = Math.min(Math.trunc((elapsedTime - this._duration) / durationAndDelay) + 1, this._repeat);\n                if (isFinite(this._repeat)) {\n                    this._repeat -= completeCount;\n                }\n                // Reassign starting values, restart by making startTime = now\n                for (property in this._valuesStartRepeat) {\n                    if (!this._yoyo && typeof this._valuesEnd[property] === 'string') {\n                        this._valuesStartRepeat[property] =\n                            // eslint-disable-next-line\n                            // @ts-ignore FIXME?\n                            this._valuesStartRepeat[property] + parseFloat(this._valuesEnd[property]);\n                    }\n                    if (this._yoyo) {\n                        this._swapEndStartRepeatValues(property);\n                    }\n                    this._valuesStart[property] = this._valuesStartRepeat[property];\n                }\n                if (this._yoyo) {\n                    this._reversed = !this._reversed;\n                }\n                this._startTime += durationAndDelay * completeCount;\n                if (this._onRepeatCallback) {\n                    this._onRepeatCallback(this._object);\n                }\n                this._onEveryStartCallbackFired = false;\n                return true;\n            }\n            else {\n                if (this._onCompleteCallback) {\n                    this._onCompleteCallback(this._object);\n                }\n                for (var i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n                    // Make the chained tweens start exactly at the time they should,\n                    // even if the `update()` method was called way past the duration of the tween\n                    this._chainedTweens[i].start(this._startTime + this._duration, false);\n                }\n                this._isPlaying = false;\n                return false;\n            }\n        }\n        return true;\n    };\n    Tween.prototype._updateProperties = function (_object, _valuesStart, _valuesEnd, value) {\n        for (var property in _valuesEnd) {\n            // Don't update properties that do not exist in the source object\n            if (_valuesStart[property] === undefined) {\n                continue;\n            }\n            var start = _valuesStart[property] || 0;\n            var end = _valuesEnd[property];\n            var startIsArray = Array.isArray(_object[property]);\n            var endIsArray = Array.isArray(end);\n            var isInterpolationList = !startIsArray && endIsArray;\n            if (isInterpolationList) {\n                _object[property] = this._interpolationFunction(end, value);\n            }\n            else if (typeof end === 'object' && end) {\n                // eslint-disable-next-line\n                // @ts-ignore FIXME?\n                this._updateProperties(_object[property], start, end, value);\n            }\n            else {\n                // Parses relative end values with start as base (e.g.: +10, -3)\n                end = this._handleRelativeValue(start, end);\n                // Protect against non numeric properties.\n                if (typeof end === 'number') {\n                    // eslint-disable-next-line\n                    // @ts-ignore FIXME?\n                    _object[property] = start + (end - start) * value;\n                }\n            }\n        }\n    };\n    Tween.prototype._handleRelativeValue = function (start, end) {\n        if (typeof end !== 'string') {\n            return end;\n        }\n        if (end.charAt(0) === '+' || end.charAt(0) === '-') {\n            return start + parseFloat(end);\n        }\n        return parseFloat(end);\n    };\n    Tween.prototype._swapEndStartRepeatValues = function (property) {\n        var tmp = this._valuesStartRepeat[property];\n        var endValue = this._valuesEnd[property];\n        if (typeof endValue === 'string') {\n            this._valuesStartRepeat[property] = this._valuesStartRepeat[property] + parseFloat(endValue);\n        }\n        else {\n            this._valuesStartRepeat[property] = this._valuesEnd[property];\n        }\n        this._valuesEnd[property] = tmp;\n    };\n    return Tween;\n}());\n\nvar VERSION = '23.1.3';\n\n/**\n * Tween.js - Licensed under the MIT license\n * https://github.com/tweenjs/tween.js\n * ----------------------------------------------\n *\n * See https://github.com/tweenjs/tween.js/graphs/contributors for the full list of contributors.\n * Thank you all, you're awesome!\n */\nvar nextId = Sequence.nextId;\n/**\n * Controlling groups of tweens\n *\n * Using the TWEEN singleton to manage your tweens can cause issues in large apps with many components.\n * In these cases, you may want to create your own smaller groups of tweens.\n */\nvar TWEEN = mainGroup;\n// This is the best way to export things in a way that's compatible with both ES\n// Modules and CommonJS, without build hacks, and so as not to break the\n// existing API.\n// https://github.com/rollup/rollup/issues/1961#issuecomment-423037881\nvar getAll = TWEEN.getAll.bind(TWEEN);\nvar removeAll = TWEEN.removeAll.bind(TWEEN);\nvar add = TWEEN.add.bind(TWEEN);\nvar remove = TWEEN.remove.bind(TWEEN);\nvar update = TWEEN.update.bind(TWEEN);\nvar exports = {\n    Easing: Easing,\n    Group: Group,\n    Interpolation: Interpolation,\n    now: now,\n    Sequence: Sequence,\n    nextId: nextId,\n    Tween: Tween,\n    VERSION: VERSION,\n    getAll: getAll,\n    removeAll: removeAll,\n    add: add,\n    remove: remove,\n    update: update,\n};\n\nexport { Easing, Group, Interpolation, Sequence, Tween, VERSION, add, exports as default, getAll, nextId, now, remove, removeAll, update };\n","var index = (function (p) {\n  return typeof p === 'function' ? p // fn\n  : typeof p === 'string' ? function (obj) {\n    return obj[p];\n  } // property name\n  : function (obj) {\n    return p;\n  };\n}); // constant\n\nexport { index as default };\n","// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423\nexport class Adder {\n  constructor() {\n    this._partials = new Float64Array(32);\n    this._n = 0;\n  }\n  add(x) {\n    const p = this._partials;\n    let i = 0;\n    for (let j = 0; j < this._n && j < 32; j++) {\n      const y = p[j],\n        hi = x + y,\n        lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);\n      if (lo) p[i++] = lo;\n      x = hi;\n    }\n    p[i] = x;\n    this._n = i + 1;\n    return this;\n  }\n  valueOf() {\n    const p = this._partials;\n    let n = this._n, x, y, lo, hi = 0;\n    if (n > 0) {\n      hi = p[--n];\n      while (n > 0) {\n        x = hi;\n        y = p[--n];\n        hi = x + y;\n        lo = y - (hi - x);\n        if (lo) break;\n      }\n      if (n > 0 && ((lo < 0 && p[n - 1] < 0) || (lo > 0 && p[n - 1] > 0))) {\n        y = lo * 2;\n        x = hi + y;\n        if (y == x - hi) hi = x;\n      }\n    }\n    return hi;\n  }\n}\n\nexport function fsum(values, valueof) {\n  const adder = new Adder();\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value = +value) {\n        adder.add(value);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if (value = +valueof(value, ++index, values)) {\n        adder.add(value);\n      }\n    }\n  }\n  return +adder;\n}\n\nexport function fcumsum(values, valueof) {\n  const adder = new Adder();\n  let index = -1;\n  return Float64Array.from(values, valueof === undefined\n      ? v => adder.add(+v || 0)\n      : v => adder.add(+valueof(v, ++index, values) || 0)\n  );\n}\n","export default function max(values, valueof) {\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  }\n  return max;\n}\n","export default function sum(values, valueof) {\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value = +value) {\n        sum += value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if (value = +valueof(value, ++index, values)) {\n        sum += value;\n      }\n    }\n  }\n  return sum;\n}\n","export default function(constructor, factory, prototype) {\n  constructor.prototype = factory.prototype = prototype;\n  prototype.constructor = constructor;\n}\n\nexport function extend(parent, definition) {\n  var prototype = Object.create(parent.prototype);\n  for (var key in definition) prototype[key] = definition[key];\n  return prototype;\n}\n","import define, {extend} from \"./define.js\";\n\nexport function Color() {}\n\nexport var darker = 0.7;\nexport var brighter = 1 / darker;\n\nvar reI = \"\\\\s*([+-]?\\\\d+)\\\\s*\",\n    reN = \"\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*\",\n    reP = \"\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*\",\n    reHex = /^#([0-9a-f]{3,8})$/,\n    reRgbInteger = new RegExp(`^rgb\\\\(${reI},${reI},${reI}\\\\)$`),\n    reRgbPercent = new RegExp(`^rgb\\\\(${reP},${reP},${reP}\\\\)$`),\n    reRgbaInteger = new RegExp(`^rgba\\\\(${reI},${reI},${reI},${reN}\\\\)$`),\n    reRgbaPercent = new RegExp(`^rgba\\\\(${reP},${reP},${reP},${reN}\\\\)$`),\n    reHslPercent = new RegExp(`^hsl\\\\(${reN},${reP},${reP}\\\\)$`),\n    reHslaPercent = new RegExp(`^hsla\\\\(${reN},${reP},${reP},${reN}\\\\)$`);\n\nvar named = {\n  aliceblue: 0xf0f8ff,\n  antiquewhite: 0xfaebd7,\n  aqua: 0x00ffff,\n  aquamarine: 0x7fffd4,\n  azure: 0xf0ffff,\n  beige: 0xf5f5dc,\n  bisque: 0xffe4c4,\n  black: 0x000000,\n  blanchedalmond: 0xffebcd,\n  blue: 0x0000ff,\n  blueviolet: 0x8a2be2,\n  brown: 0xa52a2a,\n  burlywood: 0xdeb887,\n  cadetblue: 0x5f9ea0,\n  chartreuse: 0x7fff00,\n  chocolate: 0xd2691e,\n  coral: 0xff7f50,\n  cornflowerblue: 0x6495ed,\n  cornsilk: 0xfff8dc,\n  crimson: 0xdc143c,\n  cyan: 0x00ffff,\n  darkblue: 0x00008b,\n  darkcyan: 0x008b8b,\n  darkgoldenrod: 0xb8860b,\n  darkgray: 0xa9a9a9,\n  darkgreen: 0x006400,\n  darkgrey: 0xa9a9a9,\n  darkkhaki: 0xbdb76b,\n  darkmagenta: 0x8b008b,\n  darkolivegreen: 0x556b2f,\n  darkorange: 0xff8c00,\n  darkorchid: 0x9932cc,\n  darkred: 0x8b0000,\n  darksalmon: 0xe9967a,\n  darkseagreen: 0x8fbc8f,\n  darkslateblue: 0x483d8b,\n  darkslategray: 0x2f4f4f,\n  darkslategrey: 0x2f4f4f,\n  darkturquoise: 0x00ced1,\n  darkviolet: 0x9400d3,\n  deeppink: 0xff1493,\n  deepskyblue: 0x00bfff,\n  dimgray: 0x696969,\n  dimgrey: 0x696969,\n  dodgerblue: 0x1e90ff,\n  firebrick: 0xb22222,\n  floralwhite: 0xfffaf0,\n  forestgreen: 0x228b22,\n  fuchsia: 0xff00ff,\n  gainsboro: 0xdcdcdc,\n  ghostwhite: 0xf8f8ff,\n  gold: 0xffd700,\n  goldenrod: 0xdaa520,\n  gray: 0x808080,\n  green: 0x008000,\n  greenyellow: 0xadff2f,\n  grey: 0x808080,\n  honeydew: 0xf0fff0,\n  hotpink: 0xff69b4,\n  indianred: 0xcd5c5c,\n  indigo: 0x4b0082,\n  ivory: 0xfffff0,\n  khaki: 0xf0e68c,\n  lavender: 0xe6e6fa,\n  lavenderblush: 0xfff0f5,\n  lawngreen: 0x7cfc00,\n  lemonchiffon: 0xfffacd,\n  lightblue: 0xadd8e6,\n  lightcoral: 0xf08080,\n  lightcyan: 0xe0ffff,\n  lightgoldenrodyellow: 0xfafad2,\n  lightgray: 0xd3d3d3,\n  lightgreen: 0x90ee90,\n  lightgrey: 0xd3d3d3,\n  lightpink: 0xffb6c1,\n  lightsalmon: 0xffa07a,\n  lightseagreen: 0x20b2aa,\n  lightskyblue: 0x87cefa,\n  lightslategray: 0x778899,\n  lightslategrey: 0x778899,\n  lightsteelblue: 0xb0c4de,\n  lightyellow: 0xffffe0,\n  lime: 0x00ff00,\n  limegreen: 0x32cd32,\n  linen: 0xfaf0e6,\n  magenta: 0xff00ff,\n  maroon: 0x800000,\n  mediumaquamarine: 0x66cdaa,\n  mediumblue: 0x0000cd,\n  mediumorchid: 0xba55d3,\n  mediumpurple: 0x9370db,\n  mediumseagreen: 0x3cb371,\n  mediumslateblue: 0x7b68ee,\n  mediumspringgreen: 0x00fa9a,\n  mediumturquoise: 0x48d1cc,\n  mediumvioletred: 0xc71585,\n  midnightblue: 0x191970,\n  mintcream: 0xf5fffa,\n  mistyrose: 0xffe4e1,\n  moccasin: 0xffe4b5,\n  navajowhite: 0xffdead,\n  navy: 0x000080,\n  oldlace: 0xfdf5e6,\n  olive: 0x808000,\n  olivedrab: 0x6b8e23,\n  orange: 0xffa500,\n  orangered: 0xff4500,\n  orchid: 0xda70d6,\n  palegoldenrod: 0xeee8aa,\n  palegreen: 0x98fb98,\n  paleturquoise: 0xafeeee,\n  palevioletred: 0xdb7093,\n  papayawhip: 0xffefd5,\n  peachpuff: 0xffdab9,\n  peru: 0xcd853f,\n  pink: 0xffc0cb,\n  plum: 0xdda0dd,\n  powderblue: 0xb0e0e6,\n  purple: 0x800080,\n  rebeccapurple: 0x663399,\n  red: 0xff0000,\n  rosybrown: 0xbc8f8f,\n  royalblue: 0x4169e1,\n  saddlebrown: 0x8b4513,\n  salmon: 0xfa8072,\n  sandybrown: 0xf4a460,\n  seagreen: 0x2e8b57,\n  seashell: 0xfff5ee,\n  sienna: 0xa0522d,\n  silver: 0xc0c0c0,\n  skyblue: 0x87ceeb,\n  slateblue: 0x6a5acd,\n  slategray: 0x708090,\n  slategrey: 0x708090,\n  snow: 0xfffafa,\n  springgreen: 0x00ff7f,\n  steelblue: 0x4682b4,\n  tan: 0xd2b48c,\n  teal: 0x008080,\n  thistle: 0xd8bfd8,\n  tomato: 0xff6347,\n  turquoise: 0x40e0d0,\n  violet: 0xee82ee,\n  wheat: 0xf5deb3,\n  white: 0xffffff,\n  whitesmoke: 0xf5f5f5,\n  yellow: 0xffff00,\n  yellowgreen: 0x9acd32\n};\n\ndefine(Color, color, {\n  copy(channels) {\n    return Object.assign(new this.constructor, this, channels);\n  },\n  displayable() {\n    return this.rgb().displayable();\n  },\n  hex: color_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: color_formatHex,\n  formatHex8: color_formatHex8,\n  formatHsl: color_formatHsl,\n  formatRgb: color_formatRgb,\n  toString: color_formatRgb\n});\n\nfunction color_formatHex() {\n  return this.rgb().formatHex();\n}\n\nfunction color_formatHex8() {\n  return this.rgb().formatHex8();\n}\n\nfunction color_formatHsl() {\n  return hslConvert(this).formatHsl();\n}\n\nfunction color_formatRgb() {\n  return this.rgb().formatRgb();\n}\n\nexport default function color(format) {\n  var m, l;\n  format = (format + \"\").trim().toLowerCase();\n  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000\n      : l === 3 ? new Rgb((m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1) // #f00\n      : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000\n      : l === 4 ? rgba((m >> 12 & 0xf) | (m >> 8 & 0xf0), (m >> 8 & 0xf) | (m >> 4 & 0xf0), (m >> 4 & 0xf) | (m & 0xf0), (((m & 0xf) << 4) | (m & 0xf)) / 0xff) // #f000\n      : null) // invalid hex\n      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)\n      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)\n      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)\n      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)\n      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)\n      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)\n      : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins\n      : format === \"transparent\" ? new Rgb(NaN, NaN, NaN, 0)\n      : null;\n}\n\nfunction rgbn(n) {\n  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);\n}\n\nfunction rgba(r, g, b, a) {\n  if (a <= 0) r = g = b = NaN;\n  return new Rgb(r, g, b, a);\n}\n\nexport function rgbConvert(o) {\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Rgb;\n  o = o.rgb();\n  return new Rgb(o.r, o.g, o.b, o.opacity);\n}\n\nexport function rgb(r, g, b, opacity) {\n  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);\n}\n\nexport function Rgb(r, g, b, opacity) {\n  this.r = +r;\n  this.g = +g;\n  this.b = +b;\n  this.opacity = +opacity;\n}\n\ndefine(Rgb, rgb, extend(Color, {\n  brighter(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  darker(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);\n  },\n  rgb() {\n    return this;\n  },\n  clamp() {\n    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));\n  },\n  displayable() {\n    return (-0.5 <= this.r && this.r < 255.5)\n        && (-0.5 <= this.g && this.g < 255.5)\n        && (-0.5 <= this.b && this.b < 255.5)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  hex: rgb_formatHex, // Deprecated! Use color.formatHex.\n  formatHex: rgb_formatHex,\n  formatHex8: rgb_formatHex8,\n  formatRgb: rgb_formatRgb,\n  toString: rgb_formatRgb\n}));\n\nfunction rgb_formatHex() {\n  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;\n}\n\nfunction rgb_formatHex8() {\n  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;\n}\n\nfunction rgb_formatRgb() {\n  const a = clampa(this.opacity);\n  return `${a === 1 ? \"rgb(\" : \"rgba(\"}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? \")\" : `, ${a})`}`;\n}\n\nfunction clampa(opacity) {\n  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));\n}\n\nfunction clampi(value) {\n  return Math.max(0, Math.min(255, Math.round(value) || 0));\n}\n\nfunction hex(value) {\n  value = clampi(value);\n  return (value < 16 ? \"0\" : \"\") + value.toString(16);\n}\n\nfunction hsla(h, s, l, a) {\n  if (a <= 0) h = s = l = NaN;\n  else if (l <= 0 || l >= 1) h = s = NaN;\n  else if (s <= 0) h = NaN;\n  return new Hsl(h, s, l, a);\n}\n\nexport function hslConvert(o) {\n  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);\n  if (!(o instanceof Color)) o = color(o);\n  if (!o) return new Hsl;\n  if (o instanceof Hsl) return o;\n  o = o.rgb();\n  var r = o.r / 255,\n      g = o.g / 255,\n      b = o.b / 255,\n      min = Math.min(r, g, b),\n      max = Math.max(r, g, b),\n      h = NaN,\n      s = max - min,\n      l = (max + min) / 2;\n  if (s) {\n    if (r === max) h = (g - b) / s + (g < b) * 6;\n    else if (g === max) h = (b - r) / s + 2;\n    else h = (r - g) / s + 4;\n    s /= l < 0.5 ? max + min : 2 - max - min;\n    h *= 60;\n  } else {\n    s = l > 0 && l < 1 ? 0 : h;\n  }\n  return new Hsl(h, s, l, o.opacity);\n}\n\nexport function hsl(h, s, l, opacity) {\n  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);\n}\n\nfunction Hsl(h, s, l, opacity) {\n  this.h = +h;\n  this.s = +s;\n  this.l = +l;\n  this.opacity = +opacity;\n}\n\ndefine(Hsl, hsl, extend(Color, {\n  brighter(k) {\n    k = k == null ? brighter : Math.pow(brighter, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  darker(k) {\n    k = k == null ? darker : Math.pow(darker, k);\n    return new Hsl(this.h, this.s, this.l * k, this.opacity);\n  },\n  rgb() {\n    var h = this.h % 360 + (this.h < 0) * 360,\n        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,\n        l = this.l,\n        m2 = l + (l < 0.5 ? l : 1 - l) * s,\n        m1 = 2 * l - m2;\n    return new Rgb(\n      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),\n      hsl2rgb(h, m1, m2),\n      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),\n      this.opacity\n    );\n  },\n  clamp() {\n    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));\n  },\n  displayable() {\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s))\n        && (0 <= this.l && this.l <= 1)\n        && (0 <= this.opacity && this.opacity <= 1);\n  },\n  formatHsl() {\n    const a = clampa(this.opacity);\n    return `${a === 1 ? \"hsl(\" : \"hsla(\"}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? \")\" : `, ${a})`}`;\n  }\n}));\n\nfunction clamph(value) {\n  value = (value || 0) % 360;\n  return value < 0 ? value + 360 : value;\n}\n\nfunction clampt(value) {\n  return Math.max(0, Math.min(1, value || 0));\n}\n\n/* From FvD 13.37, CSS Color Module Level 3 */\nfunction hsl2rgb(h, m1, m2) {\n  return (h < 60 ? m1 + (m2 - m1) * h / 60\n      : h < 180 ? m2\n      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60\n      : m1) * 255;\n}\n","import {Adder} from \"d3-array\";\nimport {abs, atan2, cos, radians, sin, sqrt} from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\n\nvar lengthSum,\n    lambda0,\n    sinPhi0,\n    cosPhi0;\n\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\n}\n\nexport default function(object) {\n  lengthSum = new Adder();\n  stream(object, lengthStream);\n  return +lengthSum;\n}\n","import length from \"./length.js\";\n\nvar coordinates = [null, null],\n    object = {type: \"LineString\", coordinates: coordinates};\n\nexport default function(a, b) {\n  coordinates[0] = a;\n  coordinates[1] = b;\n  return length(object);\n}\n","export default function range(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n","import {range} from \"d3-array\";\nimport {abs, ceil, epsilon} from \"./math.js\";\n\nfunction graticuleX(y0, y1, dy) {\n  var y = range(y0, y1 - epsilon, dy).concat(y1);\n  return function(x) { return y.map(function(y) { return [x, y]; }); };\n}\n\nfunction graticuleY(x0, x1, dx) {\n  var x = range(x0, x1 - epsilon, dx).concat(x1);\n  return function(y) { return x.map(function(x) { return [x, y]; }); };\n}\n\nexport default function graticule() {\n  var x1, x0, X1, X0,\n      y1, y0, Y1, Y0,\n      dx = 10, dy = dx, DX = 90, DY = 360,\n      x, y, X, Y,\n      precision = 2.5;\n\n  function graticule() {\n    return {type: \"MultiLineString\", coordinates: lines()};\n  }\n\n  function lines() {\n    return range(ceil(X0 / DX) * DX, X1, DX).map(X)\n        .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n        .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))\n        .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));\n  }\n\n  graticule.lines = function() {\n    return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n  };\n\n  graticule.outline = function() {\n    return {\n      type: \"Polygon\",\n      coordinates: [\n        X(X0).concat(\n        Y(Y1).slice(1),\n        X(X1).reverse().slice(1),\n        Y(Y0).reverse().slice(1))\n      ]\n    };\n  };\n\n  graticule.extent = function(_) {\n    if (!arguments.length) return graticule.extentMinor();\n    return graticule.extentMajor(_).extentMinor(_);\n  };\n\n  graticule.extentMajor = function(_) {\n    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n    X0 = +_[0][0], X1 = +_[1][0];\n    Y0 = +_[0][1], Y1 = +_[1][1];\n    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.extentMinor = function(_) {\n    if (!arguments.length) return [[x0, y0], [x1, y1]];\n    x0 = +_[0][0], x1 = +_[1][0];\n    y0 = +_[0][1], y1 = +_[1][1];\n    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.step = function(_) {\n    if (!arguments.length) return graticule.stepMinor();\n    return graticule.stepMajor(_).stepMinor(_);\n  };\n\n  graticule.stepMajor = function(_) {\n    if (!arguments.length) return [DX, DY];\n    DX = +_[0], DY = +_[1];\n    return graticule;\n  };\n\n  graticule.stepMinor = function(_) {\n    if (!arguments.length) return [dx, dy];\n    dx = +_[0], dy = +_[1];\n    return graticule;\n  };\n\n  graticule.precision = function(_) {\n    if (!arguments.length) return precision;\n    precision = +_;\n    x = graticuleX(y0, y1, 90);\n    y = graticuleY(x0, x1, precision);\n    X = graticuleX(Y0, Y1, 90);\n    Y = graticuleY(X0, X1, precision);\n    return graticule;\n  };\n\n  return graticule\n      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])\n      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);\n}\n\nexport function graticule10() {\n  return graticule()();\n}\n","import {asin, atan2, cos, degrees, haversin, radians, sin, sqrt} from \"./math.js\";\n\nexport default function(a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n\n  var interpolate = d ? function(t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [\n      atan2(y, x) * degrees,\n      atan2(z, sqrt(x * x + y * y)) * degrees\n    ];\n  } : function() {\n    return [x0 * degrees, y0 * degrees];\n  };\n\n  interpolate.distance = d;\n\n  return interpolate;\n}\n","export var epsilon = 1e-6;\nexport var epsilon2 = 1e-12;\nexport var pi = Math.PI;\nexport var halfPi = pi / 2;\nexport var quarterPi = pi / 4;\nexport var tau = pi * 2;\n\nexport var degrees = 180 / pi;\nexport var radians = pi / 180;\n\nexport var abs = Math.abs;\nexport var atan = Math.atan;\nexport var atan2 = Math.atan2;\nexport var cos = Math.cos;\nexport var ceil = Math.ceil;\nexport var exp = Math.exp;\nexport var floor = Math.floor;\nexport var hypot = Math.hypot;\nexport var log = Math.log;\nexport var pow = Math.pow;\nexport var sin = Math.sin;\nexport var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };\nexport var sqrt = Math.sqrt;\nexport var tan = Math.tan;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n","export default function noop() {}\n","function streamGeometry(geometry, stream) {\n  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {\n    streamGeometryType[geometry.type](geometry, stream);\n  }\n}\n\nvar streamObjectType = {\n  Feature: function(object, stream) {\n    streamGeometry(object.geometry, stream);\n  },\n  FeatureCollection: function(object, stream) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) streamGeometry(features[i].geometry, stream);\n  }\n};\n\nvar streamGeometryType = {\n  Sphere: function(object, stream) {\n    stream.sphere();\n  },\n  Point: function(object, stream) {\n    object = object.coordinates;\n    stream.point(object[0], object[1], object[2]);\n  },\n  MultiPoint: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);\n  },\n  LineString: function(object, stream) {\n    streamLine(object.coordinates, stream, 0);\n  },\n  MultiLineString: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamLine(coordinates[i], stream, 0);\n  },\n  Polygon: function(object, stream) {\n    streamPolygon(object.coordinates, stream);\n  },\n  MultiPolygon: function(object, stream) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) streamPolygon(coordinates[i], stream);\n  },\n  GeometryCollection: function(object, stream) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) streamGeometry(geometries[i], stream);\n  }\n};\n\nfunction streamLine(coordinates, stream, closed) {\n  var i = -1, n = coordinates.length - closed, coordinate;\n  stream.lineStart();\n  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);\n  stream.lineEnd();\n}\n\nfunction streamPolygon(coordinates, stream) {\n  var i = -1, n = coordinates.length;\n  stream.polygonStart();\n  while (++i < n) streamLine(coordinates[i], stream, 1);\n  stream.polygonEnd();\n}\n\nexport default function(object, stream) {\n  if (object && streamObjectType.hasOwnProperty(object.type)) {\n    streamObjectType[object.type](object, stream);\n  } else {\n    streamGeometry(object, stream);\n  }\n}\n","import value from \"./value.js\";\nimport numberArray, {isNumberArray} from \"./numberArray.js\";\n\nexport default function(a, b) {\n  return (isNumberArray(b) ? numberArray : genericArray)(a, b);\n}\n\nexport function genericArray(a, b) {\n  var nb = b ? b.length : 0,\n      na = a ? Math.min(nb, a.length) : 0,\n      x = new Array(na),\n      c = new Array(nb),\n      i;\n\n  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);\n  for (; i < nb; ++i) c[i] = b[i];\n\n  return function(t) {\n    for (i = 0; i < na; ++i) c[i] = x[i](t);\n    return c;\n  };\n}\n","export default function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return a * (1 - t) + b * t;\n  };\n}\n","export default function(a, b) {\n  if (!b) b = [];\n  var n = a ? Math.min(b.length, a.length) : 0,\n      c = b.slice(),\n      i;\n  return function(t) {\n    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;\n    return c;\n  };\n}\n\nexport function isNumberArray(x) {\n  return ArrayBuffer.isView(x) && !(x instanceof DataView);\n}\n","export function basis(t1, v0, v1, v2, v3) {\n  var t2 = t1 * t1, t3 = t2 * t1;\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n      + (4 - 6 * t2 + 3 * t3) * v1\n      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n      + t3 * v3) / 6;\n}\n\nexport default function(values) {\n  var n = values.length - 1;\n  return function(t) {\n    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n        v1 = values[i],\n        v2 = values[i + 1],\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","import {basis} from \"./basis.js\";\n\nexport default function(values) {\n  var n = values.length;\n  return function(t) {\n    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),\n        v0 = values[(i + n - 1) % n],\n        v1 = values[i % n],\n        v2 = values[(i + 1) % n],\n        v3 = values[(i + 2) % n];\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","export default x => () => x;\n","import constant from \"./constant.js\";\n\nfunction linear(a, d) {\n  return function(t) {\n    return a + t * d;\n  };\n}\n\nfunction exponential(a, b, y) {\n  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {\n    return Math.pow(a + t * b, y);\n  };\n}\n\nexport function hue(a, b) {\n  var d = b - a;\n  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);\n}\n\nexport function gamma(y) {\n  return (y = +y) === 1 ? nogamma : function(a, b) {\n    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);\n  };\n}\n\nexport default function nogamma(a, b) {\n  var d = b - a;\n  return d ? linear(a, d) : constant(isNaN(a) ? b : a);\n}\n","import {rgb as colorRgb} from \"d3-color\";\nimport basis from \"./basis.js\";\nimport basisClosed from \"./basisClosed.js\";\nimport nogamma, {gamma} from \"./color.js\";\n\nexport default (function rgbGamma(y) {\n  var color = gamma(y);\n\n  function rgb(start, end) {\n    var r = color((start = colorRgb(start)).r, (end = colorRgb(end)).r),\n        g = color(start.g, end.g),\n        b = color(start.b, end.b),\n        opacity = nogamma(start.opacity, end.opacity);\n    return function(t) {\n      start.r = r(t);\n      start.g = g(t);\n      start.b = b(t);\n      start.opacity = opacity(t);\n      return start + \"\";\n    };\n  }\n\n  rgb.gamma = rgbGamma;\n\n  return rgb;\n})(1);\n\nfunction rgbSpline(spline) {\n  return function(colors) {\n    var n = colors.length,\n        r = new Array(n),\n        g = new Array(n),\n        b = new Array(n),\n        i, color;\n    for (i = 0; i < n; ++i) {\n      color = colorRgb(colors[i]);\n      r[i] = color.r || 0;\n      g[i] = color.g || 0;\n      b[i] = color.b || 0;\n    }\n    r = spline(r);\n    g = spline(g);\n    b = spline(b);\n    color.opacity = 1;\n    return function(t) {\n      color.r = r(t);\n      color.g = g(t);\n      color.b = b(t);\n      return color + \"\";\n    };\n  };\n}\n\nexport var rgbBasis = rgbSpline(basis);\nexport var rgbBasisClosed = rgbSpline(basisClosed);\n","export default function(a, b) {\n  var d = new Date;\n  return a = +a, b = +b, function(t) {\n    return d.setTime(a * (1 - t) + b * t), d;\n  };\n}\n","import value from \"./value.js\";\n\nexport default function(a, b) {\n  var i = {},\n      c = {},\n      k;\n\n  if (a === null || typeof a !== \"object\") a = {};\n  if (b === null || typeof b !== \"object\") b = {};\n\n  for (k in b) {\n    if (k in a) {\n      i[k] = value(a[k], b[k]);\n    } else {\n      c[k] = b[k];\n    }\n  }\n\n  return function(t) {\n    for (k in i) c[k] = i[k](t);\n    return c;\n  };\n}\n","import number from \"./number.js\";\n\nvar reA = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g,\n    reB = new RegExp(reA.source, \"g\");\n\nfunction zero(b) {\n  return function() {\n    return b;\n  };\n}\n\nfunction one(b) {\n  return function(t) {\n    return b(t) + \"\";\n  };\n}\n\nexport default function(a, b) {\n  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b\n      am, // current match in a\n      bm, // current match in b\n      bs, // string preceding current number in b, if any\n      i = -1, // index in s\n      s = [], // string constants and placeholders\n      q = []; // number interpolators\n\n  // Coerce inputs to strings.\n  a = a + \"\", b = b + \"\";\n\n  // Interpolate pairs of numbers in a & b.\n  while ((am = reA.exec(a))\n      && (bm = reB.exec(b))) {\n    if ((bs = bm.index) > bi) { // a string precedes the next number in b\n      bs = b.slice(bi, bs);\n      if (s[i]) s[i] += bs; // coalesce with previous string\n      else s[++i] = bs;\n    }\n    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match\n      if (s[i]) s[i] += bm; // coalesce with previous string\n      else s[++i] = bm;\n    } else { // interpolate non-matching numbers\n      s[++i] = null;\n      q.push({i: i, x: number(am, bm)});\n    }\n    bi = reB.lastIndex;\n  }\n\n  // Add remains of b.\n  if (bi < b.length) {\n    bs = b.slice(bi);\n    if (s[i]) s[i] += bs; // coalesce with previous string\n    else s[++i] = bs;\n  }\n\n  // Special optimization for only a single match.\n  // Otherwise, interpolate each of the numbers and rejoin the string.\n  return s.length < 2 ? (q[0]\n      ? one(q[0].x)\n      : zero(b))\n      : (b = q.length, function(t) {\n          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);\n          return s.join(\"\");\n        });\n}\n","import {color} from \"d3-color\";\nimport rgb from \"./rgb.js\";\nimport {genericArray} from \"./array.js\";\nimport date from \"./date.js\";\nimport number from \"./number.js\";\nimport object from \"./object.js\";\nimport string from \"./string.js\";\nimport constant from \"./constant.js\";\nimport numberArray, {isNumberArray} from \"./numberArray.js\";\n\nexport default function(a, b) {\n  var t = typeof b, c;\n  return b == null || t === \"boolean\" ? constant(b)\n      : (t === \"number\" ? number\n      : t === \"string\" ? ((c = color(b)) ? (b = c, rgb) : string)\n      : b instanceof color ? rgb\n      : b instanceof Date ? date\n      : isNumberArray(b) ? numberArray\n      : Array.isArray(b) ? genericArray\n      : typeof b.valueOf !== \"function\" && typeof b.toString !== \"function\" || isNaN(b) ? object\n      : number)(a, b);\n}\n","export default function(t) {\n  t = Math.max(0, Math.min(1, t));\n  return \"rgb(\"\n      + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + \", \"\n      + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + \", \"\n      + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66)))))))\n      + \")\";\n}\n","const e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nfunction tickSpec(start, stop, count) {\n  const step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log10(step)),\n      error = step / Math.pow(10, power),\n      factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;\n  let i1, i2, inc;\n  if (power < 0) {\n    inc = Math.pow(10, -power) / factor;\n    i1 = Math.round(start * inc);\n    i2 = Math.round(stop * inc);\n    if (i1 / inc < start) ++i1;\n    if (i2 / inc > stop) --i2;\n    inc = -inc;\n  } else {\n    inc = Math.pow(10, power) * factor;\n    i1 = Math.round(start / inc);\n    i2 = Math.round(stop / inc);\n    if (i1 * inc < start) ++i1;\n    if (i2 * inc > stop) --i2;\n  }\n  if (i2 < i1 && 0.5 <= count && count < 2) return tickSpec(start, stop, count * 2);\n  return [i1, i2, inc];\n}\n\nexport default function ticks(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  if (!(count > 0)) return [];\n  if (start === stop) return [start];\n  const reverse = stop < start, [i1, i2, inc] = reverse ? tickSpec(stop, start, count) : tickSpec(start, stop, count);\n  if (!(i2 >= i1)) return [];\n  const n = i2 - i1 + 1, ticks = new Array(n);\n  if (reverse) {\n    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) / -inc;\n    else for (let i = 0; i < n; ++i) ticks[i] = (i2 - i) * inc;\n  } else {\n    if (inc < 0) for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) / -inc;\n    else for (let i = 0; i < n; ++i) ticks[i] = (i1 + i) * inc;\n  }\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  return tickSpec(start, stop, count)[2];\n}\n\nexport function tickStep(start, stop, count) {\n  stop = +stop, start = +start, count = +count;\n  const reverse = stop < start, inc = reverse ? tickIncrement(stop, start, count) : tickIncrement(start, stop, count);\n  return (reverse ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);\n}\n","export default function ascending(a, b) {\n  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","export default function descending(a, b) {\n  return a == null || b == null ? NaN\n    : b < a ? -1\n    : b > a ? 1\n    : b >= a ? 0\n    : NaN;\n}\n","import ascending from \"./ascending.js\";\nimport descending from \"./descending.js\";\n\nexport default function bisector(f) {\n  let compare1, compare2, delta;\n\n  // If an accessor is specified, promote it to a comparator. In this case we\n  // can test whether the search value is (self-) comparable. We can’t do this\n  // for a comparator (except for specific, known comparators) because we can’t\n  // tell if the comparator is symmetric, and an asymmetric comparator can’t be\n  // used to test whether a single value is comparable.\n  if (f.length !== 2) {\n    compare1 = ascending;\n    compare2 = (d, x) => ascending(f(d), x);\n    delta = (d, x) => f(d) - x;\n  } else {\n    compare1 = f === ascending || f === descending ? f : zero;\n    compare2 = f;\n    delta = f;\n  }\n\n  function left(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function right(a, x, lo = 0, hi = a.length) {\n    if (lo < hi) {\n      if (compare1(x, x) !== 0) return hi;\n      do {\n        const mid = (lo + hi) >>> 1;\n        if (compare2(a[mid], x) <= 0) lo = mid + 1;\n        else hi = mid;\n      } while (lo < hi);\n    }\n    return lo;\n  }\n\n  function center(a, x, lo = 0, hi = a.length) {\n    const i = left(a, x, lo, hi - 1);\n    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;\n  }\n\n  return {left, center, right};\n}\n\nfunction zero() {\n  return 0;\n}\n","export default function number(x) {\n  return x === null ? NaN : +x;\n}\n\nexport function* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n","import ascending from \"./ascending.js\";\nimport bisector from \"./bisector.js\";\nimport number from \"./number.js\";\n\nconst ascendingBisect = bisector(ascending);\nexport const bisectRight = ascendingBisect.right;\nexport const bisectLeft = ascendingBisect.left;\nexport const bisectCenter = bisector(number).center;\nexport default bisectRight;\n","export default function(a, b) {\n  return a = +a, b = +b, function(t) {\n    return Math.round(a * (1 - t) + b * t);\n  };\n}\n","export default function constants(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function number(x) {\n  return +x;\n}\n","import {bisect} from \"d3-array\";\nimport {interpolate as interpolateValue, interpolateNumber, interpolateRound} from \"d3-interpolate\";\nimport constant from \"./constant.js\";\nimport number from \"./number.js\";\n\nvar unit = [0, 1];\n\nexport function identity(x) {\n  return x;\n}\n\nfunction normalize(a, b) {\n  return (b -= (a = +a))\n      ? function(x) { return (x - a) / b; }\n      : constant(isNaN(b) ? NaN : 0.5);\n}\n\nfunction clamper(a, b) {\n  var t;\n  if (a > b) t = a, a = b, b = t;\n  return function(x) { return Math.max(a, Math.min(b, x)); };\n}\n\n// normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].\n// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].\nfunction bimap(domain, range, interpolate) {\n  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];\n  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);\n  else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);\n  return function(x) { return r0(d0(x)); };\n}\n\nfunction polymap(domain, range, interpolate) {\n  var j = Math.min(domain.length, range.length) - 1,\n      d = new Array(j),\n      r = new Array(j),\n      i = -1;\n\n  // Reverse descending domains.\n  if (domain[j] < domain[0]) {\n    domain = domain.slice().reverse();\n    range = range.slice().reverse();\n  }\n\n  while (++i < j) {\n    d[i] = normalize(domain[i], domain[i + 1]);\n    r[i] = interpolate(range[i], range[i + 1]);\n  }\n\n  return function(x) {\n    var i = bisect(domain, x, 1, j) - 1;\n    return r[i](d[i](x));\n  };\n}\n\nexport function copy(source, target) {\n  return target\n      .domain(source.domain())\n      .range(source.range())\n      .interpolate(source.interpolate())\n      .clamp(source.clamp())\n      .unknown(source.unknown());\n}\n\nexport function transformer() {\n  var domain = unit,\n      range = unit,\n      interpolate = interpolateValue,\n      transform,\n      untransform,\n      unknown,\n      clamp = identity,\n      piecewise,\n      output,\n      input;\n\n  function rescale() {\n    var n = Math.min(domain.length, range.length);\n    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);\n    piecewise = n > 2 ? polymap : bimap;\n    output = input = null;\n    return scale;\n  }\n\n  function scale(x) {\n    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));\n  }\n\n  scale.invert = function(y) {\n    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));\n  };\n\n  scale.domain = function(_) {\n    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();\n  };\n\n  scale.range = function(_) {\n    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();\n  };\n\n  scale.rangeRound = function(_) {\n    return range = Array.from(_), interpolate = interpolateRound, rescale();\n  };\n\n  scale.clamp = function(_) {\n    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;\n  };\n\n  scale.interpolate = function(_) {\n    return arguments.length ? (interpolate = _, rescale()) : interpolate;\n  };\n\n  scale.unknown = function(_) {\n    return arguments.length ? (unknown = _, scale) : unknown;\n  };\n\n  return function(t, u) {\n    transform = t, untransform = u;\n    return rescale();\n  };\n}\n\nexport default function continuous() {\n  return transformer()(identity, identity);\n}\n","export function initRange(domain, range) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: this.range(domain); break;\n    default: this.range(range).domain(domain); break;\n  }\n  return this;\n}\n\nexport function initInterpolator(domain, interpolator) {\n  switch (arguments.length) {\n    case 0: break;\n    case 1: {\n      if (typeof domain === \"function\") this.interpolator(domain);\n      else this.range(domain);\n      break;\n    }\n    default: {\n      this.domain(domain);\n      if (typeof interpolator === \"function\") this.interpolator(interpolator);\n      else this.range(interpolator);\n      break;\n    }\n  }\n  return this;\n}\n","// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match;\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10]\n  });\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nexport function FormatSpecifier(specifier) {\n  this.fill = specifier.fill === undefined ? \" \" : specifier.fill + \"\";\n  this.align = specifier.align === undefined ? \">\" : specifier.align + \"\";\n  this.sign = specifier.sign === undefined ? \"-\" : specifier.sign + \"\";\n  this.symbol = specifier.symbol === undefined ? \"\" : specifier.symbol + \"\";\n  this.zero = !!specifier.zero;\n  this.width = specifier.width === undefined ? undefined : +specifier.width;\n  this.comma = !!specifier.comma;\n  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n  this.trim = !!specifier.trim;\n  this.type = specifier.type === undefined ? \"\" : specifier.type + \"\";\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width === undefined ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision === undefined ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + (this.trim ? \"~\" : \"\")\n      + this.type;\n};\n","export default function(x) {\n  return Math.abs(x = Math.round(x)) >= 1e21\n      ? x.toLocaleString(\"en\").replace(/,/g, \"\")\n      : x.toString(10);\n}\n\n// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimalParts(1.23) returns [\"123\", 0].\nexport function formatDecimalParts(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x) {\n  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, value) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));\n}\n","export default function(grouping, thousands) {\n  return function(value, width) {\n    var i = value.length,\n        t = [],\n        j = 0,\n        g = grouping[0],\n        length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) g = Math.max(1, width - length);\n      t.push(value.substring(i -= g, i + g));\n      if ((length += g + 1) > width) break;\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n","export default function(numerals) {\n  return function(value) {\n    return value.replace(/[0-9]/g, function(i) {\n      return numerals[+i];\n    });\n  };\n}\n","// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.\nexport default function(s) {\n  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {\n    switch (s[i]) {\n      case \".\": i0 = i1 = i; break;\n      case \"0\": if (i0 === 0) i0 = i; i1 = i; break;\n      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;\n    }\n  }\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport var prefixExponent;\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1],\n      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,\n      n = coefficient.length;\n  return i === n ? coefficient\n      : i > n ? coefficient + new Array(i - n + 1).join(\"0\")\n      : i > 0 ? coefficient.slice(0, i) + \".\" + coefficient.slice(i)\n      : \"0.\" + new Array(1 - i).join(\"0\") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!\n}\n","import {formatDecimalParts} from \"./formatDecimal.js\";\n\nexport default function(x, p) {\n  var d = formatDecimalParts(x, p);\n  if (!d) return x + \"\";\n  var coefficient = d[0],\n      exponent = d[1];\n  return exponent < 0 ? \"0.\" + new Array(-exponent).join(\"0\") + coefficient\n      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + \".\" + coefficient.slice(exponent + 1)\n      : coefficient + new Array(exponent - coefficient.length + 2).join(\"0\");\n}\n","import formatDecimal from \"./formatDecimal.js\";\nimport formatPrefixAuto from \"./formatPrefixAuto.js\";\nimport formatRounded from \"./formatRounded.js\";\n\nexport default {\n  \"%\": (x, p) => (x * 100).toFixed(p),\n  \"b\": (x) => Math.round(x).toString(2),\n  \"c\": (x) => x + \"\",\n  \"d\": formatDecimal,\n  \"e\": (x, p) => x.toExponential(p),\n  \"f\": (x, p) => x.toFixed(p),\n  \"g\": (x, p) => x.toPrecision(p),\n  \"o\": (x) => Math.round(x).toString(8),\n  \"p\": (x, p) => formatRounded(x * 100, p),\n  \"r\": formatRounded,\n  \"s\": formatPrefixAuto,\n  \"X\": (x) => Math.round(x).toString(16).toUpperCase(),\n  \"x\": (x) => Math.round(x).toString(16)\n};\n","export default function(x) {\n  return x;\n}\n","import exponent from \"./exponent.js\";\nimport formatGroup from \"./formatGroup.js\";\nimport formatNumerals from \"./formatNumerals.js\";\nimport formatSpecifier from \"./formatSpecifier.js\";\nimport formatTrim from \"./formatTrim.js\";\nimport formatTypes from \"./formatTypes.js\";\nimport {prefixExponent} from \"./formatPrefixAuto.js\";\nimport identity from \"./identity.js\";\n\nvar map = Array.prototype.map,\n    prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + \"\"),\n      currencyPrefix = locale.currency === undefined ? \"\" : locale.currency[0] + \"\",\n      currencySuffix = locale.currency === undefined ? \"\" : locale.currency[1] + \"\",\n      decimal = locale.decimal === undefined ? \".\" : locale.decimal + \"\",\n      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),\n      percent = locale.percent === undefined ? \"%\" : locale.percent + \"\",\n      minus = locale.minus === undefined ? \"−\" : locale.minus + \"\",\n      nan = locale.nan === undefined ? \"NaN\" : locale.nan + \"\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        trim = specifier.trim,\n        type = specifier.type;\n\n    // The \"n\" type is an alias for \",g\".\n    if (type === \"n\") comma = true, type = \"g\";\n\n    // The \"\" type, and any invalid type, is an alias for \".12~g\".\n    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = \"g\";\n\n    // If zero fill is specified, padding goes after sign and before digits.\n    if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currencyPrefix : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currencySuffix : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision === undefined ? 6\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n        var valueNegative = value < 0 || 1 / value < 0;\n\n        // Perform the initial formatting.\n        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);\n\n        // Trim insignificant zeros.\n        if (trim) value = formatTrim(value);\n\n        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n        if (valueNegative && +value === 0 && sign !== \"+\") valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : minus) : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n","import formatLocale from \"./locale.js\";\n\nvar locale;\nexport var format;\nexport var formatPrefix;\n\ndefaultLocale({\n  thousands: \",\",\n  grouping: [3],\n  currency: [\"$\", \"\"]\n});\n\nexport default function defaultLocale(definition) {\n  locale = formatLocale(definition);\n  format = locale.format;\n  formatPrefix = locale.formatPrefix;\n  return locale;\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step, max) {\n  step = Math.abs(step), max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n","import exponent from \"./exponent.js\";\n\nexport default function(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n","import {tickStep} from \"d3-array\";\nimport {format, formatPrefix, formatSpecifier, precisionFixed, precisionPrefix, precisionRound} from \"d3-format\";\n\nexport default function tickFormat(start, stop, count, specifier) {\n  var step = tickStep(start, stop, count),\n      precision;\n  specifier = formatSpecifier(specifier == null ? \",f\" : specifier);\n  switch (specifier.type) {\n    case \"s\": {\n      var value = Math.max(Math.abs(start), Math.abs(stop));\n      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;\n      return formatPrefix(specifier, value);\n    }\n    case \"\":\n    case \"e\":\n    case \"g\":\n    case \"p\":\n    case \"r\": {\n      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === \"e\");\n      break;\n    }\n    case \"f\":\n    case \"%\": {\n      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === \"%\") * 2;\n      break;\n    }\n  }\n  return format(specifier);\n}\n","import {ticks, tickIncrement} from \"d3-array\";\nimport continuous, {copy} from \"./continuous.js\";\nimport {initRange} from \"./init.js\";\nimport tickFormat from \"./tickFormat.js\";\n\nexport function linearish(scale) {\n  var domain = scale.domain;\n\n  scale.ticks = function(count) {\n    var d = domain();\n    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);\n  };\n\n  scale.tickFormat = function(count, specifier) {\n    var d = domain();\n    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);\n  };\n\n  scale.nice = function(count) {\n    if (count == null) count = 10;\n\n    var d = domain();\n    var i0 = 0;\n    var i1 = d.length - 1;\n    var start = d[i0];\n    var stop = d[i1];\n    var prestep;\n    var step;\n    var maxIter = 10;\n\n    if (stop < start) {\n      step = start, start = stop, stop = step;\n      step = i0, i0 = i1, i1 = step;\n    }\n    \n    while (maxIter-- > 0) {\n      step = tickIncrement(start, stop, count);\n      if (step === prestep) {\n        d[i0] = start\n        d[i1] = stop\n        return domain(d);\n      } else if (step > 0) {\n        start = Math.floor(start / step) * step;\n        stop = Math.ceil(stop / step) * step;\n      } else if (step < 0) {\n        start = Math.ceil(start * step) / step;\n        stop = Math.floor(stop * step) / step;\n      } else {\n        break;\n      }\n      prestep = step;\n    }\n\n    return scale;\n  };\n\n  return scale;\n}\n\nexport default function linear() {\n  var scale = continuous();\n\n  scale.copy = function() {\n    return copy(scale, linear());\n  };\n\n  initRange.apply(scale, arguments);\n\n  return linearish(scale);\n}\n","import indexBy from 'index-array-by';\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nvar _excluded = [\"createObj\", \"updateObj\", \"exitObj\", \"objBindAttr\", \"dataBindAttr\"];\nfunction diffArrays(prev, next, idAccessor) {\n  var result = {\n    enter: [],\n    update: [],\n    exit: []\n  };\n  if (!idAccessor) {\n    // use object references for comparison\n    var prevSet = new Set(prev);\n    var nextSet = new Set(next);\n    new Set([].concat(_toConsumableArray(prevSet), _toConsumableArray(nextSet))).forEach(function (item) {\n      var type = !prevSet.has(item) ? 'enter' : !nextSet.has(item) ? 'exit' : 'update';\n      result[type].push(type === 'update' ? [item, item] : item);\n    });\n  } else {\n    // compare by id (duplicate keys are ignored)\n    var prevById = indexBy(prev, idAccessor, false);\n    var nextById = indexBy(next, idAccessor, false);\n    var byId = Object.assign({}, prevById, nextById);\n    Object.entries(byId).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        id = _ref2[0],\n        item = _ref2[1];\n      var type = !prevById.hasOwnProperty(id) ? 'enter' : !nextById.hasOwnProperty(id) ? 'exit' : 'update';\n      result[type].push(type === 'update' ? [prevById[id], nextById[id]] : item);\n    });\n  }\n  return result;\n}\nfunction dataBindDiff(data, existingObjs, _ref3) {\n  var _ref3$objBindAttr = _ref3.objBindAttr,\n    objBindAttr = _ref3$objBindAttr === void 0 ? '__obj' : _ref3$objBindAttr,\n    _ref3$dataBindAttr = _ref3.dataBindAttr,\n    dataBindAttr = _ref3$dataBindAttr === void 0 ? '__data' : _ref3$dataBindAttr,\n    idAccessor = _ref3.idAccessor,\n    _ref3$purge = _ref3.purge,\n    purge = _ref3$purge === void 0 ? false : _ref3$purge;\n  var isObjValid = function isObjValid(obj) {\n    return obj.hasOwnProperty(dataBindAttr);\n  };\n  var removeObjs = existingObjs.filter(function (obj) {\n    return !isObjValid(obj);\n  });\n  var prevD = existingObjs.filter(isObjValid).map(function (obj) {\n    return obj[dataBindAttr];\n  });\n  var nextD = data;\n  var diff = purge ? {\n    enter: nextD,\n    exit: prevD,\n    update: []\n  } // don't diff data in purge mode\n  : diffArrays(prevD, nextD, idAccessor);\n  diff.update = diff.update.map(function (_ref4) {\n    var _ref5 = _slicedToArray(_ref4, 2),\n      prevD = _ref5[0],\n      nextD = _ref5[1];\n    if (prevD !== nextD) {\n      // transfer obj to new data point (if different)\n      nextD[objBindAttr] = prevD[objBindAttr];\n      nextD[objBindAttr][dataBindAttr] = nextD;\n    }\n    return nextD;\n  });\n  diff.exit = diff.exit.concat(removeObjs.map(function (obj) {\n    return _defineProperty({}, objBindAttr, obj);\n  }));\n  return diff;\n}\nfunction viewDigest(data, existingObjs,\n// list\nappendObj,\n// item => {...} function\nremoveObj, // item => {...} function\n_ref7) {\n  var _ref7$createObj = _ref7.createObj,\n    createObj = _ref7$createObj === void 0 ? function (d) {\n      return {};\n    } : _ref7$createObj,\n    _ref7$updateObj = _ref7.updateObj,\n    updateObj = _ref7$updateObj === void 0 ? function (obj, d) {} : _ref7$updateObj,\n    _ref7$exitObj = _ref7.exitObj,\n    exitObj = _ref7$exitObj === void 0 ? function (obj) {} : _ref7$exitObj,\n    _ref7$objBindAttr = _ref7.objBindAttr,\n    objBindAttr = _ref7$objBindAttr === void 0 ? '__obj' : _ref7$objBindAttr,\n    _ref7$dataBindAttr = _ref7.dataBindAttr,\n    dataBindAttr = _ref7$dataBindAttr === void 0 ? '__data' : _ref7$dataBindAttr,\n    dataDiffOptions = _objectWithoutProperties(_ref7, _excluded);\n  var _dataBindDiff = dataBindDiff(data, existingObjs, _objectSpread2({\n      objBindAttr: objBindAttr,\n      dataBindAttr: dataBindAttr\n    }, dataDiffOptions)),\n    enter = _dataBindDiff.enter,\n    update = _dataBindDiff.update,\n    exit = _dataBindDiff.exit;\n\n  // Remove exiting points\n  exit.forEach(function (d) {\n    var obj = d[objBindAttr];\n    delete d[objBindAttr]; // unbind obj\n\n    exitObj(obj);\n    removeObj(obj);\n  });\n  var newObjs = createObjs(enter);\n  var pointsData = [].concat(_toConsumableArray(enter), _toConsumableArray(update));\n  updateObjs(pointsData);\n\n  // Add new points\n  newObjs.forEach(appendObj);\n\n  //\n\n  function createObjs(data) {\n    var newObjs = [];\n    data.forEach(function (d) {\n      var obj = createObj(d);\n      if (obj) {\n        obj[dataBindAttr] = d;\n        d[objBindAttr] = obj;\n        newObjs.push(obj);\n      }\n    });\n    return newObjs;\n  }\n  function updateObjs(data) {\n    data.forEach(function (d) {\n      var obj = d[objBindAttr];\n      if (obj) {\n        obj[dataBindAttr] = d;\n        updateObj(obj, d);\n      }\n    });\n  }\n}\n\nexport { viewDigest as default };\n","function _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nfunction _arrayWithHoles(r) {\n  if (Array.isArray(r)) return r;\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) ; else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _objectWithoutProperties(e, t) {\n  if (null == e) return {};\n  var o,\n    r,\n    i = _objectWithoutPropertiesLoose(e, t);\n  if (Object.getOwnPropertySymbols) {\n    var s = Object.getOwnPropertySymbols(e);\n    for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n  }\n  return i;\n}\nfunction _objectWithoutPropertiesLoose(r, e) {\n  if (null == r) return {};\n  var t = {};\n  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {\n    if (e.includes(n)) continue;\n    t[n] = r[n];\n  }\n  return t;\n}\nfunction _slicedToArray(r, e) {\n  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r );\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (String )(t);\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\n\nvar index = (function () {\n  var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keyAccessors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var multiItem = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var flattenKeys = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var keys = (keyAccessors instanceof Array ? keyAccessors.length ? keyAccessors : [undefined] : [keyAccessors]).map(function (key) {\n    return {\n      keyAccessor: key,\n      isProp: !(key instanceof Function)\n    };\n  });\n  var indexedResult = list.reduce(function (res, item) {\n    var iterObj = res;\n    var itemVal = item;\n    keys.forEach(function (_ref, idx) {\n      var keyAccessor = _ref.keyAccessor,\n        isProp = _ref.isProp;\n      var key;\n      if (isProp) {\n        var _itemVal = itemVal,\n          propVal = _itemVal[keyAccessor],\n          rest = _objectWithoutProperties(_itemVal, [keyAccessor].map(_toPropertyKey));\n        key = propVal;\n        itemVal = rest;\n      } else {\n        key = keyAccessor(itemVal, idx);\n      }\n      if (idx + 1 < keys.length) {\n        if (!iterObj.hasOwnProperty(key)) {\n          iterObj[key] = {};\n        }\n        iterObj = iterObj[key];\n      } else {\n        // Leaf key\n        if (multiItem) {\n          if (!iterObj.hasOwnProperty(key)) {\n            iterObj[key] = [];\n          }\n          iterObj[key].push(itemVal);\n        } else {\n          iterObj[key] = itemVal;\n        }\n      }\n    });\n    return res;\n  }, {});\n  if (multiItem instanceof Function) {\n    // Reduce leaf multiple values\n    (function reduce(node) {\n      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      if (level === keys.length) {\n        Object.keys(node).forEach(function (k) {\n          return node[k] = multiItem(node[k]);\n        });\n      } else {\n        Object.values(node).forEach(function (child) {\n          return reduce(child, level + 1);\n        });\n      }\n    })(indexedResult); // IIFE\n  }\n  var result = indexedResult;\n  if (flattenKeys) {\n    // flatten into array\n    result = [];\n    (function flatten(node) {\n      var accKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      if (accKeys.length === keys.length) {\n        result.push({\n          keys: accKeys,\n          vals: node\n        });\n      } else {\n        Object.entries(node).forEach(function (_ref2) {\n          var _ref3 = _slicedToArray(_ref2, 2),\n            key = _ref3[0],\n            val = _ref3[1];\n          return flatten(val, [].concat(_toConsumableArray(accKeys), [key]));\n        });\n      }\n    })(indexedResult); //IIFE\n\n    if (keyAccessors instanceof Array && keyAccessors.length === 0 && result.length === 1) {\n      // clear keys if there's no key accessors (single result)\n      result[0].keys = [];\n    }\n  }\n  return result;\n});\n\nexport { index as default };\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nexport default isObject;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nexport default isSymbol;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import isObject from './isObject.js';\nimport now from './now.js';\nimport toNumber from './toNumber.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nexport default debounce;\n","import debounce from 'lodash-es/debounce.js';\n\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nvar Prop = /*#__PURE__*/_createClass(function Prop(name, _ref) {\n  var _ref$default = _ref[\"default\"],\n    defaultVal = _ref$default === void 0 ? null : _ref$default,\n    _ref$triggerUpdate = _ref.triggerUpdate,\n    triggerUpdate = _ref$triggerUpdate === void 0 ? true : _ref$triggerUpdate,\n    _ref$onChange = _ref.onChange,\n    onChange = _ref$onChange === void 0 ? function (newVal, state) {} : _ref$onChange;\n  _classCallCheck(this, Prop);\n  this.name = name;\n  this.defaultVal = defaultVal;\n  this.triggerUpdate = triggerUpdate;\n  this.onChange = onChange;\n});\nfunction index (_ref2) {\n  var _ref2$stateInit = _ref2.stateInit,\n    stateInit = _ref2$stateInit === void 0 ? function () {\n      return {};\n    } : _ref2$stateInit,\n    _ref2$props = _ref2.props,\n    rawProps = _ref2$props === void 0 ? {} : _ref2$props,\n    _ref2$methods = _ref2.methods,\n    methods = _ref2$methods === void 0 ? {} : _ref2$methods,\n    _ref2$aliases = _ref2.aliases,\n    aliases = _ref2$aliases === void 0 ? {} : _ref2$aliases,\n    _ref2$init = _ref2.init,\n    initFn = _ref2$init === void 0 ? function () {} : _ref2$init,\n    _ref2$update = _ref2.update,\n    updateFn = _ref2$update === void 0 ? function () {} : _ref2$update;\n  // Parse props into Prop instances\n  var props = Object.keys(rawProps).map(function (propName) {\n    return new Prop(propName, rawProps[propName]);\n  });\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // Holds component state\n    var state = Object.assign({}, stateInit instanceof Function ? stateInit(options) : stateInit,\n    // Support plain objects for backwards compatibility\n    {\n      initialised: false\n    });\n\n    // keeps track of which props triggered an update\n    var changedProps = {};\n\n    // Component constructor\n    function comp(nodeElement) {\n      initStatic(nodeElement, options);\n      digest();\n      return comp;\n    }\n    var initStatic = function initStatic(nodeElement, options) {\n      initFn.call(comp, nodeElement, state, options);\n      state.initialised = true;\n    };\n    var digest = debounce(function () {\n      if (!state.initialised) {\n        return;\n      }\n      updateFn.call(comp, state, changedProps);\n      changedProps = {};\n    }, 1);\n\n    // Getter/setter methods\n    props.forEach(function (prop) {\n      comp[prop.name] = getSetProp(prop);\n      function getSetProp(_ref3) {\n        var prop = _ref3.name,\n          _ref3$triggerUpdate = _ref3.triggerUpdate,\n          redigest = _ref3$triggerUpdate === void 0 ? false : _ref3$triggerUpdate,\n          _ref3$onChange = _ref3.onChange,\n          onChange = _ref3$onChange === void 0 ? function (newVal, state) {} : _ref3$onChange,\n          _ref3$defaultVal = _ref3.defaultVal,\n          defaultVal = _ref3$defaultVal === void 0 ? null : _ref3$defaultVal;\n        return function (_) {\n          var curVal = state[prop];\n          if (!arguments.length) {\n            return curVal;\n          } // Getter mode\n\n          var val = _ === undefined ? defaultVal : _; // pick default if value passed is undefined\n          state[prop] = val;\n          onChange.call(comp, val, state, curVal);\n\n          // track changed props\n          !changedProps.hasOwnProperty(prop) && (changedProps[prop] = curVal);\n          if (redigest) {\n            digest();\n          }\n          return comp;\n        };\n      }\n    });\n\n    // Other methods\n    Object.keys(methods).forEach(function (methodName) {\n      comp[methodName] = function () {\n        var _methods$methodName;\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return (_methods$methodName = methods[methodName]).call.apply(_methods$methodName, [comp, state].concat(args));\n      };\n    });\n\n    // Link aliases\n    Object.entries(aliases).forEach(function (_ref4) {\n      var _ref5 = _slicedToArray(_ref4, 2),\n        alias = _ref5[0],\n        target = _ref5[1];\n      return comp[alias] = comp[target];\n    });\n\n    // Reset all component props to their default value\n    comp.resetProps = function () {\n      props.forEach(function (prop) {\n        comp[prop.name](prop.defaultVal);\n      });\n      return comp;\n    };\n\n    //\n\n    comp.resetProps(); // Apply all prop defaults\n    state._rerender = digest; // Expose digest method\n\n    return comp;\n  };\n}\n\nexport { index as default };\n","function* flatten(arrays) {\n  for (const array of arrays) {\n    yield* array;\n  }\n}\n\nexport default function merge(arrays) {\n  return Array.from(flatten(arrays));\n}\n","export default function mean(values, valueof) {\n  let count = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        ++count, sum += value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        ++count, sum += value;\n      }\n    }\n  }\n  if (count) return sum / count;\n}\n","export default function extent(values, valueof) {\n  let min;\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  }\n  return [min, max];\n}\n","export const epsilon = 1.1102230246251565e-16;\nexport const splitter = 134217729;\nexport const resulterrbound = (3 + 8 * epsilon) * epsilon;\n\n// fast_expansion_sum_zeroelim routine from oritinal code\nexport function sum(elen, e, flen, f, h) {\n    let Q, Qnew, hh, bvirt;\n    let enow = e[0];\n    let fnow = f[0];\n    let eindex = 0;\n    let findex = 0;\n    if ((fnow > enow) === (fnow > -enow)) {\n        Q = enow;\n        enow = e[++eindex];\n    } else {\n        Q = fnow;\n        fnow = f[++findex];\n    }\n    let hindex = 0;\n    if (eindex < elen && findex < flen) {\n        if ((fnow > enow) === (fnow > -enow)) {\n            Qnew = enow + Q;\n            hh = Q - (Qnew - enow);\n            enow = e[++eindex];\n        } else {\n            Qnew = fnow + Q;\n            hh = Q - (Qnew - fnow);\n            fnow = f[++findex];\n        }\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n        while (eindex < elen && findex < flen) {\n            if ((fnow > enow) === (fnow > -enow)) {\n                Qnew = Q + enow;\n                bvirt = Qnew - Q;\n                hh = Q - (Qnew - bvirt) + (enow - bvirt);\n                enow = e[++eindex];\n            } else {\n                Qnew = Q + fnow;\n                bvirt = Qnew - Q;\n                hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n                fnow = f[++findex];\n            }\n            Q = Qnew;\n            if (hh !== 0) {\n                h[hindex++] = hh;\n            }\n        }\n    }\n    while (eindex < elen) {\n        Qnew = Q + enow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (enow - bvirt);\n        enow = e[++eindex];\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    while (findex < flen) {\n        Qnew = Q + fnow;\n        bvirt = Qnew - Q;\n        hh = Q - (Qnew - bvirt) + (fnow - bvirt);\n        fnow = f[++findex];\n        Q = Qnew;\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    if (Q !== 0 || hindex === 0) {\n        h[hindex++] = Q;\n    }\n    return hindex;\n}\n\nexport function sum_three(alen, a, blen, b, clen, c, tmp, out) {\n    return sum(sum(alen, a, blen, b, tmp), tmp, clen, c, out);\n}\n\n// scale_expansion_zeroelim routine from oritinal code\nexport function scale(elen, e, b, h) {\n    let Q, sum, hh, product1, product0;\n    let bvirt, c, ahi, alo, bhi, blo;\n\n    c = splitter * b;\n    bhi = c - (c - b);\n    blo = b - bhi;\n    let enow = e[0];\n    Q = enow * b;\n    c = splitter * enow;\n    ahi = c - (c - enow);\n    alo = enow - ahi;\n    hh = alo * blo - (Q - ahi * bhi - alo * bhi - ahi * blo);\n    let hindex = 0;\n    if (hh !== 0) {\n        h[hindex++] = hh;\n    }\n    for (let i = 1; i < elen; i++) {\n        enow = e[i];\n        product1 = enow * b;\n        c = splitter * enow;\n        ahi = c - (c - enow);\n        alo = enow - ahi;\n        product0 = alo * blo - (product1 - ahi * bhi - alo * bhi - ahi * blo);\n        sum = Q + product0;\n        bvirt = sum - Q;\n        hh = Q - (sum - bvirt) + (product0 - bvirt);\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n        Q = product1 + sum;\n        hh = sum - (Q - product1);\n        if (hh !== 0) {\n            h[hindex++] = hh;\n        }\n    }\n    if (Q !== 0 || hindex === 0) {\n        h[hindex++] = Q;\n    }\n    return hindex;\n}\n\nexport function negate(elen, e) {\n    for (let i = 0; i < elen; i++) e[i] = -e[i];\n    return elen;\n}\n\nexport function estimate(elen, e) {\n    let Q = e[0];\n    for (let i = 1; i < elen; i++) Q += e[i];\n    return Q;\n}\n\nexport function vec(n) {\n    return new Float64Array(n);\n}\n","import {epsilon, splitter, resulterrbound, estimate, vec, sum} from './util.js';\n\nconst ccwerrboundA = (3 + 16 * epsilon) * epsilon;\nconst ccwerrboundB = (2 + 12 * epsilon) * epsilon;\nconst ccwerrboundC = (9 + 64 * epsilon) * epsilon * epsilon;\n\nconst B = vec(4);\nconst C1 = vec(8);\nconst C2 = vec(12);\nconst D = vec(16);\nconst u = vec(4);\n\nfunction orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {\n    let acxtail, acytail, bcxtail, bcytail;\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\n\n    const acx = ax - cx;\n    const bcx = bx - cx;\n    const acy = ay - cy;\n    const bcy = by - cy;\n\n    s1 = acx * bcy;\n    c = splitter * acx;\n    ahi = c - (c - acx);\n    alo = acx - ahi;\n    c = splitter * bcy;\n    bhi = c - (c - bcy);\n    blo = bcy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acy * bcx;\n    c = splitter * acy;\n    ahi = c - (c - acy);\n    alo = acy - ahi;\n    c = splitter * bcx;\n    bhi = c - (c - bcx);\n    blo = bcx - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    B[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    B[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    B[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    B[3] = u3;\n\n    let det = estimate(4, B);\n    let errbound = ccwerrboundB * detsum;\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    bvirt = ax - acx;\n    acxtail = ax - (acx + bvirt) + (bvirt - cx);\n    bvirt = bx - bcx;\n    bcxtail = bx - (bcx + bvirt) + (bvirt - cx);\n    bvirt = ay - acy;\n    acytail = ay - (acy + bvirt) + (bvirt - cy);\n    bvirt = by - bcy;\n    bcytail = by - (bcy + bvirt) + (bvirt - cy);\n\n    if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {\n        return det;\n    }\n\n    errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);\n    det += (acx * bcytail + bcy * acxtail) - (acy * bcxtail + bcx * acytail);\n    if (det >= errbound || -det >= errbound) return det;\n\n    s1 = acxtail * bcy;\n    c = splitter * acxtail;\n    ahi = c - (c - acxtail);\n    alo = acxtail - ahi;\n    c = splitter * bcy;\n    bhi = c - (c - bcy);\n    blo = bcy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acytail * bcx;\n    c = splitter * acytail;\n    ahi = c - (c - acytail);\n    alo = acytail - ahi;\n    c = splitter * bcx;\n    bhi = c - (c - bcx);\n    blo = bcx - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const C1len = sum(4, B, 4, u, C1);\n\n    s1 = acx * bcytail;\n    c = splitter * acx;\n    ahi = c - (c - acx);\n    alo = acx - ahi;\n    c = splitter * bcytail;\n    bhi = c - (c - bcytail);\n    blo = bcytail - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acy * bcxtail;\n    c = splitter * acy;\n    ahi = c - (c - acy);\n    alo = acy - ahi;\n    c = splitter * bcxtail;\n    bhi = c - (c - bcxtail);\n    blo = bcxtail - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const C2len = sum(C1len, C1, 4, u, C2);\n\n    s1 = acxtail * bcytail;\n    c = splitter * acxtail;\n    ahi = c - (c - acxtail);\n    alo = acxtail - ahi;\n    c = splitter * bcytail;\n    bhi = c - (c - bcytail);\n    blo = bcytail - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = acytail * bcxtail;\n    c = splitter * acytail;\n    ahi = c - (c - acytail);\n    alo = acytail - ahi;\n    c = splitter * bcxtail;\n    bhi = c - (c - bcxtail);\n    blo = bcxtail - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    u[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    u[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    u[3] = u3;\n    const Dlen = sum(C2len, C2, 4, u, D);\n\n    return D[Dlen - 1];\n}\n\nexport function orient2d(ax, ay, bx, by, cx, cy) {\n    const detleft = (ay - cy) * (bx - cx);\n    const detright = (ax - cx) * (by - cy);\n    const det = detleft - detright;\n\n    const detsum = Math.abs(detleft + detright);\n    if (Math.abs(det) >= ccwerrboundA * detsum) return det;\n\n    return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);\n}\n\nexport function orient2dfast(ax, ay, bx, by, cx, cy) {\n    return (ay - cy) * (bx - cx) - (ax - cx) * (by - cy);\n}\n","import {epsilon, splitter, resulterrbound, estimate, vec, sum, scale} from './util.js';\n\nconst o3derrboundA = (7 + 56 * epsilon) * epsilon;\nconst o3derrboundB = (3 + 28 * epsilon) * epsilon;\nconst o3derrboundC = (26 + 288 * epsilon) * epsilon * epsilon;\n\nconst bc = vec(4);\nconst ca = vec(4);\nconst ab = vec(4);\nconst at_b = vec(4);\nconst at_c = vec(4);\nconst bt_c = vec(4);\nconst bt_a = vec(4);\nconst ct_a = vec(4);\nconst ct_b = vec(4);\nconst bct = vec(8);\nconst cat = vec(8);\nconst abt = vec(8);\nconst u = vec(4);\n\nconst _8 = vec(8);\nconst _8b = vec(8);\nconst _16 = vec(8);\nconst _12 = vec(12);\n\nlet fin = vec(192);\nlet fin2 = vec(192);\n\nfunction finadd(finlen, alen, a) {\n    finlen = sum(finlen, fin, alen, a, fin2);\n    const tmp = fin; fin = fin2; fin2 = tmp;\n    return finlen;\n}\n\nfunction tailinit(xtail, ytail, ax, ay, bx, by, a, b) {\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, t1, t0, u3, negate;\n    if (xtail === 0) {\n        if (ytail === 0) {\n            a[0] = 0;\n            b[0] = 0;\n            return 1;\n        } else {\n            negate = -ytail;\n            s1 = negate * ax;\n            c = splitter * negate;\n            ahi = c - (c - negate);\n            alo = negate - ahi;\n            c = splitter * ax;\n            bhi = c - (c - ax);\n            blo = ax - bhi;\n            a[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            a[1] = s1;\n            s1 = ytail * bx;\n            c = splitter * ytail;\n            ahi = c - (c - ytail);\n            alo = ytail - ahi;\n            c = splitter * bx;\n            bhi = c - (c - bx);\n            blo = bx - bhi;\n            b[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            b[1] = s1;\n            return 2;\n        }\n    } else {\n        if (ytail === 0) {\n            s1 = xtail * ay;\n            c = splitter * xtail;\n            ahi = c - (c - xtail);\n            alo = xtail - ahi;\n            c = splitter * ay;\n            bhi = c - (c - ay);\n            blo = ay - bhi;\n            a[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            a[1] = s1;\n            negate = -xtail;\n            s1 = negate * by;\n            c = splitter * negate;\n            ahi = c - (c - negate);\n            alo = negate - ahi;\n            c = splitter * by;\n            bhi = c - (c - by);\n            blo = by - bhi;\n            b[0] = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            b[1] = s1;\n            return 2;\n        } else {\n            s1 = xtail * ay;\n            c = splitter * xtail;\n            ahi = c - (c - xtail);\n            alo = xtail - ahi;\n            c = splitter * ay;\n            bhi = c - (c - ay);\n            blo = ay - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = ytail * ax;\n            c = splitter * ytail;\n            ahi = c - (c - ytail);\n            alo = ytail - ahi;\n            c = splitter * ax;\n            bhi = c - (c - ax);\n            blo = ax - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            a[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            a[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            a[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            a[3] = u3;\n            s1 = ytail * bx;\n            c = splitter * ytail;\n            ahi = c - (c - ytail);\n            alo = ytail - ahi;\n            c = splitter * bx;\n            bhi = c - (c - bx);\n            blo = bx - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = xtail * by;\n            c = splitter * xtail;\n            ahi = c - (c - xtail);\n            alo = xtail - ahi;\n            c = splitter * by;\n            bhi = c - (c - by);\n            blo = by - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            b[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            b[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            b[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            b[3] = u3;\n            return 4;\n        }\n    }\n}\n\nfunction tailadd(finlen, a, b, k, z) {\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, u3;\n    s1 = a * b;\n    c = splitter * a;\n    ahi = c - (c - a);\n    alo = a - ahi;\n    c = splitter * b;\n    bhi = c - (c - b);\n    blo = b - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    c = splitter * k;\n    bhi = c - (c - k);\n    blo = k - bhi;\n    _i = s0 * k;\n    c = splitter * s0;\n    ahi = c - (c - s0);\n    alo = s0 - ahi;\n    u[0] = alo * blo - (_i - ahi * bhi - alo * bhi - ahi * blo);\n    _j = s1 * k;\n    c = splitter * s1;\n    ahi = c - (c - s1);\n    alo = s1 - ahi;\n    _0 = alo * blo - (_j - ahi * bhi - alo * bhi - ahi * blo);\n    _k = _i + _0;\n    bvirt = _k - _i;\n    u[1] = _i - (_k - bvirt) + (_0 - bvirt);\n    u3 = _j + _k;\n    u[2] = _k - (u3 - _j);\n    u[3] = u3;\n    finlen = finadd(finlen, 4, u);\n    if (z !== 0) {\n        c = splitter * z;\n        bhi = c - (c - z);\n        blo = z - bhi;\n        _i = s0 * z;\n        c = splitter * s0;\n        ahi = c - (c - s0);\n        alo = s0 - ahi;\n        u[0] = alo * blo - (_i - ahi * bhi - alo * bhi - ahi * blo);\n        _j = s1 * z;\n        c = splitter * s1;\n        ahi = c - (c - s1);\n        alo = s1 - ahi;\n        _0 = alo * blo - (_j - ahi * bhi - alo * bhi - ahi * blo);\n        _k = _i + _0;\n        bvirt = _k - _i;\n        u[1] = _i - (_k - bvirt) + (_0 - bvirt);\n        u3 = _j + _k;\n        u[2] = _k - (u3 - _j);\n        u[3] = u3;\n        finlen = finadd(finlen, 4, u);\n    }\n    return finlen;\n}\n\nfunction orient3dadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, permanent) {\n    let finlen;\n    let adxtail, bdxtail, cdxtail;\n    let adytail, bdytail, cdytail;\n    let adztail, bdztail, cdztail;\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _k, _0, s1, s0, t1, t0, u3;\n\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n    const adz = az - dz;\n    const bdz = bz - dz;\n    const cdz = cz - dz;\n\n    s1 = bdx * cdy;\n    c = splitter * bdx;\n    ahi = c - (c - bdx);\n    alo = bdx - ahi;\n    c = splitter * cdy;\n    bhi = c - (c - cdy);\n    blo = cdy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cdx * bdy;\n    c = splitter * cdx;\n    ahi = c - (c - cdx);\n    alo = cdx - ahi;\n    c = splitter * bdy;\n    bhi = c - (c - bdy);\n    blo = bdy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    bc[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    bc[3] = u3;\n    s1 = cdx * ady;\n    c = splitter * cdx;\n    ahi = c - (c - cdx);\n    alo = cdx - ahi;\n    c = splitter * ady;\n    bhi = c - (c - ady);\n    blo = ady - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = adx * cdy;\n    c = splitter * adx;\n    ahi = c - (c - adx);\n    alo = adx - ahi;\n    c = splitter * cdy;\n    bhi = c - (c - cdy);\n    blo = cdy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ca[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ca[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ca[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ca[3] = u3;\n    s1 = adx * bdy;\n    c = splitter * adx;\n    ahi = c - (c - adx);\n    alo = adx - ahi;\n    c = splitter * bdy;\n    bhi = c - (c - bdy);\n    blo = bdy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bdx * ady;\n    c = splitter * bdx;\n    ahi = c - (c - bdx);\n    alo = bdx - ahi;\n    c = splitter * ady;\n    bhi = c - (c - ady);\n    blo = ady - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ab[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ab[3] = u3;\n\n    finlen = sum(\n        sum(\n            scale(4, bc, adz, _8), _8,\n            scale(4, ca, bdz, _8b), _8b, _16), _16,\n        scale(4, ab, cdz, _8), _8, fin);\n\n    let det = estimate(finlen, fin);\n    let errbound = o3derrboundB * permanent;\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    bvirt = ax - adx;\n    adxtail = ax - (adx + bvirt) + (bvirt - dx);\n    bvirt = bx - bdx;\n    bdxtail = bx - (bdx + bvirt) + (bvirt - dx);\n    bvirt = cx - cdx;\n    cdxtail = cx - (cdx + bvirt) + (bvirt - dx);\n    bvirt = ay - ady;\n    adytail = ay - (ady + bvirt) + (bvirt - dy);\n    bvirt = by - bdy;\n    bdytail = by - (bdy + bvirt) + (bvirt - dy);\n    bvirt = cy - cdy;\n    cdytail = cy - (cdy + bvirt) + (bvirt - dy);\n    bvirt = az - adz;\n    adztail = az - (adz + bvirt) + (bvirt - dz);\n    bvirt = bz - bdz;\n    bdztail = bz - (bdz + bvirt) + (bvirt - dz);\n    bvirt = cz - cdz;\n    cdztail = cz - (cdz + bvirt) + (bvirt - dz);\n\n    if (adxtail === 0 && bdxtail === 0 && cdxtail === 0 &&\n        adytail === 0 && bdytail === 0 && cdytail === 0 &&\n        adztail === 0 && bdztail === 0 && cdztail === 0) {\n        return det;\n    }\n\n    errbound = o3derrboundC * permanent + resulterrbound * Math.abs(det);\n    det +=\n        adz * (bdx * cdytail + cdy * bdxtail - (bdy * cdxtail + cdx * bdytail)) + adztail * (bdx * cdy - bdy * cdx) +\n        bdz * (cdx * adytail + ady * cdxtail - (cdy * adxtail + adx * cdytail)) + bdztail * (cdx * ady - cdy * adx) +\n        cdz * (adx * bdytail + bdy * adxtail - (ady * bdxtail + bdx * adytail)) + cdztail * (adx * bdy - ady * bdx);\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    const at_len = tailinit(adxtail, adytail, bdx, bdy, cdx, cdy, at_b, at_c);\n    const bt_len = tailinit(bdxtail, bdytail, cdx, cdy, adx, ady, bt_c, bt_a);\n    const ct_len = tailinit(cdxtail, cdytail, adx, ady, bdx, bdy, ct_a, ct_b);\n\n    const bctlen = sum(bt_len, bt_c, ct_len, ct_b, bct);\n    finlen = finadd(finlen, scale(bctlen, bct, adz, _16), _16);\n\n    const catlen = sum(ct_len, ct_a, at_len, at_c, cat);\n    finlen = finadd(finlen, scale(catlen, cat, bdz, _16), _16);\n\n    const abtlen = sum(at_len, at_b, bt_len, bt_a, abt);\n    finlen = finadd(finlen, scale(abtlen, abt, cdz, _16), _16);\n\n    if (adztail !== 0) {\n        finlen = finadd(finlen, scale(4, bc, adztail, _12), _12);\n        finlen = finadd(finlen, scale(bctlen, bct, adztail, _16), _16);\n    }\n    if (bdztail !== 0) {\n        finlen = finadd(finlen, scale(4, ca, bdztail, _12), _12);\n        finlen = finadd(finlen, scale(catlen, cat, bdztail, _16), _16);\n    }\n    if (cdztail !== 0) {\n        finlen = finadd(finlen, scale(4, ab, cdztail, _12), _12);\n        finlen = finadd(finlen, scale(abtlen, abt, cdztail, _16), _16);\n    }\n\n    if (adxtail !== 0) {\n        if (bdytail !== 0) {\n            finlen = tailadd(finlen, adxtail, bdytail, cdz, cdztail);\n        }\n        if (cdytail !== 0) {\n            finlen = tailadd(finlen, -adxtail, cdytail, bdz, bdztail);\n        }\n    }\n    if (bdxtail !== 0) {\n        if (cdytail !== 0) {\n            finlen = tailadd(finlen, bdxtail, cdytail, adz, adztail);\n        }\n        if (adytail !== 0) {\n            finlen = tailadd(finlen, -bdxtail, adytail, cdz, cdztail);\n        }\n    }\n    if (cdxtail !== 0) {\n        if (adytail !== 0) {\n            finlen = tailadd(finlen, cdxtail, adytail, bdz, bdztail);\n        }\n        if (bdytail !== 0) {\n            finlen = tailadd(finlen, -cdxtail, bdytail, adz, adztail);\n        }\n    }\n\n    return fin[finlen - 1];\n}\n\nexport function orient3d(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz) {\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n    const adz = az - dz;\n    const bdz = bz - dz;\n    const cdz = cz - dz;\n\n    const bdxcdy = bdx * cdy;\n    const cdxbdy = cdx * bdy;\n\n    const cdxady = cdx * ady;\n    const adxcdy = adx * cdy;\n\n    const adxbdy = adx * bdy;\n    const bdxady = bdx * ady;\n\n    const det =\n        adz * (bdxcdy - cdxbdy) +\n        bdz * (cdxady - adxcdy) +\n        cdz * (adxbdy - bdxady);\n\n    const permanent =\n        (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * Math.abs(adz) +\n        (Math.abs(cdxady) + Math.abs(adxcdy)) * Math.abs(bdz) +\n        (Math.abs(adxbdy) + Math.abs(bdxady)) * Math.abs(cdz);\n\n    const errbound = o3derrboundA * permanent;\n    if (det > errbound || -det > errbound) {\n        return det;\n    }\n\n    return orient3dadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, permanent);\n}\n\nexport function orient3dfast(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz) {\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n    const adz = az - dz;\n    const bdz = bz - dz;\n    const cdz = cz - dz;\n\n    return adx * (bdy * cdz - bdz * cdy) +\n        bdx * (cdy * adz - cdz * ady) +\n        cdx * (ady * bdz - adz * bdy);\n}\n","import {epsilon, splitter, resulterrbound, estimate, vec, sum, sum_three, scale} from './util.js';\n\nconst iccerrboundA = (10 + 96 * epsilon) * epsilon;\nconst iccerrboundB = (4 + 48 * epsilon) * epsilon;\nconst iccerrboundC = (44 + 576 * epsilon) * epsilon * epsilon;\n\nconst bc = vec(4);\nconst ca = vec(4);\nconst ab = vec(4);\nconst aa = vec(4);\nconst bb = vec(4);\nconst cc = vec(4);\nconst u = vec(4);\nconst v = vec(4);\nconst axtbc = vec(8);\nconst aytbc = vec(8);\nconst bxtca = vec(8);\nconst bytca = vec(8);\nconst cxtab = vec(8);\nconst cytab = vec(8);\nconst abt = vec(8);\nconst bct = vec(8);\nconst cat = vec(8);\nconst abtt = vec(4);\nconst bctt = vec(4);\nconst catt = vec(4);\n\nconst _8 = vec(8);\nconst _16 = vec(16);\nconst _16b = vec(16);\nconst _16c = vec(16);\nconst _32 = vec(32);\nconst _32b = vec(32);\nconst _48 = vec(48);\nconst _64 = vec(64);\n\nlet fin = vec(1152);\nlet fin2 = vec(1152);\n\nfunction finadd(finlen, a, alen) {\n    finlen = sum(finlen, fin, a, alen, fin2);\n    const tmp = fin; fin = fin2; fin2 = tmp;\n    return finlen;\n}\n\nfunction incircleadapt(ax, ay, bx, by, cx, cy, dx, dy, permanent) {\n    let finlen;\n    let adxtail, bdxtail, cdxtail, adytail, bdytail, cdytail;\n    let axtbclen, aytbclen, bxtcalen, bytcalen, cxtablen, cytablen;\n    let abtlen, bctlen, catlen;\n    let abttlen, bcttlen, cattlen;\n    let n1, n0;\n\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\n\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n\n    s1 = bdx * cdy;\n    c = splitter * bdx;\n    ahi = c - (c - bdx);\n    alo = bdx - ahi;\n    c = splitter * cdy;\n    bhi = c - (c - cdy);\n    blo = cdy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cdx * bdy;\n    c = splitter * cdx;\n    ahi = c - (c - cdx);\n    alo = cdx - ahi;\n    c = splitter * bdy;\n    bhi = c - (c - bdy);\n    blo = bdy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    bc[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    bc[3] = u3;\n    s1 = cdx * ady;\n    c = splitter * cdx;\n    ahi = c - (c - cdx);\n    alo = cdx - ahi;\n    c = splitter * ady;\n    bhi = c - (c - ady);\n    blo = ady - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = adx * cdy;\n    c = splitter * adx;\n    ahi = c - (c - adx);\n    alo = adx - ahi;\n    c = splitter * cdy;\n    bhi = c - (c - cdy);\n    blo = cdy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ca[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ca[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ca[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ca[3] = u3;\n    s1 = adx * bdy;\n    c = splitter * adx;\n    ahi = c - (c - adx);\n    alo = adx - ahi;\n    c = splitter * bdy;\n    bhi = c - (c - bdy);\n    blo = bdy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bdx * ady;\n    c = splitter * bdx;\n    ahi = c - (c - bdx);\n    alo = bdx - ahi;\n    c = splitter * ady;\n    bhi = c - (c - ady);\n    blo = ady - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ab[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ab[3] = u3;\n\n    finlen = sum(\n        sum(\n            sum(\n                scale(scale(4, bc, adx, _8), _8, adx, _16), _16,\n                scale(scale(4, bc, ady, _8), _8, ady, _16b), _16b, _32), _32,\n            sum(\n                scale(scale(4, ca, bdx, _8), _8, bdx, _16), _16,\n                scale(scale(4, ca, bdy, _8), _8, bdy, _16b), _16b, _32b), _32b, _64), _64,\n        sum(\n            scale(scale(4, ab, cdx, _8), _8, cdx, _16), _16,\n            scale(scale(4, ab, cdy, _8), _8, cdy, _16b), _16b, _32), _32, fin);\n\n    let det = estimate(finlen, fin);\n    let errbound = iccerrboundB * permanent;\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    bvirt = ax - adx;\n    adxtail = ax - (adx + bvirt) + (bvirt - dx);\n    bvirt = ay - ady;\n    adytail = ay - (ady + bvirt) + (bvirt - dy);\n    bvirt = bx - bdx;\n    bdxtail = bx - (bdx + bvirt) + (bvirt - dx);\n    bvirt = by - bdy;\n    bdytail = by - (bdy + bvirt) + (bvirt - dy);\n    bvirt = cx - cdx;\n    cdxtail = cx - (cdx + bvirt) + (bvirt - dx);\n    bvirt = cy - cdy;\n    cdytail = cy - (cdy + bvirt) + (bvirt - dy);\n    if (adxtail === 0 && bdxtail === 0 && cdxtail === 0 && adytail === 0 && bdytail === 0 && cdytail === 0) {\n        return det;\n    }\n\n    errbound = iccerrboundC * permanent + resulterrbound * Math.abs(det);\n    det += ((adx * adx + ady * ady) * ((bdx * cdytail + cdy * bdxtail) - (bdy * cdxtail + cdx * bdytail)) +\n        2 * (adx * adxtail + ady * adytail) * (bdx * cdy - bdy * cdx)) +\n        ((bdx * bdx + bdy * bdy) * ((cdx * adytail + ady * cdxtail) - (cdy * adxtail + adx * cdytail)) +\n        2 * (bdx * bdxtail + bdy * bdytail) * (cdx * ady - cdy * adx)) +\n        ((cdx * cdx + cdy * cdy) * ((adx * bdytail + bdy * adxtail) - (ady * bdxtail + bdx * adytail)) +\n        2 * (cdx * cdxtail + cdy * cdytail) * (adx * bdy - ady * bdx));\n\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    if (bdxtail !== 0 || bdytail !== 0 || cdxtail !== 0 || cdytail !== 0) {\n        s1 = adx * adx;\n        c = splitter * adx;\n        ahi = c - (c - adx);\n        alo = adx - ahi;\n        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);\n        t1 = ady * ady;\n        c = splitter * ady;\n        ahi = c - (c - ady);\n        alo = ady - ahi;\n        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);\n        _i = s0 + t0;\n        bvirt = _i - s0;\n        aa[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n        _j = s1 + _i;\n        bvirt = _j - s1;\n        _0 = s1 - (_j - bvirt) + (_i - bvirt);\n        _i = _0 + t1;\n        bvirt = _i - _0;\n        aa[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n        u3 = _j + _i;\n        bvirt = u3 - _j;\n        aa[2] = _j - (u3 - bvirt) + (_i - bvirt);\n        aa[3] = u3;\n    }\n    if (cdxtail !== 0 || cdytail !== 0 || adxtail !== 0 || adytail !== 0) {\n        s1 = bdx * bdx;\n        c = splitter * bdx;\n        ahi = c - (c - bdx);\n        alo = bdx - ahi;\n        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);\n        t1 = bdy * bdy;\n        c = splitter * bdy;\n        ahi = c - (c - bdy);\n        alo = bdy - ahi;\n        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);\n        _i = s0 + t0;\n        bvirt = _i - s0;\n        bb[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n        _j = s1 + _i;\n        bvirt = _j - s1;\n        _0 = s1 - (_j - bvirt) + (_i - bvirt);\n        _i = _0 + t1;\n        bvirt = _i - _0;\n        bb[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n        u3 = _j + _i;\n        bvirt = u3 - _j;\n        bb[2] = _j - (u3 - bvirt) + (_i - bvirt);\n        bb[3] = u3;\n    }\n    if (adxtail !== 0 || adytail !== 0 || bdxtail !== 0 || bdytail !== 0) {\n        s1 = cdx * cdx;\n        c = splitter * cdx;\n        ahi = c - (c - cdx);\n        alo = cdx - ahi;\n        s0 = alo * alo - (s1 - ahi * ahi - (ahi + ahi) * alo);\n        t1 = cdy * cdy;\n        c = splitter * cdy;\n        ahi = c - (c - cdy);\n        alo = cdy - ahi;\n        t0 = alo * alo - (t1 - ahi * ahi - (ahi + ahi) * alo);\n        _i = s0 + t0;\n        bvirt = _i - s0;\n        cc[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n        _j = s1 + _i;\n        bvirt = _j - s1;\n        _0 = s1 - (_j - bvirt) + (_i - bvirt);\n        _i = _0 + t1;\n        bvirt = _i - _0;\n        cc[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n        u3 = _j + _i;\n        bvirt = u3 - _j;\n        cc[2] = _j - (u3 - bvirt) + (_i - bvirt);\n        cc[3] = u3;\n    }\n\n    if (adxtail !== 0) {\n        axtbclen = scale(4, bc, adxtail, axtbc);\n        finlen = finadd(finlen, sum_three(\n            scale(axtbclen, axtbc, 2 * adx, _16), _16,\n            scale(scale(4, cc, adxtail, _8), _8, bdy, _16b), _16b,\n            scale(scale(4, bb, adxtail, _8), _8, -cdy, _16c), _16c, _32, _48), _48);\n    }\n    if (adytail !== 0) {\n        aytbclen = scale(4, bc, adytail, aytbc);\n        finlen = finadd(finlen, sum_three(\n            scale(aytbclen, aytbc, 2 * ady, _16), _16,\n            scale(scale(4, bb, adytail, _8), _8, cdx, _16b), _16b,\n            scale(scale(4, cc, adytail, _8), _8, -bdx, _16c), _16c, _32, _48), _48);\n    }\n    if (bdxtail !== 0) {\n        bxtcalen = scale(4, ca, bdxtail, bxtca);\n        finlen = finadd(finlen, sum_three(\n            scale(bxtcalen, bxtca, 2 * bdx, _16), _16,\n            scale(scale(4, aa, bdxtail, _8), _8, cdy, _16b), _16b,\n            scale(scale(4, cc, bdxtail, _8), _8, -ady, _16c), _16c, _32, _48), _48);\n    }\n    if (bdytail !== 0) {\n        bytcalen = scale(4, ca, bdytail, bytca);\n        finlen = finadd(finlen, sum_three(\n            scale(bytcalen, bytca, 2 * bdy, _16), _16,\n            scale(scale(4, cc, bdytail, _8), _8, adx, _16b), _16b,\n            scale(scale(4, aa, bdytail, _8), _8, -cdx, _16c), _16c, _32, _48), _48);\n    }\n    if (cdxtail !== 0) {\n        cxtablen = scale(4, ab, cdxtail, cxtab);\n        finlen = finadd(finlen, sum_three(\n            scale(cxtablen, cxtab, 2 * cdx, _16), _16,\n            scale(scale(4, bb, cdxtail, _8), _8, ady, _16b), _16b,\n            scale(scale(4, aa, cdxtail, _8), _8, -bdy, _16c), _16c, _32, _48), _48);\n    }\n    if (cdytail !== 0) {\n        cytablen = scale(4, ab, cdytail, cytab);\n        finlen = finadd(finlen, sum_three(\n            scale(cytablen, cytab, 2 * cdy, _16), _16,\n            scale(scale(4, aa, cdytail, _8), _8, bdx, _16b), _16b,\n            scale(scale(4, bb, cdytail, _8), _8, -adx, _16c), _16c, _32, _48), _48);\n    }\n\n    if (adxtail !== 0 || adytail !== 0) {\n        if (bdxtail !== 0 || bdytail !== 0 || cdxtail !== 0 || cdytail !== 0) {\n            s1 = bdxtail * cdy;\n            c = splitter * bdxtail;\n            ahi = c - (c - bdxtail);\n            alo = bdxtail - ahi;\n            c = splitter * cdy;\n            bhi = c - (c - cdy);\n            blo = cdy - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = bdx * cdytail;\n            c = splitter * bdx;\n            ahi = c - (c - bdx);\n            alo = bdx - ahi;\n            c = splitter * cdytail;\n            bhi = c - (c - cdytail);\n            blo = cdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            u[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            u[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            u[3] = u3;\n            s1 = cdxtail * -bdy;\n            c = splitter * cdxtail;\n            ahi = c - (c - cdxtail);\n            alo = cdxtail - ahi;\n            c = splitter * -bdy;\n            bhi = c - (c - -bdy);\n            blo = -bdy - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = cdx * -bdytail;\n            c = splitter * cdx;\n            ahi = c - (c - cdx);\n            alo = cdx - ahi;\n            c = splitter * -bdytail;\n            bhi = c - (c - -bdytail);\n            blo = -bdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            v[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            v[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            v[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            v[3] = u3;\n            bctlen = sum(4, u, 4, v, bct);\n            s1 = bdxtail * cdytail;\n            c = splitter * bdxtail;\n            ahi = c - (c - bdxtail);\n            alo = bdxtail - ahi;\n            c = splitter * cdytail;\n            bhi = c - (c - cdytail);\n            blo = cdytail - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = cdxtail * bdytail;\n            c = splitter * cdxtail;\n            ahi = c - (c - cdxtail);\n            alo = cdxtail - ahi;\n            c = splitter * bdytail;\n            bhi = c - (c - bdytail);\n            blo = bdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            bctt[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            bctt[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            bctt[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            bctt[3] = u3;\n            bcttlen = 4;\n        } else {\n            bct[0] = 0;\n            bctlen = 1;\n            bctt[0] = 0;\n            bcttlen = 1;\n        }\n        if (adxtail !== 0) {\n            const len = scale(bctlen, bct, adxtail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(axtbclen, axtbc, adxtail, _16), _16,\n                scale(len, _16c, 2 * adx, _32), _32, _48), _48);\n\n            const len2 = scale(bcttlen, bctt, adxtail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * adx, _16), _16,\n                scale(len2, _8, adxtail, _16b), _16b,\n                scale(len, _16c, adxtail, _32), _32, _32b, _64), _64);\n\n            if (bdytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, cc, adxtail, _8), _8, bdytail, _16), _16);\n            }\n            if (cdytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, bb, -adxtail, _8), _8, cdytail, _16), _16);\n            }\n        }\n        if (adytail !== 0) {\n            const len = scale(bctlen, bct, adytail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(aytbclen, aytbc, adytail, _16), _16,\n                scale(len, _16c, 2 * ady, _32), _32, _48), _48);\n\n            const len2 = scale(bcttlen, bctt, adytail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * ady, _16), _16,\n                scale(len2, _8, adytail, _16b), _16b,\n                scale(len, _16c, adytail, _32), _32, _32b, _64), _64);\n        }\n    }\n    if (bdxtail !== 0 || bdytail !== 0) {\n        if (cdxtail !== 0 || cdytail !== 0 || adxtail !== 0 || adytail !== 0) {\n            s1 = cdxtail * ady;\n            c = splitter * cdxtail;\n            ahi = c - (c - cdxtail);\n            alo = cdxtail - ahi;\n            c = splitter * ady;\n            bhi = c - (c - ady);\n            blo = ady - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = cdx * adytail;\n            c = splitter * cdx;\n            ahi = c - (c - cdx);\n            alo = cdx - ahi;\n            c = splitter * adytail;\n            bhi = c - (c - adytail);\n            blo = adytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            u[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            u[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            u[3] = u3;\n            n1 = -cdy;\n            n0 = -cdytail;\n            s1 = adxtail * n1;\n            c = splitter * adxtail;\n            ahi = c - (c - adxtail);\n            alo = adxtail - ahi;\n            c = splitter * n1;\n            bhi = c - (c - n1);\n            blo = n1 - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = adx * n0;\n            c = splitter * adx;\n            ahi = c - (c - adx);\n            alo = adx - ahi;\n            c = splitter * n0;\n            bhi = c - (c - n0);\n            blo = n0 - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            v[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            v[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            v[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            v[3] = u3;\n            catlen = sum(4, u, 4, v, cat);\n            s1 = cdxtail * adytail;\n            c = splitter * cdxtail;\n            ahi = c - (c - cdxtail);\n            alo = cdxtail - ahi;\n            c = splitter * adytail;\n            bhi = c - (c - adytail);\n            blo = adytail - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = adxtail * cdytail;\n            c = splitter * adxtail;\n            ahi = c - (c - adxtail);\n            alo = adxtail - ahi;\n            c = splitter * cdytail;\n            bhi = c - (c - cdytail);\n            blo = cdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            catt[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            catt[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            catt[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            catt[3] = u3;\n            cattlen = 4;\n        } else {\n            cat[0] = 0;\n            catlen = 1;\n            catt[0] = 0;\n            cattlen = 1;\n        }\n        if (bdxtail !== 0) {\n            const len = scale(catlen, cat, bdxtail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(bxtcalen, bxtca, bdxtail, _16), _16,\n                scale(len, _16c, 2 * bdx, _32), _32, _48), _48);\n\n            const len2 = scale(cattlen, catt, bdxtail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * bdx, _16), _16,\n                scale(len2, _8, bdxtail, _16b), _16b,\n                scale(len, _16c, bdxtail, _32), _32, _32b, _64), _64);\n\n            if (cdytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, aa, bdxtail, _8), _8, cdytail, _16), _16);\n            }\n            if (adytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, cc, -bdxtail, _8), _8, adytail, _16), _16);\n            }\n        }\n        if (bdytail !== 0) {\n            const len = scale(catlen, cat, bdytail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(bytcalen, bytca, bdytail, _16), _16,\n                scale(len, _16c, 2 * bdy, _32), _32, _48), _48);\n\n            const len2 = scale(cattlen, catt, bdytail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * bdy, _16), _16,\n                scale(len2, _8, bdytail, _16b), _16b,\n                scale(len, _16c, bdytail, _32), _32,  _32b, _64), _64);\n        }\n    }\n    if (cdxtail !== 0 || cdytail !== 0) {\n        if (adxtail !== 0 || adytail !== 0 || bdxtail !== 0 || bdytail !== 0) {\n            s1 = adxtail * bdy;\n            c = splitter * adxtail;\n            ahi = c - (c - adxtail);\n            alo = adxtail - ahi;\n            c = splitter * bdy;\n            bhi = c - (c - bdy);\n            blo = bdy - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = adx * bdytail;\n            c = splitter * adx;\n            ahi = c - (c - adx);\n            alo = adx - ahi;\n            c = splitter * bdytail;\n            bhi = c - (c - bdytail);\n            blo = bdytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            u[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            u[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            u[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            u[3] = u3;\n            n1 = -ady;\n            n0 = -adytail;\n            s1 = bdxtail * n1;\n            c = splitter * bdxtail;\n            ahi = c - (c - bdxtail);\n            alo = bdxtail - ahi;\n            c = splitter * n1;\n            bhi = c - (c - n1);\n            blo = n1 - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = bdx * n0;\n            c = splitter * bdx;\n            ahi = c - (c - bdx);\n            alo = bdx - ahi;\n            c = splitter * n0;\n            bhi = c - (c - n0);\n            blo = n0 - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 + t0;\n            bvirt = _i - s0;\n            v[0] = s0 - (_i - bvirt) + (t0 - bvirt);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 + t1;\n            bvirt = _i - _0;\n            v[1] = _0 - (_i - bvirt) + (t1 - bvirt);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            v[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            v[3] = u3;\n            abtlen = sum(4, u, 4, v, abt);\n            s1 = adxtail * bdytail;\n            c = splitter * adxtail;\n            ahi = c - (c - adxtail);\n            alo = adxtail - ahi;\n            c = splitter * bdytail;\n            bhi = c - (c - bdytail);\n            blo = bdytail - bhi;\n            s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n            t1 = bdxtail * adytail;\n            c = splitter * bdxtail;\n            ahi = c - (c - bdxtail);\n            alo = bdxtail - ahi;\n            c = splitter * adytail;\n            bhi = c - (c - adytail);\n            blo = adytail - bhi;\n            t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n            _i = s0 - t0;\n            bvirt = s0 - _i;\n            abtt[0] = s0 - (_i + bvirt) + (bvirt - t0);\n            _j = s1 + _i;\n            bvirt = _j - s1;\n            _0 = s1 - (_j - bvirt) + (_i - bvirt);\n            _i = _0 - t1;\n            bvirt = _0 - _i;\n            abtt[1] = _0 - (_i + bvirt) + (bvirt - t1);\n            u3 = _j + _i;\n            bvirt = u3 - _j;\n            abtt[2] = _j - (u3 - bvirt) + (_i - bvirt);\n            abtt[3] = u3;\n            abttlen = 4;\n        } else {\n            abt[0] = 0;\n            abtlen = 1;\n            abtt[0] = 0;\n            abttlen = 1;\n        }\n        if (cdxtail !== 0) {\n            const len = scale(abtlen, abt, cdxtail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(cxtablen, cxtab, cdxtail, _16), _16,\n                scale(len, _16c, 2 * cdx, _32), _32, _48), _48);\n\n            const len2 = scale(abttlen, abtt, cdxtail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * cdx, _16), _16,\n                scale(len2, _8, cdxtail, _16b), _16b,\n                scale(len, _16c, cdxtail, _32), _32, _32b, _64), _64);\n\n            if (adytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, bb, cdxtail, _8), _8, adytail, _16), _16);\n            }\n            if (bdytail !== 0) {\n                finlen = finadd(finlen, scale(scale(4, aa, -cdxtail, _8), _8, bdytail, _16), _16);\n            }\n        }\n        if (cdytail !== 0) {\n            const len = scale(abtlen, abt, cdytail, _16c);\n            finlen = finadd(finlen, sum(\n                scale(cytablen, cytab, cdytail, _16), _16,\n                scale(len, _16c, 2 * cdy, _32), _32, _48), _48);\n\n            const len2 = scale(abttlen, abtt, cdytail, _8);\n            finlen = finadd(finlen, sum_three(\n                scale(len2, _8, 2 * cdy, _16), _16,\n                scale(len2, _8, cdytail, _16b), _16b,\n                scale(len, _16c, cdytail, _32), _32, _32b, _64), _64);\n        }\n    }\n\n    return fin[finlen - 1];\n}\n\nexport function incircle(ax, ay, bx, by, cx, cy, dx, dy) {\n    const adx = ax - dx;\n    const bdx = bx - dx;\n    const cdx = cx - dx;\n    const ady = ay - dy;\n    const bdy = by - dy;\n    const cdy = cy - dy;\n\n    const bdxcdy = bdx * cdy;\n    const cdxbdy = cdx * bdy;\n    const alift = adx * adx + ady * ady;\n\n    const cdxady = cdx * ady;\n    const adxcdy = adx * cdy;\n    const blift = bdx * bdx + bdy * bdy;\n\n    const adxbdy = adx * bdy;\n    const bdxady = bdx * ady;\n    const clift = cdx * cdx + cdy * cdy;\n\n    const det =\n        alift * (bdxcdy - cdxbdy) +\n        blift * (cdxady - adxcdy) +\n        clift * (adxbdy - bdxady);\n\n    const permanent =\n        (Math.abs(bdxcdy) + Math.abs(cdxbdy)) * alift +\n        (Math.abs(cdxady) + Math.abs(adxcdy)) * blift +\n        (Math.abs(adxbdy) + Math.abs(bdxady)) * clift;\n\n    const errbound = iccerrboundA * permanent;\n\n    if (det > errbound || -det > errbound) {\n        return det;\n    }\n    return incircleadapt(ax, ay, bx, by, cx, cy, dx, dy, permanent);\n}\n\nexport function incirclefast(ax, ay, bx, by, cx, cy, dx, dy) {\n    const adx = ax - dx;\n    const ady = ay - dy;\n    const bdx = bx - dx;\n    const bdy = by - dy;\n    const cdx = cx - dx;\n    const cdy = cy - dy;\n\n    const abdet = adx * bdy - bdx * ady;\n    const bcdet = bdx * cdy - cdx * bdy;\n    const cadet = cdx * ady - adx * cdy;\n    const alift = adx * adx + ady * ady;\n    const blift = bdx * bdx + bdy * bdy;\n    const clift = cdx * cdx + cdy * cdy;\n\n    return alift * bcdet + blift * cadet + clift * abdet;\n}\n","import {epsilon, splitter, resulterrbound, estimate, vec, sum, sum_three, scale, negate} from './util.js';\n\nconst isperrboundA = (16 + 224 * epsilon) * epsilon;\nconst isperrboundB = (5 + 72 * epsilon) * epsilon;\nconst isperrboundC = (71 + 1408 * epsilon) * epsilon * epsilon;\n\nconst ab = vec(4);\nconst bc = vec(4);\nconst cd = vec(4);\nconst de = vec(4);\nconst ea = vec(4);\nconst ac = vec(4);\nconst bd = vec(4);\nconst ce = vec(4);\nconst da = vec(4);\nconst eb = vec(4);\n\nconst abc = vec(24);\nconst bcd = vec(24);\nconst cde = vec(24);\nconst dea = vec(24);\nconst eab = vec(24);\nconst abd = vec(24);\nconst bce = vec(24);\nconst cda = vec(24);\nconst deb = vec(24);\nconst eac = vec(24);\n\nconst adet = vec(1152);\nconst bdet = vec(1152);\nconst cdet = vec(1152);\nconst ddet = vec(1152);\nconst edet = vec(1152);\nconst abdet = vec(2304);\nconst cddet = vec(2304);\nconst cdedet = vec(3456);\nconst deter = vec(5760);\n\nconst _8 = vec(8);\nconst _8b = vec(8);\nconst _8c = vec(8);\nconst _16 = vec(16);\nconst _24 = vec(24);\nconst _48 = vec(48);\nconst _48b = vec(48);\nconst _96 = vec(96);\nconst _192 = vec(192);\nconst _384x = vec(384);\nconst _384y = vec(384);\nconst _384z = vec(384);\nconst _768 = vec(768);\n\nfunction sum_three_scale(a, b, c, az, bz, cz, out) {\n    return sum_three(\n        scale(4, a, az, _8), _8,\n        scale(4, b, bz, _8b), _8b,\n        scale(4, c, cz, _8c), _8c, _16, out);\n}\n\nfunction liftexact(alen, a, blen, b, clen, c, dlen, d, x, y, z, out) {\n    const len = sum(\n        sum(alen, a, blen, b, _48), _48,\n        negate(sum(clen, c, dlen, d, _48b), _48b), _48b, _96);\n\n    return sum_three(\n        scale(scale(len, _96, x, _192), _192, x, _384x), _384x,\n        scale(scale(len, _96, y, _192), _192, y, _384y), _384y,\n        scale(scale(len, _96, z, _192), _192, z, _384z), _384z, _768, out);\n}\n\nfunction insphereexact(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez) {\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;\n\n    s1 = ax * by;\n    c = splitter * ax;\n    ahi = c - (c - ax);\n    alo = ax - ahi;\n    c = splitter * by;\n    bhi = c - (c - by);\n    blo = by - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bx * ay;\n    c = splitter * bx;\n    ahi = c - (c - bx);\n    alo = bx - ahi;\n    c = splitter * ay;\n    bhi = c - (c - ay);\n    blo = ay - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ab[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ab[3] = u3;\n    s1 = bx * cy;\n    c = splitter * bx;\n    ahi = c - (c - bx);\n    alo = bx - ahi;\n    c = splitter * cy;\n    bhi = c - (c - cy);\n    blo = cy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cx * by;\n    c = splitter * cx;\n    ahi = c - (c - cx);\n    alo = cx - ahi;\n    c = splitter * by;\n    bhi = c - (c - by);\n    blo = by - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    bc[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    bc[3] = u3;\n    s1 = cx * dy;\n    c = splitter * cx;\n    ahi = c - (c - cx);\n    alo = cx - ahi;\n    c = splitter * dy;\n    bhi = c - (c - dy);\n    blo = dy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = dx * cy;\n    c = splitter * dx;\n    ahi = c - (c - dx);\n    alo = dx - ahi;\n    c = splitter * cy;\n    bhi = c - (c - cy);\n    blo = cy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    cd[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    cd[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    cd[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    cd[3] = u3;\n    s1 = dx * ey;\n    c = splitter * dx;\n    ahi = c - (c - dx);\n    alo = dx - ahi;\n    c = splitter * ey;\n    bhi = c - (c - ey);\n    blo = ey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = ex * dy;\n    c = splitter * ex;\n    ahi = c - (c - ex);\n    alo = ex - ahi;\n    c = splitter * dy;\n    bhi = c - (c - dy);\n    blo = dy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    de[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    de[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    de[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    de[3] = u3;\n    s1 = ex * ay;\n    c = splitter * ex;\n    ahi = c - (c - ex);\n    alo = ex - ahi;\n    c = splitter * ay;\n    bhi = c - (c - ay);\n    blo = ay - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = ax * ey;\n    c = splitter * ax;\n    ahi = c - (c - ax);\n    alo = ax - ahi;\n    c = splitter * ey;\n    bhi = c - (c - ey);\n    blo = ey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ea[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ea[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ea[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ea[3] = u3;\n    s1 = ax * cy;\n    c = splitter * ax;\n    ahi = c - (c - ax);\n    alo = ax - ahi;\n    c = splitter * cy;\n    bhi = c - (c - cy);\n    blo = cy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cx * ay;\n    c = splitter * cx;\n    ahi = c - (c - cx);\n    alo = cx - ahi;\n    c = splitter * ay;\n    bhi = c - (c - ay);\n    blo = ay - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ac[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ac[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ac[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ac[3] = u3;\n    s1 = bx * dy;\n    c = splitter * bx;\n    ahi = c - (c - bx);\n    alo = bx - ahi;\n    c = splitter * dy;\n    bhi = c - (c - dy);\n    blo = dy - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = dx * by;\n    c = splitter * dx;\n    ahi = c - (c - dx);\n    alo = dx - ahi;\n    c = splitter * by;\n    bhi = c - (c - by);\n    blo = by - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bd[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bd[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    bd[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    bd[3] = u3;\n    s1 = cx * ey;\n    c = splitter * cx;\n    ahi = c - (c - cx);\n    alo = cx - ahi;\n    c = splitter * ey;\n    bhi = c - (c - ey);\n    blo = ey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = ex * cy;\n    c = splitter * ex;\n    ahi = c - (c - ex);\n    alo = ex - ahi;\n    c = splitter * cy;\n    bhi = c - (c - cy);\n    blo = cy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ce[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ce[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    ce[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    ce[3] = u3;\n    s1 = dx * ay;\n    c = splitter * dx;\n    ahi = c - (c - dx);\n    alo = dx - ahi;\n    c = splitter * ay;\n    bhi = c - (c - ay);\n    blo = ay - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = ax * dy;\n    c = splitter * ax;\n    ahi = c - (c - ax);\n    alo = ax - ahi;\n    c = splitter * dy;\n    bhi = c - (c - dy);\n    blo = dy - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    da[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    da[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    da[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    da[3] = u3;\n    s1 = ex * by;\n    c = splitter * ex;\n    ahi = c - (c - ex);\n    alo = ex - ahi;\n    c = splitter * by;\n    bhi = c - (c - by);\n    blo = by - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bx * ey;\n    c = splitter * bx;\n    ahi = c - (c - bx);\n    alo = bx - ahi;\n    c = splitter * ey;\n    bhi = c - (c - ey);\n    blo = ey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    eb[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    eb[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    u3 = _j + _i;\n    bvirt = u3 - _j;\n    eb[2] = _j - (u3 - bvirt) + (_i - bvirt);\n    eb[3] = u3;\n\n    const abclen = sum_three_scale(ab, bc, ac, cz, az, -bz, abc);\n    const bcdlen = sum_three_scale(bc, cd, bd, dz, bz, -cz, bcd);\n    const cdelen = sum_three_scale(cd, de, ce, ez, cz, -dz, cde);\n    const dealen = sum_three_scale(de, ea, da, az, dz, -ez, dea);\n    const eablen = sum_three_scale(ea, ab, eb, bz, ez, -az, eab);\n    const abdlen = sum_three_scale(ab, bd, da, dz, az, bz, abd);\n    const bcelen = sum_three_scale(bc, ce, eb, ez, bz, cz, bce);\n    const cdalen = sum_three_scale(cd, da, ac, az, cz, dz, cda);\n    const deblen = sum_three_scale(de, eb, bd, bz, dz, ez, deb);\n    const eaclen = sum_three_scale(ea, ac, ce, cz, ez, az, eac);\n\n    const deterlen = sum_three(\n        liftexact(cdelen, cde, bcelen, bce, deblen, deb, bcdlen, bcd, ax, ay, az, adet), adet,\n        liftexact(dealen, dea, cdalen, cda, eaclen, eac, cdelen, cde, bx, by, bz, bdet), bdet,\n        sum_three(\n            liftexact(eablen, eab, deblen, deb, abdlen, abd, dealen, dea, cx, cy, cz, cdet), cdet,\n            liftexact(abclen, abc, eaclen, eac, bcelen, bce, eablen, eab, dx, dy, dz, ddet), ddet,\n            liftexact(bcdlen, bcd, abdlen, abd, cdalen, cda, abclen, abc, ex, ey, ez, edet), edet, cddet, cdedet), cdedet, abdet, deter);\n\n    return deter[deterlen - 1];\n}\n\nconst xdet = vec(96);\nconst ydet = vec(96);\nconst zdet = vec(96);\nconst fin = vec(1152);\n\nfunction liftadapt(a, b, c, az, bz, cz, x, y, z, out) {\n    const len = sum_three_scale(a, b, c, az, bz, cz, _24);\n    return sum_three(\n        scale(scale(len, _24, x, _48), _48, x, xdet), xdet,\n        scale(scale(len, _24, y, _48), _48, y, ydet), ydet,\n        scale(scale(len, _24, z, _48), _48, z, zdet), zdet, _192, out);\n}\n\nfunction insphereadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez, permanent) {\n    let ab3, bc3, cd3, da3, ac3, bd3;\n\n    let aextail, bextail, cextail, dextail;\n    let aeytail, beytail, ceytail, deytail;\n    let aeztail, beztail, ceztail, deztail;\n\n    let bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0;\n\n    const aex = ax - ex;\n    const bex = bx - ex;\n    const cex = cx - ex;\n    const dex = dx - ex;\n    const aey = ay - ey;\n    const bey = by - ey;\n    const cey = cy - ey;\n    const dey = dy - ey;\n    const aez = az - ez;\n    const bez = bz - ez;\n    const cez = cz - ez;\n    const dez = dz - ez;\n\n    s1 = aex * bey;\n    c = splitter * aex;\n    ahi = c - (c - aex);\n    alo = aex - ahi;\n    c = splitter * bey;\n    bhi = c - (c - bey);\n    blo = bey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = bex * aey;\n    c = splitter * bex;\n    ahi = c - (c - bex);\n    alo = bex - ahi;\n    c = splitter * aey;\n    bhi = c - (c - aey);\n    blo = aey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ab[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ab[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    ab3 = _j + _i;\n    bvirt = ab3 - _j;\n    ab[2] = _j - (ab3 - bvirt) + (_i - bvirt);\n    ab[3] = ab3;\n    s1 = bex * cey;\n    c = splitter * bex;\n    ahi = c - (c - bex);\n    alo = bex - ahi;\n    c = splitter * cey;\n    bhi = c - (c - cey);\n    blo = cey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cex * bey;\n    c = splitter * cex;\n    ahi = c - (c - cex);\n    alo = cex - ahi;\n    c = splitter * bey;\n    bhi = c - (c - bey);\n    blo = bey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bc[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bc[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    bc3 = _j + _i;\n    bvirt = bc3 - _j;\n    bc[2] = _j - (bc3 - bvirt) + (_i - bvirt);\n    bc[3] = bc3;\n    s1 = cex * dey;\n    c = splitter * cex;\n    ahi = c - (c - cex);\n    alo = cex - ahi;\n    c = splitter * dey;\n    bhi = c - (c - dey);\n    blo = dey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = dex * cey;\n    c = splitter * dex;\n    ahi = c - (c - dex);\n    alo = dex - ahi;\n    c = splitter * cey;\n    bhi = c - (c - cey);\n    blo = cey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    cd[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    cd[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    cd3 = _j + _i;\n    bvirt = cd3 - _j;\n    cd[2] = _j - (cd3 - bvirt) + (_i - bvirt);\n    cd[3] = cd3;\n    s1 = dex * aey;\n    c = splitter * dex;\n    ahi = c - (c - dex);\n    alo = dex - ahi;\n    c = splitter * aey;\n    bhi = c - (c - aey);\n    blo = aey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = aex * dey;\n    c = splitter * aex;\n    ahi = c - (c - aex);\n    alo = aex - ahi;\n    c = splitter * dey;\n    bhi = c - (c - dey);\n    blo = dey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    da[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    da[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    da3 = _j + _i;\n    bvirt = da3 - _j;\n    da[2] = _j - (da3 - bvirt) + (_i - bvirt);\n    da[3] = da3;\n    s1 = aex * cey;\n    c = splitter * aex;\n    ahi = c - (c - aex);\n    alo = aex - ahi;\n    c = splitter * cey;\n    bhi = c - (c - cey);\n    blo = cey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = cex * aey;\n    c = splitter * cex;\n    ahi = c - (c - cex);\n    alo = cex - ahi;\n    c = splitter * aey;\n    bhi = c - (c - aey);\n    blo = aey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    ac[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    ac[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    ac3 = _j + _i;\n    bvirt = ac3 - _j;\n    ac[2] = _j - (ac3 - bvirt) + (_i - bvirt);\n    ac[3] = ac3;\n    s1 = bex * dey;\n    c = splitter * bex;\n    ahi = c - (c - bex);\n    alo = bex - ahi;\n    c = splitter * dey;\n    bhi = c - (c - dey);\n    blo = dey - bhi;\n    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);\n    t1 = dex * bey;\n    c = splitter * dex;\n    ahi = c - (c - dex);\n    alo = dex - ahi;\n    c = splitter * bey;\n    bhi = c - (c - bey);\n    blo = bey - bhi;\n    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);\n    _i = s0 - t0;\n    bvirt = s0 - _i;\n    bd[0] = s0 - (_i + bvirt) + (bvirt - t0);\n    _j = s1 + _i;\n    bvirt = _j - s1;\n    _0 = s1 - (_j - bvirt) + (_i - bvirt);\n    _i = _0 - t1;\n    bvirt = _0 - _i;\n    bd[1] = _0 - (_i + bvirt) + (bvirt - t1);\n    bd3 = _j + _i;\n    bvirt = bd3 - _j;\n    bd[2] = _j - (bd3 - bvirt) + (_i - bvirt);\n    bd[3] = bd3;\n\n    const finlen = sum(\n        sum(\n            negate(liftadapt(bc, cd, bd, dez, bez, -cez, aex, aey, aez, adet), adet), adet,\n            liftadapt(cd, da, ac, aez, cez, dez, bex, bey, bez, bdet), bdet, abdet), abdet,\n        sum(\n            negate(liftadapt(da, ab, bd, bez, dez, aez, cex, cey, cez, cdet), cdet), cdet,\n            liftadapt(ab, bc, ac, cez, aez, -bez, dex, dey, dez, ddet), ddet, cddet), cddet, fin);\n\n    let det = estimate(finlen, fin);\n    let errbound = isperrboundB * permanent;\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    bvirt = ax - aex;\n    aextail = ax - (aex + bvirt) + (bvirt - ex);\n    bvirt = ay - aey;\n    aeytail = ay - (aey + bvirt) + (bvirt - ey);\n    bvirt = az - aez;\n    aeztail = az - (aez + bvirt) + (bvirt - ez);\n    bvirt = bx - bex;\n    bextail = bx - (bex + bvirt) + (bvirt - ex);\n    bvirt = by - bey;\n    beytail = by - (bey + bvirt) + (bvirt - ey);\n    bvirt = bz - bez;\n    beztail = bz - (bez + bvirt) + (bvirt - ez);\n    bvirt = cx - cex;\n    cextail = cx - (cex + bvirt) + (bvirt - ex);\n    bvirt = cy - cey;\n    ceytail = cy - (cey + bvirt) + (bvirt - ey);\n    bvirt = cz - cez;\n    ceztail = cz - (cez + bvirt) + (bvirt - ez);\n    bvirt = dx - dex;\n    dextail = dx - (dex + bvirt) + (bvirt - ex);\n    bvirt = dy - dey;\n    deytail = dy - (dey + bvirt) + (bvirt - ey);\n    bvirt = dz - dez;\n    deztail = dz - (dez + bvirt) + (bvirt - ez);\n    if (aextail === 0 && aeytail === 0 && aeztail === 0 &&\n        bextail === 0 && beytail === 0 && beztail === 0 &&\n        cextail === 0 && ceytail === 0 && ceztail === 0 &&\n        dextail === 0 && deytail === 0 && deztail === 0) {\n        return det;\n    }\n\n    errbound = isperrboundC * permanent + resulterrbound * Math.abs(det);\n\n    const abeps = (aex * beytail + bey * aextail) - (aey * bextail + bex * aeytail);\n    const bceps = (bex * ceytail + cey * bextail) - (bey * cextail + cex * beytail);\n    const cdeps = (cex * deytail + dey * cextail) - (cey * dextail + dex * ceytail);\n    const daeps = (dex * aeytail + aey * dextail) - (dey * aextail + aex * deytail);\n    const aceps = (aex * ceytail + cey * aextail) - (aey * cextail + cex * aeytail);\n    const bdeps = (bex * deytail + dey * bextail) - (bey * dextail + dex * beytail);\n    det +=\n        (((bex * bex + bey * bey + bez * bez) * ((cez * daeps + dez * aceps + aez * cdeps) +\n        (ceztail * da3 + deztail * ac3 + aeztail * cd3)) + (dex * dex + dey * dey + dez * dez) *\n        ((aez * bceps - bez * aceps + cez * abeps) + (aeztail * bc3 - beztail * ac3 + ceztail * ab3))) -\n        ((aex * aex + aey * aey + aez * aez) * ((bez * cdeps - cez * bdeps + dez * bceps) +\n        (beztail * cd3 - ceztail * bd3 + deztail * bc3)) + (cex * cex + cey * cey + cez * cez) *\n        ((dez * abeps + aez * bdeps + bez * daeps) + (deztail * ab3 + aeztail * bd3 + beztail * da3)))) +\n        2 * (((bex * bextail + bey * beytail + bez * beztail) * (cez * da3 + dez * ac3 + aez * cd3) +\n        (dex * dextail + dey * deytail + dez * deztail) * (aez * bc3 - bez * ac3 + cez * ab3)) -\n        ((aex * aextail + aey * aeytail + aez * aeztail) * (bez * cd3 - cez * bd3 + dez * bc3) +\n        (cex * cextail + cey * ceytail + cez * ceztail) * (dez * ab3 + aez * bd3 + bez * da3)));\n\n    if (det >= errbound || -det >= errbound) {\n        return det;\n    }\n\n    return insphereexact(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez);\n}\n\nexport function insphere(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez) {\n    const aex = ax - ex;\n    const bex = bx - ex;\n    const cex = cx - ex;\n    const dex = dx - ex;\n    const aey = ay - ey;\n    const bey = by - ey;\n    const cey = cy - ey;\n    const dey = dy - ey;\n    const aez = az - ez;\n    const bez = bz - ez;\n    const cez = cz - ez;\n    const dez = dz - ez;\n\n    const aexbey = aex * bey;\n    const bexaey = bex * aey;\n    const ab = aexbey - bexaey;\n    const bexcey = bex * cey;\n    const cexbey = cex * bey;\n    const bc = bexcey - cexbey;\n    const cexdey = cex * dey;\n    const dexcey = dex * cey;\n    const cd = cexdey - dexcey;\n    const dexaey = dex * aey;\n    const aexdey = aex * dey;\n    const da = dexaey - aexdey;\n    const aexcey = aex * cey;\n    const cexaey = cex * aey;\n    const ac = aexcey - cexaey;\n    const bexdey = bex * dey;\n    const dexbey = dex * bey;\n    const bd = bexdey - dexbey;\n\n    const alift = aex * aex + aey * aey + aez * aez;\n    const blift = bex * bex + bey * bey + bez * bez;\n    const clift = cex * cex + cey * cey + cez * cez;\n    const dlift = dex * dex + dey * dey + dez * dez;\n\n    const det =\n        (clift * (dez * ab + aez * bd + bez * da) - dlift * (aez * bc - bez * ac + cez * ab)) +\n        (alift * (bez * cd - cez * bd + dez * bc) - blift * (cez * da + dez * ac + aez * cd));\n\n    const aezplus = Math.abs(aez);\n    const bezplus = Math.abs(bez);\n    const cezplus = Math.abs(cez);\n    const dezplus = Math.abs(dez);\n    const aexbeyplus = Math.abs(aexbey) + Math.abs(bexaey);\n    const bexceyplus = Math.abs(bexcey) + Math.abs(cexbey);\n    const cexdeyplus = Math.abs(cexdey) + Math.abs(dexcey);\n    const dexaeyplus = Math.abs(dexaey) + Math.abs(aexdey);\n    const aexceyplus = Math.abs(aexcey) + Math.abs(cexaey);\n    const bexdeyplus = Math.abs(bexdey) + Math.abs(dexbey);\n    const permanent =\n        (cexdeyplus * bezplus + bexdeyplus * cezplus + bexceyplus * dezplus) * alift +\n        (dexaeyplus * cezplus + aexceyplus * dezplus + cexdeyplus * aezplus) * blift +\n        (aexbeyplus * dezplus + bexdeyplus * aezplus + dexaeyplus * bezplus) * clift +\n        (bexceyplus * aezplus + aexceyplus * bezplus + aexbeyplus * cezplus) * dlift;\n\n    const errbound = isperrboundA * permanent;\n    if (det > errbound || -det > errbound) {\n        return det;\n    }\n    return -insphereadapt(ax, ay, az, bx, by, bz, cx, cy, cz, dx, dy, dz, ex, ey, ez, permanent);\n}\n\nexport function inspherefast(pax, pay, paz, pbx, pby, pbz, pcx, pcy, pcz, pdx, pdy, pdz, pex, pey, pez) {\n    const aex = pax - pex;\n    const bex = pbx - pex;\n    const cex = pcx - pex;\n    const dex = pdx - pex;\n    const aey = pay - pey;\n    const bey = pby - pey;\n    const cey = pcy - pey;\n    const dey = pdy - pey;\n    const aez = paz - pez;\n    const bez = pbz - pez;\n    const cez = pcz - pez;\n    const dez = pdz - pez;\n\n    const ab = aex * bey - bex * aey;\n    const bc = bex * cey - cex * bey;\n    const cd = cex * dey - dex * cey;\n    const da = dex * aey - aex * dey;\n    const ac = aex * cey - cex * aey;\n    const bd = bex * dey - dex * bey;\n\n    const abc = aez * bc - bez * ac + cez * ab;\n    const bcd = bez * cd - cez * bd + dez * bc;\n    const cda = cez * da + dez * ac + aez * cd;\n    const dab = dez * ab + aez * bd + bez * da;\n\n    const alift = aex * aex + aey * aey + aez * aez;\n    const blift = bex * bex + bey * bey + bez * bez;\n    const clift = cex * cex + cey * cey + cez * cez;\n    const dlift = dex * dex + dey * dey + dez * dez;\n\n    return (clift * dab - dlift * abc) + (alift * bcd - blift * cda);\n}\n","\nexport {orient2d, orient2dfast} from './esm/orient2d.js';\nexport {orient3d, orient3dfast} from './esm/orient3d.js';\nexport {incircle, incirclefast} from './esm/incircle.js';\nexport {insphere, inspherefast} from './esm/insphere.js';\n","\nconst EPSILON = Math.pow(2, -52);\nconst EDGE_STACK = new Uint32Array(512);\n\nimport {orient2d} from 'robust-predicates';\n\nexport default class Delaunator {\n\n    static from(points, getX = defaultGetX, getY = defaultGetY) {\n        const n = points.length;\n        const coords = new Float64Array(n * 2);\n\n        for (let i = 0; i < n; i++) {\n            const p = points[i];\n            coords[2 * i] = getX(p);\n            coords[2 * i + 1] = getY(p);\n        }\n\n        return new Delaunator(coords);\n    }\n\n    constructor(coords) {\n        const n = coords.length >> 1;\n        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n\n        this.coords = coords;\n\n        // arrays that will store the triangulation graph\n        const maxTriangles = Math.max(2 * n - 5, 0);\n        this._triangles = new Uint32Array(maxTriangles * 3);\n        this._halfedges = new Int32Array(maxTriangles * 3);\n\n        // temporary arrays for tracking the edges of the advancing convex hull\n        this._hashSize = Math.ceil(Math.sqrt(n));\n        this._hullPrev = new Uint32Array(n); // edge to prev edge\n        this._hullNext = new Uint32Array(n); // edge to next edge\n        this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n        this._hullHash = new Int32Array(this._hashSize); // angular edge hash\n\n        // temporary arrays for sorting points\n        this._ids = new Uint32Array(n);\n        this._dists = new Float64Array(n);\n\n        this.update();\n    }\n\n    update() {\n        const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;\n        const n = coords.length >> 1;\n\n        // populate an array of point indices; calculate input data bbox\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (let i = 0; i < n; i++) {\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n            this._ids[i] = i;\n        }\n        const cx = (minX + maxX) / 2;\n        const cy = (minY + maxY) / 2;\n\n        let i0, i1, i2;\n\n        // pick a seed point close to the center\n        for (let i = 0, minDist = Infinity; i < n; i++) {\n            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist) {\n                i0 = i;\n                minDist = d;\n            }\n        }\n        const i0x = coords[2 * i0];\n        const i0y = coords[2 * i0 + 1];\n\n        // find the point closest to the seed\n        for (let i = 0, minDist = Infinity; i < n; i++) {\n            if (i === i0) continue;\n            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist && d > 0) {\n                i1 = i;\n                minDist = d;\n            }\n        }\n        let i1x = coords[2 * i1];\n        let i1y = coords[2 * i1 + 1];\n\n        let minRadius = Infinity;\n\n        // find the third point which forms the smallest circumcircle with the first two\n        for (let i = 0; i < n; i++) {\n            if (i === i0 || i === i1) continue;\n            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n            if (r < minRadius) {\n                i2 = i;\n                minRadius = r;\n            }\n        }\n        let i2x = coords[2 * i2];\n        let i2y = coords[2 * i2 + 1];\n\n        if (minRadius === Infinity) {\n            // order collinear points by dx (or dy if all x are identical)\n            // and return the list as a hull\n            for (let i = 0; i < n; i++) {\n                this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);\n            }\n            quicksort(this._ids, this._dists, 0, n - 1);\n            const hull = new Uint32Array(n);\n            let j = 0;\n            for (let i = 0, d0 = -Infinity; i < n; i++) {\n                const id = this._ids[i];\n                const d = this._dists[id];\n                if (d > d0) {\n                    hull[j++] = id;\n                    d0 = d;\n                }\n            }\n            this.hull = hull.subarray(0, j);\n            this.triangles = new Uint32Array(0);\n            this.halfedges = new Uint32Array(0);\n            return;\n        }\n\n        // swap the order of the seed points for counter-clockwise orientation\n        if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {\n            const i = i1;\n            const x = i1x;\n            const y = i1y;\n            i1 = i2;\n            i1x = i2x;\n            i1y = i2y;\n            i2 = i;\n            i2x = x;\n            i2y = y;\n        }\n\n        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n        this._cx = center.x;\n        this._cy = center.y;\n\n        for (let i = 0; i < n; i++) {\n            this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n        }\n\n        // sort the points by distance from the seed triangle circumcenter\n        quicksort(this._ids, this._dists, 0, n - 1);\n\n        // set up the seed triangle as the starting hull\n        this._hullStart = i0;\n        let hullSize = 3;\n\n        hullNext[i0] = hullPrev[i2] = i1;\n        hullNext[i1] = hullPrev[i0] = i2;\n        hullNext[i2] = hullPrev[i1] = i0;\n\n        hullTri[i0] = 0;\n        hullTri[i1] = 1;\n        hullTri[i2] = 2;\n\n        hullHash.fill(-1);\n        hullHash[this._hashKey(i0x, i0y)] = i0;\n        hullHash[this._hashKey(i1x, i1y)] = i1;\n        hullHash[this._hashKey(i2x, i2y)] = i2;\n\n        this.trianglesLen = 0;\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n        for (let k = 0, xp, yp; k < this._ids.length; k++) {\n            const i = this._ids[k];\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n\n            // skip near-duplicate points\n            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n            xp = x;\n            yp = y;\n\n            // skip seed triangle points\n            if (i === i0 || i === i1 || i === i2) continue;\n\n            // find a visible edge on the convex hull using edge hash\n            let start = 0;\n            for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n                start = hullHash[(key + j) % this._hashSize];\n                if (start !== -1 && start !== hullNext[start]) break;\n            }\n\n            start = hullPrev[start];\n            let e = start, q;\n            while (q = hullNext[e], orient2d(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]) >= 0) {\n                e = q;\n                if (e === start) {\n                    e = -1;\n                    break;\n                }\n            }\n            if (e === -1) continue; // likely a near-duplicate point; skip it\n\n            // add the first triangle from the point\n            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\n\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            hullTri[i] = this._legalize(t + 2);\n            hullTri[e] = t; // keep track of boundary triangles on the hull\n            hullSize++;\n\n            // walk forward through the hull, adding more triangles and flipping recursively\n            let n = hullNext[e];\n            while (q = hullNext[n], orient2d(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]) < 0) {\n                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n                hullTri[i] = this._legalize(t + 2);\n                hullNext[n] = n; // mark as removed\n                hullSize--;\n                n = q;\n            }\n\n            // walk backward from the other side, adding more triangles and flipping\n            if (e === start) {\n                while (q = hullPrev[e], orient2d(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]) < 0) {\n                    t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n                    this._legalize(t + 2);\n                    hullTri[q] = t;\n                    hullNext[e] = e; // mark as removed\n                    hullSize--;\n                    e = q;\n                }\n            }\n\n            // update the hull indices\n            this._hullStart = hullPrev[i] = e;\n            hullNext[e] = hullPrev[n] = i;\n            hullNext[i] = n;\n\n            // save the two new edges in the hash table\n            hullHash[this._hashKey(x, y)] = i;\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n        }\n\n        this.hull = new Uint32Array(hullSize);\n        for (let i = 0, e = this._hullStart; i < hullSize; i++) {\n            this.hull[i] = e;\n            e = hullNext[e];\n        }\n\n        // trim typed triangle mesh arrays\n        this.triangles = this._triangles.subarray(0, this.trianglesLen);\n        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n    }\n\n    _hashKey(x, y) {\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n\n    _legalize(a) {\n        const {_triangles: triangles, _halfedges: halfedges, coords} = this;\n\n        let i = 0;\n        let ar = 0;\n\n        // recursion eliminated with a fixed-size stack\n        while (true) {\n            const b = halfedges[a];\n\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n             * then do the same check/flip recursively for the new pair of triangles\n             *\n             *           pl                    pl\n             *          /||\\                  /  \\\n             *       al/ || \\bl            al/    \\a\n             *        /  ||  \\              /      \\\n             *       /  a||b  \\    flip    /___ar___\\\n             *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n             *        \\  ||  /              \\      /\n             *       ar\\ || /br             b\\    /br\n             *          \\||/                  \\  /\n             *           pr                    pr\n             */\n            const a0 = a - a % 3;\n            ar = a0 + (a + 2) % 3;\n\n            if (b === -1) { // convex hull edge\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n                continue;\n            }\n\n            const b0 = b - b % 3;\n            const al = a0 + (a + 1) % 3;\n            const bl = b0 + (b + 2) % 3;\n\n            const p0 = triangles[ar];\n            const pr = triangles[a];\n            const pl = triangles[al];\n            const p1 = triangles[bl];\n\n            const illegal = inCircle(\n                coords[2 * p0], coords[2 * p0 + 1],\n                coords[2 * pr], coords[2 * pr + 1],\n                coords[2 * pl], coords[2 * pl + 1],\n                coords[2 * p1], coords[2 * p1 + 1]);\n\n            if (illegal) {\n                triangles[a] = p1;\n                triangles[b] = p0;\n\n                const hbl = halfedges[bl];\n\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\n                if (hbl === -1) {\n                    let e = this._hullStart;\n                    do {\n                        if (this._hullTri[e] === bl) {\n                            this._hullTri[e] = a;\n                            break;\n                        }\n                        e = this._hullPrev[e];\n                    } while (e !== this._hullStart);\n                }\n                this._link(a, hbl);\n                this._link(b, halfedges[ar]);\n                this._link(ar, bl);\n\n                const br = b0 + (b + 1) % 3;\n\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\n                if (i < EDGE_STACK.length) {\n                    EDGE_STACK[i++] = br;\n                }\n            } else {\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n            }\n        }\n\n        return ar;\n    }\n\n    _link(a, b) {\n        this._halfedges[a] = b;\n        if (b !== -1) this._halfedges[b] = a;\n    }\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    _addTriangle(i0, i1, i2, a, b, c) {\n        const t = this.trianglesLen;\n\n        this._triangles[t] = i0;\n        this._triangles[t + 1] = i1;\n        this._triangles[t + 2] = i2;\n\n        this._link(t, a);\n        this._link(t + 1, b);\n        this._link(t + 2, c);\n\n        this.trianglesLen += 3;\n\n        return t;\n    }\n}\n\n// monotonically increases with real angle, but doesn't need expensive trigonometry\nfunction pseudoAngle(dx, dy) {\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    const dx = ax - px;\n    const dy = ay - py;\n    const ex = bx - px;\n    const ey = by - py;\n    const fx = cx - px;\n    const fy = cy - py;\n\n    const ap = dx * dx + dy * dy;\n    const bp = ex * ex + ey * ey;\n    const cp = fx * fx + fy * fy;\n\n    return dx * (ey * cp - bp * fy) -\n           dy * (ex * cp - bp * fx) +\n           ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = (ey * bl - dy * cl) * d;\n    const y = (dx * cl - ex * bl) * d;\n\n    return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = ax + (ey * bl - dy * cl) * d;\n    const y = ay + (dx * cl - ex * bl) * d;\n\n    return {x, y};\n}\n\nfunction quicksort(ids, dists, left, right) {\n    if (right - left <= 20) {\n        for (let i = left + 1; i <= right; i++) {\n            const temp = ids[i];\n            const tempDist = dists[temp];\n            let j = i - 1;\n            while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n            ids[j + 1] = temp;\n        }\n    } else {\n        const median = (left + right) >> 1;\n        let i = left + 1;\n        let j = right;\n        swap(ids, median, i);\n        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n\n        const temp = ids[i];\n        const tempDist = dists[temp];\n        while (true) {\n            do i++; while (dists[ids[i]] < tempDist);\n            do j--; while (dists[ids[j]] > tempDist);\n            if (j < i) break;\n            swap(ids, i, j);\n        }\n        ids[left + 1] = ids[j];\n        ids[j] = temp;\n\n        if (right - i + 1 >= j - left) {\n            quicksort(ids, dists, i, right);\n            quicksort(ids, dists, left, j - 1);\n        } else {\n            quicksort(ids, dists, left, j - 1);\n            quicksort(ids, dists, i, right);\n        }\n    }\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultGetX(p) {\n    return p[0];\n}\nfunction defaultGetY(p) {\n    return p[1];\n}\n","/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexport var earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var factors = {\n    centimeters: earthRadius * 100,\n    centimetres: earthRadius * 100,\n    degrees: earthRadius / 111325,\n    feet: earthRadius * 3.28084,\n    inches: earthRadius * 39.37,\n    kilometers: earthRadius / 1000,\n    kilometres: earthRadius / 1000,\n    meters: earthRadius,\n    metres: earthRadius,\n    miles: earthRadius / 1609.344,\n    millimeters: earthRadius * 1000,\n    millimetres: earthRadius * 1000,\n    nauticalmiles: earthRadius / 1852,\n    radians: 1,\n    yards: earthRadius * 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.37,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / earthRadius,\n    yards: 1.0936133,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexport var areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    hectares: 0.0001,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nexport function feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nexport function geometry(type, coordinates, _options) {\n    if (_options === void 0) { _options = {}; }\n    switch (type) {\n        case \"Point\":\n            return point(coordinates).geometry;\n        case \"LineString\":\n            return lineString(coordinates).geometry;\n        case \"Polygon\":\n            return polygon(coordinates).geometry;\n        case \"MultiPoint\":\n            return multiPoint(coordinates).geometry;\n        case \"MultiLineString\":\n            return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\":\n            return multiPolygon(coordinates).geometry;\n        default:\n            throw new Error(type + \" is invalid\");\n    }\n}\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nexport function point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (!coordinates) {\n        throw new Error(\"coordinates is required\");\n    }\n    if (!Array.isArray(coordinates)) {\n        throw new Error(\"coordinates must be an Array\");\n    }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be at least 2 numbers long\");\n    }\n    if (!isNumber(coordinates[0]) || !isNumber(coordinates[1])) {\n        throw new Error(\"coordinates must contain numbers\");\n    }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nexport function points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nexport function polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nexport function polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nexport function lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nexport function lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nexport function featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nexport function multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nexport function multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nexport function multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nexport function geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nexport function round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nexport function radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nexport function lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nexport function lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nexport function bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nexport function radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return (degrees * 180) / Math.PI;\n}\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nexport function degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return (radians * Math.PI) / 180;\n}\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nexport function convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches, hectares\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted area\n */\nexport function convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nexport function isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num);\n}\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nexport function isObject(input) {\n    return !!input && input.constructor === Object;\n}\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nexport function validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nexport function validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\n","import { isNumber, } from \"@turf/helpers\";\n/**\n * Unwrap a coordinate from a Point Feature, Geometry or a single coordinate.\n *\n * @name getCoord\n * @param {Array<number>|Geometry<Point>|Feature<Point>} coord GeoJSON Point or an Array of numbers\n * @returns {Array<number>} coordinates\n * @example\n * var pt = turf.point([10, 10]);\n *\n * var coord = turf.getCoord(pt);\n * //= [10, 10]\n */\nexport function getCoord(coord) {\n    if (!coord) {\n        throw new Error(\"coord is required\");\n    }\n    if (!Array.isArray(coord)) {\n        if (coord.type === \"Feature\" &&\n            coord.geometry !== null &&\n            coord.geometry.type === \"Point\") {\n            return coord.geometry.coordinates;\n        }\n        if (coord.type === \"Point\") {\n            return coord.coordinates;\n        }\n    }\n    if (Array.isArray(coord) &&\n        coord.length >= 2 &&\n        !Array.isArray(coord[0]) &&\n        !Array.isArray(coord[1])) {\n        return coord;\n    }\n    throw new Error(\"coord must be GeoJSON Point or an Array of numbers\");\n}\n/**\n * Unwrap coordinates from a Feature, Geometry Object or an Array\n *\n * @name getCoords\n * @param {Array<any>|Geometry|Feature} coords Feature, Geometry Object or an Array\n * @returns {Array<any>} coordinates\n * @example\n * var poly = turf.polygon([[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]);\n *\n * var coords = turf.getCoords(poly);\n * //= [[[119.32, -8.7], [119.55, -8.69], [119.51, -8.54], [119.32, -8.7]]]\n */\nexport function getCoords(coords) {\n    if (Array.isArray(coords)) {\n        return coords;\n    }\n    // Feature\n    if (coords.type === \"Feature\") {\n        if (coords.geometry !== null) {\n            return coords.geometry.coordinates;\n        }\n    }\n    else {\n        // Geometry\n        if (coords.coordinates) {\n            return coords.coordinates;\n        }\n    }\n    throw new Error(\"coords must be GeoJSON Feature, Geometry Object or an Array\");\n}\n/**\n * Checks if coordinates contains a number\n *\n * @name containsNumber\n * @param {Array<any>} coordinates GeoJSON Coordinates\n * @returns {boolean} true if Array contains a number\n */\nexport function containsNumber(coordinates) {\n    if (coordinates.length > 1 &&\n        isNumber(coordinates[0]) &&\n        isNumber(coordinates[1])) {\n        return true;\n    }\n    if (Array.isArray(coordinates[0]) && coordinates[0].length) {\n        return containsNumber(coordinates[0]);\n    }\n    throw new Error(\"coordinates must only contain numbers\");\n}\n/**\n * Enforce expectations about types of GeoJSON objects for Turf.\n *\n * @name geojsonType\n * @param {GeoJSON} value any GeoJSON object\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function geojsonType(value, type, name) {\n    if (!type || !name) {\n        throw new Error(\"type and name required\");\n    }\n    if (!value || value.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            value.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link Feature} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name featureOf\n * @param {Feature} feature a feature with an expected geometry type\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} error if value is not the expected type.\n */\nexport function featureOf(feature, type, name) {\n    if (!feature) {\n        throw new Error(\"No feature passed\");\n    }\n    if (!name) {\n        throw new Error(\".featureOf() requires a name\");\n    }\n    if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n        throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n    }\n    if (!feature.geometry || feature.geometry.type !== type) {\n        throw new Error(\"Invalid input to \" +\n            name +\n            \": must be a \" +\n            type +\n            \", given \" +\n            feature.geometry.type);\n    }\n}\n/**\n * Enforce expectations about types of {@link FeatureCollection} inputs for Turf.\n * Internally this uses {@link geojsonType} to judge geometry types.\n *\n * @name collectionOf\n * @param {FeatureCollection} featureCollection a FeatureCollection for which features will be judged\n * @param {string} type expected GeoJSON type\n * @param {string} name name of calling function\n * @throws {Error} if value is not the expected type.\n */\nexport function collectionOf(featureCollection, type, name) {\n    if (!featureCollection) {\n        throw new Error(\"No featureCollection passed\");\n    }\n    if (!name) {\n        throw new Error(\".collectionOf() requires a name\");\n    }\n    if (!featureCollection || featureCollection.type !== \"FeatureCollection\") {\n        throw new Error(\"Invalid input to \" + name + \", FeatureCollection required\");\n    }\n    for (var _i = 0, _a = featureCollection.features; _i < _a.length; _i++) {\n        var feature = _a[_i];\n        if (!feature || feature.type !== \"Feature\" || !feature.geometry) {\n            throw new Error(\"Invalid input to \" + name + \", Feature with geometry required\");\n        }\n        if (!feature.geometry || feature.geometry.type !== type) {\n            throw new Error(\"Invalid input to \" +\n                name +\n                \": must be a \" +\n                type +\n                \", given \" +\n                feature.geometry.type);\n        }\n    }\n}\n/**\n * Get Geometry from Feature or Geometry Object\n *\n * @param {Feature|Geometry} geojson GeoJSON Feature or Geometry Object\n * @returns {Geometry|null} GeoJSON Geometry Object\n * @throws {Error} if geojson is not a Feature or Geometry Object\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getGeom(point)\n * //={\"type\": \"Point\", \"coordinates\": [110, 40]}\n */\nexport function getGeom(geojson) {\n    if (geojson.type === \"Feature\") {\n        return geojson.geometry;\n    }\n    return geojson;\n}\n/**\n * Get GeoJSON object's type, Geometry type is prioritize.\n *\n * @param {GeoJSON} geojson GeoJSON object\n * @param {string} [name=\"geojson\"] name of the variable to display in error message (unused)\n * @returns {string} GeoJSON type\n * @example\n * var point = {\n *   \"type\": \"Feature\",\n *   \"properties\": {},\n *   \"geometry\": {\n *     \"type\": \"Point\",\n *     \"coordinates\": [110, 40]\n *   }\n * }\n * var geom = turf.getType(point)\n * //=\"Point\"\n */\nexport function getType(geojson, _name) {\n    if (geojson.type === \"FeatureCollection\") {\n        return \"FeatureCollection\";\n    }\n    if (geojson.type === \"GeometryCollection\") {\n        return \"GeometryCollection\";\n    }\n    if (geojson.type === \"Feature\" && geojson.geometry !== null) {\n        return geojson.geometry.type;\n    }\n    return geojson.type;\n}\n","import { getCoord, getGeom } from \"@turf/invariant\";\n// http://en.wikipedia.org/wiki/Even%E2%80%93odd_rule\n// modified from: https://github.com/substack/point-in-polygon/blob/master/index.js\n// which was modified from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n/**\n * Takes a {@link Point} and a {@link Polygon} or {@link MultiPolygon} and determines if the point\n * resides inside the polygon. The polygon can be convex or concave. The function accounts for holes.\n *\n * @name booleanPointInPolygon\n * @param {Coord} point input point\n * @param {Feature<Polygon|MultiPolygon>} polygon input polygon or multipolygon\n * @param {Object} [options={}] Optional parameters\n * @param {boolean} [options.ignoreBoundary=false] True if polygon boundary should be ignored when determining if\n * the point is inside the polygon otherwise false.\n * @returns {boolean} `true` if the Point is inside the Polygon; `false` if the Point is not inside the Polygon\n * @example\n * var pt = turf.point([-77, 44]);\n * var poly = turf.polygon([[\n *   [-81, 41],\n *   [-81, 47],\n *   [-72, 47],\n *   [-72, 41],\n *   [-81, 41]\n * ]]);\n *\n * turf.booleanPointInPolygon(pt, poly);\n * //= true\n */\nexport default function booleanPointInPolygon(point, polygon, options) {\n    if (options === void 0) { options = {}; }\n    // validation\n    if (!point) {\n        throw new Error(\"point is required\");\n    }\n    if (!polygon) {\n        throw new Error(\"polygon is required\");\n    }\n    var pt = getCoord(point);\n    var geom = getGeom(polygon);\n    var type = geom.type;\n    var bbox = polygon.bbox;\n    var polys = geom.coordinates;\n    // Quick elimination if point is not inside bbox\n    if (bbox && inBBox(pt, bbox) === false) {\n        return false;\n    }\n    // normalize to multipolygon\n    if (type === \"Polygon\") {\n        polys = [polys];\n    }\n    var insidePoly = false;\n    for (var i = 0; i < polys.length && !insidePoly; i++) {\n        // check if it is in the outer ring first\n        if (inRing(pt, polys[i][0], options.ignoreBoundary)) {\n            var inHole = false;\n            var k = 1;\n            // check for the point in any of the holes\n            while (k < polys[i].length && !inHole) {\n                if (inRing(pt, polys[i][k], !options.ignoreBoundary)) {\n                    inHole = true;\n                }\n                k++;\n            }\n            if (!inHole) {\n                insidePoly = true;\n            }\n        }\n    }\n    return insidePoly;\n}\n/**\n * inRing\n *\n * @private\n * @param {Array<number>} pt [x,y]\n * @param {Array<Array<number>>} ring [[x,y], [x,y],..]\n * @param {boolean} ignoreBoundary ignoreBoundary\n * @returns {boolean} inRing\n */\nfunction inRing(pt, ring, ignoreBoundary) {\n    var isInside = false;\n    if (ring[0][0] === ring[ring.length - 1][0] &&\n        ring[0][1] === ring[ring.length - 1][1]) {\n        ring = ring.slice(0, ring.length - 1);\n    }\n    for (var i = 0, j = ring.length - 1; i < ring.length; j = i++) {\n        var xi = ring[i][0];\n        var yi = ring[i][1];\n        var xj = ring[j][0];\n        var yj = ring[j][1];\n        var onBoundary = pt[1] * (xi - xj) + yi * (xj - pt[0]) + yj * (pt[0] - xi) === 0 &&\n            (xi - pt[0]) * (xj - pt[0]) <= 0 &&\n            (yi - pt[1]) * (yj - pt[1]) <= 0;\n        if (onBoundary) {\n            return !ignoreBoundary;\n        }\n        var intersect = yi > pt[1] !== yj > pt[1] &&\n            pt[0] < ((xj - xi) * (pt[1] - yi)) / (yj - yi) + xi;\n        if (intersect) {\n            isInside = !isInside;\n        }\n    }\n    return isInside;\n}\n/**\n * inBBox\n *\n * @private\n * @param {Position} pt point [x,y]\n * @param {BBox} bbox BBox [west, south, east, north]\n * @returns {boolean} true/false if point is inside BBox\n */\nfunction inBBox(pt, bbox) {\n    return (bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1]);\n}\n","import {Adder} from \"d3-array\";\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\n\nexport var areaRingSum = new Adder();\n\n// hello?\n\nvar areaSum = new Adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum = new Adder();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function(object) {\n  areaSum = new Adder();\n  stream(object, areaStream);\n  return areaSum * 2;\n}\n","import {asin, atan2, cos, sin, sqrt} from \"./math.js\";\n\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nexport function cartesian(spherical) {\n  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function cartesianCross(a, b) {\n  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];\n}\n\n// TODO return a\nexport function cartesianAddInPlace(a, b) {\n  a[0] += b[0], a[1] += b[1], a[2] += b[2];\n}\n\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  d[0] /= l, d[1] /= l, d[2] /= l;\n}\n","import {Adder} from \"d3-array\";\nimport {areaStream, areaRingSum} from \"./area.js\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace, spherical} from \"./cartesian.js\";\nimport {abs, degrees, epsilon, radians} from \"./math.js\";\nimport stream from \"./stream.js\";\n\nvar lambda0, phi0, lambda1, phi1, // bounds\n    lambda2, // previous lambda-coordinate\n    lambda00, phi00, // first point\n    p0, // previous 3D point\n    deltaSum,\n    ranges,\n    range;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum = new Adder();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    else if (deltaSum > epsilon) phi1 = 90;\n    else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  },\n  sphere: function() {\n    lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n}\n\n// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function(feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream);\n\n  // First, sort ranges by their minimum longitudes.\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare);\n\n    // Then, merge any ranges that overlap.\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    }\n\n    // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n\n  return lambda0 === Infinity || phi0 === Infinity\n      ? [[NaN, NaN], [NaN, NaN]]\n      : [[lambda0, phi0], [lambda1, phi1]];\n}\n","import {Adder} from \"d3-array\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian.js\";\nimport {abs, asin, atan2, cos, epsilon, epsilon2, halfPi, pi, quarterPi, sign, sin, tau} from \"./math.js\";\n\nfunction longitude(point) {\n  return abs(point[0]) <= pi ? point[0] : sign(point[0]) * ((abs(point[0]) + pi) % tau - pi);\n}\n\nexport default function(polygon, point) {\n  var lambda = longitude(point),\n      phi = point[1],\n      sinPhi = sin(phi),\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  var sum = new Adder();\n\n  if (sinPhi === 1) phi = halfPi + epsilon;\n  else if (sinPhi === -1) phi = -halfPi - epsilon;\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = longitude(point0),\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = longitude(point1),\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon2) ^ (winding & 1);\n}\n","import {default as polygonContains} from \"./polygonContains.js\";\nimport {default as distance} from \"./distance.js\";\nimport {epsilon2, radians} from \"./math.js\";\n\nvar containsObjectType = {\n  Feature: function(object, point) {\n    return containsGeometry(object.geometry, point);\n  },\n  FeatureCollection: function(object, point) {\n    var features = object.features, i = -1, n = features.length;\n    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;\n    return false;\n  }\n};\n\nvar containsGeometryType = {\n  Sphere: function() {\n    return true;\n  },\n  Point: function(object, point) {\n    return containsPoint(object.coordinates, point);\n  },\n  MultiPoint: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPoint(coordinates[i], point)) return true;\n    return false;\n  },\n  LineString: function(object, point) {\n    return containsLine(object.coordinates, point);\n  },\n  MultiLineString: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsLine(coordinates[i], point)) return true;\n    return false;\n  },\n  Polygon: function(object, point) {\n    return containsPolygon(object.coordinates, point);\n  },\n  MultiPolygon: function(object, point) {\n    var coordinates = object.coordinates, i = -1, n = coordinates.length;\n    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;\n    return false;\n  },\n  GeometryCollection: function(object, point) {\n    var geometries = object.geometries, i = -1, n = geometries.length;\n    while (++i < n) if (containsGeometry(geometries[i], point)) return true;\n    return false;\n  }\n};\n\nfunction containsGeometry(geometry, point) {\n  return geometry && containsGeometryType.hasOwnProperty(geometry.type)\n      ? containsGeometryType[geometry.type](geometry, point)\n      : false;\n}\n\nfunction containsPoint(coordinates, point) {\n  return distance(coordinates, point) === 0;\n}\n\nfunction containsLine(coordinates, point) {\n  var ao, bo, ab;\n  for (var i = 0, n = coordinates.length; i < n; i++) {\n    bo = distance(coordinates[i], point);\n    if (bo === 0) return true;\n    if (i > 0) {\n      ab = distance(coordinates[i], coordinates[i - 1]);\n      if (\n        ab > 0 &&\n        ao <= ab &&\n        bo <= ab &&\n        (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < epsilon2 * ab\n      )\n        return true;\n    }\n    ao = bo;\n  }\n  return false;\n}\n\nfunction containsPolygon(coordinates, point) {\n  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));\n}\n\nfunction ringRadians(ring) {\n  return ring = ring.map(pointRadians), ring.pop(), ring;\n}\n\nfunction pointRadians(point) {\n  return [point[0] * radians, point[1] * radians];\n}\n\nexport default function(object, point) {\n  return (object && containsObjectType.hasOwnProperty(object.type)\n      ? containsObjectType[object.type]\n      : containsGeometry)(object, point);\n}\n","import {Adder} from \"d3-array\";\nimport {asin, atan2, cos, degrees, epsilon, epsilon2, hypot, radians, sin, sqrt} from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\n\nvar W0, W1,\n    X0, Y0, Z0,\n    X1, Y1, Z1,\n    X2, Y2, Z2,\n    lambda00, phi00, // first point\n    x0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n};\n\n// Arithmetic mean of Cartesian vectors.\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00, phi00);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = hypot(cx, cy, cz),\n      w = asin(m), // line weight = angle\n      v = m && -w / m; // area weight multiplier\n  X2.add(v * cx);\n  Y2.add(v * cy);\n  Z2.add(v * cz);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nexport default function(object) {\n  W0 = W1 =\n  X0 = Y0 = Z0 =\n  X1 = Y1 = Z1 = 0;\n  X2 = new Adder();\n  Y2 = new Adder();\n  Z2 = new Adder();\n  stream(object, centroidStream);\n\n  var x = +X2,\n      y = +Y2,\n      z = +Z2,\n      m = hypot(x, y, z);\n\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1;\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = hypot(x, y, z);\n    // If the feature still has an undefined ccentroid, then return.\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / m) * degrees];\n}\n","const epsilon = 1e-6;\n\nexport default class Path {\n  constructor() {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = \"\";\n  }\n  moveTo(x, y) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\n  }\n  closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  }\n  lineTo(x, y) {\n    this._ += `L${this._x1 = +x},${this._y1 = +y}`;\n  }\n  arc(x, y, r) {\n    x = +x, y = +y, r = +r;\n    const x0 = x + r;\n    const y0 = y;\n    if (r < 0) throw new Error(\"negative radius\");\n    if (this._x1 === null) this._ += `M${x0},${y0}`;\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += \"L\" + x0 + \",\" + y0;\n    if (!r) return;\n    this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;\n  }\n  rect(x, y, w, h) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;\n  }\n  value() {\n    return this._ || null;\n  }\n}\n","export default class Polygon {\n  constructor() {\n    this._ = [];\n  }\n  moveTo(x, y) {\n    this._.push([x, y]);\n  }\n  closePath() {\n    this._.push(this._[0].slice());\n  }\n  lineTo(x, y) {\n    this._.push([x, y]);\n  }\n  value() {\n    return this._.length ? this._ : null;\n  }\n}\n","import Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\n\nexport default class Voronoi {\n  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {\n    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\n    this.delaunay = delaunay;\n    this._circumcenters = new Float64Array(delaunay.points.length * 2);\n    this.vectors = new Float64Array(delaunay.points.length * 2);\n    this.xmax = xmax, this.xmin = xmin;\n    this.ymax = ymax, this.ymin = ymin;\n    this._init();\n  }\n  update() {\n    this.delaunay.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const {delaunay: {points, hull, triangles}, vectors} = this;\n    let bx, by; // lazily computed barycenter of the hull\n\n    // Compute circumcenters.\n    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);\n    for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {\n      const t1 = triangles[i] * 2;\n      const t2 = triangles[i + 1] * 2;\n      const t3 = triangles[i + 2] * 2;\n      const x1 = points[t1];\n      const y1 = points[t1 + 1];\n      const x2 = points[t2];\n      const y2 = points[t2 + 1];\n      const x3 = points[t3];\n      const y3 = points[t3 + 1];\n\n      const dx = x2 - x1;\n      const dy = y2 - y1;\n      const ex = x3 - x1;\n      const ey = y3 - y1;\n      const ab = (dx * ey - dy * ex) * 2;\n\n      if (Math.abs(ab) < 1e-9) {\n        // For a degenerate triangle, the circumcenter is at the infinity, in a\n        // direction orthogonal to the halfedge and away from the “center” of\n        // the diagram <bx, by>, defined as the hull’s barycenter.\n        if (bx === undefined) {\n          bx = by = 0;\n          for (const i of hull) bx += points[i * 2], by += points[i * 2 + 1];\n          bx /= hull.length, by /= hull.length;\n        }\n        const a = 1e9 * Math.sign((bx - x1) * ey - (by - y1) * ex);\n        x = (x1 + x3) / 2 - a * ey;\n        y = (y1 + y3) / 2 + a * ex;\n      } else {\n        const d = 1 / ab;\n        const bl = dx * dx + dy * dy;\n        const cl = ex * ex + ey * ey;\n        x = x1 + (ey * bl - dy * cl) * d;\n        y = y1 + (dx * cl - ex * bl) * d;\n      }\n      circumcenters[j] = x;\n      circumcenters[j + 1] = y;\n    }\n\n    // Compute exterior cell rays.\n    let h = hull[hull.length - 1];\n    let p0, p1 = h * 4;\n    let x0, x1 = points[2 * h];\n    let y0, y1 = points[2 * h + 1];\n    vectors.fill(0);\n    for (let i = 0; i < hull.length; ++i) {\n      h = hull[i];\n      p0 = p1, x0 = x1, y0 = y1;\n      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];\n      vectors[p0 + 2] = vectors[p1] = y0 - y1;\n      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\n    }\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {delaunay: {halfedges, inedges, hull}, circumcenters, vectors} = this;\n    if (hull.length <= 1) return null;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = Math.floor(i / 3) * 2;\n      const tj = Math.floor(j / 3) * 2;\n      const xi = circumcenters[ti];\n      const yi = circumcenters[ti + 1];\n      const xj = circumcenters[tj];\n      const yj = circumcenters[tj + 1];\n      this._renderSegment(xi, yi, xj, yj, context);\n    }\n    let h0, h1 = hull[hull.length - 1];\n    for (let i = 0; i < hull.length; ++i) {\n      h0 = h1, h1 = hull[i];\n      const t = Math.floor(inedges[h1] / 3) * 2;\n      const x = circumcenters[t];\n      const y = circumcenters[t + 1];\n      const v = h0 * 4;\n      const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\n      if (p) this._renderSegment(x, y, p[0], p[1], context);\n    }\n    return buffer && buffer.value();\n  }\n  renderBounds(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\n    return buffer && buffer.value();\n  }\n  renderCell(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const points = this._clip(i);\n    if (points === null || !points.length) return;\n    context.moveTo(points[0], points[1]);\n    let n = points.length;\n    while (points[0] === points[n-2] && points[1] === points[n-1] && n > 1) n -= 2;\n    for (let i = 2; i < n; i += 2) {\n      if (points[i] !== points[i-2] || points[i+1] !== points[i-1])\n        context.lineTo(points[i], points[i + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *cellPolygons() {\n    const {delaunay: {points}} = this;\n    for (let i = 0, n = points.length / 2; i < n; ++i) {\n      const cell = this.cellPolygon(i);\n      if (cell) cell.index = i, yield cell;\n    }\n  }\n  cellPolygon(i) {\n    const polygon = new Polygon;\n    this.renderCell(i, polygon);\n    return polygon.value();\n  }\n  _renderSegment(x0, y0, x1, y1, context) {\n    let S;\n    const c0 = this._regioncode(x0, y0);\n    const c1 = this._regioncode(x1, y1);\n    if (c0 === 0 && c1 === 0) {\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n    } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\n      context.moveTo(S[0], S[1]);\n      context.lineTo(S[2], S[3]);\n    }\n  }\n  contains(i, x, y) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\n    return this.delaunay._step(i, x, y) === i;\n  }\n  *neighbors(i) {\n    const ci = this._clip(i);\n    if (ci) for (const j of this.delaunay.neighbors(i)) {\n      const cj = this._clip(j);\n      // find the common edge\n      if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {\n        for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {\n          if (ci[ai] === cj[aj]\n              && ci[ai + 1] === cj[aj + 1]\n              && ci[(ai + 2) % li] === cj[(aj + lj - 2) % lj]\n              && ci[(ai + 3) % li] === cj[(aj + lj - 1) % lj]) {\n            yield j;\n            break loop;\n          }\n        }\n      }\n    }\n  }\n  _cell(i) {\n    const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;\n    const e0 = inedges[i];\n    if (e0 === -1) return null; // coincident point\n    const points = [];\n    let e = e0;\n    do {\n      const t = Math.floor(e / 3);\n      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n    } while (e !== e0 && e !== -1);\n    return points;\n  }\n  _clip(i) {\n    // degenerate case (1 valid point: return the box)\n    if (i === 0 && this.delaunay.hull.length === 1) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    const points = this._cell(i);\n    if (points === null) return null;\n    const {vectors: V} = this;\n    const v = i * 4;\n    return this._simplify(V[v] || V[v + 1]\n        ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])\n        : this._clipFinite(i, points));\n  }\n  _clipFinite(i, points) {\n    const n = points.length;\n    let P = null;\n    let x0, y0, x1 = points[n - 2], y1 = points[n - 1];\n    let c0, c1 = this._regioncode(x1, y1);\n    let e0, e1 = 0;\n    for (let j = 0; j < n; j += 2) {\n      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\n      c0 = c1, c1 = this._regioncode(x1, y1);\n      if (c0 === 0 && c1 === 0) {\n        e0 = e1, e1 = 0;\n        if (P) P.push(x1, y1);\n        else P = [x1, y1];\n      } else {\n        let S, sx0, sy0, sx1, sy1;\n        if (c0 === 0) {\n          if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\n          [sx0, sy0, sx1, sy1] = S;\n        } else {\n          if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\n          [sx1, sy1, sx0, sy0] = S;\n          e0 = e1, e1 = this._edgecode(sx0, sy0);\n          if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n          if (P) P.push(sx0, sy0);\n          else P = [sx0, sy0];\n        }\n        e0 = e1, e1 = this._edgecode(sx1, sy1);\n        if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n        if (P) P.push(sx1, sy1);\n        else P = [sx1, sy1];\n      }\n    }\n    if (P) {\n      e0 = e1, e1 = this._edgecode(P[0], P[1]);\n      if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    return P;\n  }\n  _clipSegment(x0, y0, x1, y1, c0, c1) {\n    // for more robustness, always consider the segment in the same order\n    const flip = c0 < c1;\n    if (flip) [x0, y0, x1, y1, c0, c1] = [x1, y1, x0, y0, c1, c0];\n    while (true) {\n      if (c0 === 0 && c1 === 0) return flip ? [x1, y1, x0, y0] : [x0, y0, x1, y1];\n      if (c0 & c1) return null;\n      let x, y, c = c0 || c1;\n      if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;\n      else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;\n      else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;\n      else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\n      if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);\n      else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\n    }\n  }\n  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\n    let P = Array.from(points), p;\n    if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\n    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\n    if (P = this._clipFinite(i, P)) {\n      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {\n        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\n        if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\n      }\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];\n    }\n    return P;\n  }\n  _edge(i, e0, e1, P, j) {\n    while (e0 !== e1) {\n      let x, y;\n      switch (e0) {\n        case 0b0101: e0 = 0b0100; continue; // top-left\n        case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top\n        case 0b0110: e0 = 0b0010; continue; // top-right\n        case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right\n        case 0b1010: e0 = 0b1000; continue; // bottom-right\n        case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom\n        case 0b1001: e0 = 0b0001; continue; // bottom-left\n        case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left\n      }\n      // Note: this implicitly checks for out of bounds: if P[j] or P[j+1] are\n      // undefined, the conditional statement will be executed.\n      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {\n        P.splice(j, 0, x, y), j += 2;\n      }\n    }\n    return j;\n  }\n  _project(x0, y0, vx, vy) {\n    let t = Infinity, c, x, y;\n    if (vy < 0) { // top\n      if (y0 <= this.ymin) return null;\n      if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\n    } else if (vy > 0) { // bottom\n      if (y0 >= this.ymax) return null;\n      if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\n    }\n    if (vx > 0) { // right\n      if (x0 >= this.xmax) return null;\n      if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\n    } else if (vx < 0) { // left\n      if (x0 <= this.xmin) return null;\n      if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\n    }\n    return [x, y];\n  }\n  _edgecode(x, y) {\n    return (x === this.xmin ? 0b0001\n        : x === this.xmax ? 0b0010 : 0b0000)\n        | (y === this.ymin ? 0b0100\n        : y === this.ymax ? 0b1000 : 0b0000);\n  }\n  _regioncode(x, y) {\n    return (x < this.xmin ? 0b0001\n        : x > this.xmax ? 0b0010 : 0b0000)\n        | (y < this.ymin ? 0b0100\n        : y > this.ymax ? 0b1000 : 0b0000);\n  }\n  _simplify(P) {\n    if (P && P.length > 4) {\n      for (let i = 0; i < P.length; i+= 2) {\n        const j = (i + 2) % P.length, k = (i + 4) % P.length;\n        if (P[i] === P[j] && P[j] === P[k] || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1]) {\n          P.splice(j, 2), i -= 2;\n        }\n      }\n      if (!P.length) P = null;\n    }\n    return P;\n  }\n}\n","import Delaunator from \"delaunator\";\nimport Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\nimport Voronoi from \"./voronoi.js\";\n\nconst tau = 2 * Math.PI, pow = Math.pow;\n\nfunction pointX(p) {\n  return p[0];\n}\n\nfunction pointY(p) {\n  return p[1];\n}\n\n// A triangulation is collinear if all its triangles have a non-null area\nfunction collinear(d) {\n  const {triangles, coords} = d;\n  for (let i = 0; i < triangles.length; i += 3) {\n    const a = 2 * triangles[i],\n          b = 2 * triangles[i + 1],\n          c = 2 * triangles[i + 2],\n          cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1])\n                - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);\n    if (cross > 1e-10) return false;\n  }\n  return true;\n}\n\nfunction jitter(x, y, r) {\n  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];\n}\n\nexport default class Delaunay {\n  static from(points, fx = pointX, fy = pointY, that) {\n    return new Delaunay(\"length\" in points\n        ? flatArray(points, fx, fy, that)\n        : Float64Array.from(flatIterable(points, fx, fy, that)));\n  }\n  constructor(points) {\n    this._delaunator = new Delaunator(points);\n    this.inedges = new Int32Array(points.length / 2);\n    this._hullIndex = new Int32Array(points.length / 2);\n    this.points = this._delaunator.coords;\n    this._init();\n  }\n  update() {\n    this._delaunator.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const d = this._delaunator, points = this.points;\n\n    // check for collinear\n    if (d.hull && d.hull.length > 2 && collinear(d)) {\n      this.collinear = Int32Array.from({length: points.length/2}, (_,i) => i)\n        .sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors\n      const e = this.collinear[0], f = this.collinear[this.collinear.length - 1],\n        bounds = [ points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1] ],\n        r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);\n      for (let i = 0, n = points.length / 2; i < n; ++i) {\n        const p = jitter(points[2 * i], points[2 * i + 1], r);\n        points[2 * i] = p[0];\n        points[2 * i + 1] = p[1];\n      }\n      this._delaunator = new Delaunator(points);\n    } else {\n      delete this.collinear;\n    }\n\n    const halfedges = this.halfedges = this._delaunator.halfedges;\n    const hull = this.hull = this._delaunator.hull;\n    const triangles = this.triangles = this._delaunator.triangles;\n    const inedges = this.inedges.fill(-1);\n    const hullIndex = this._hullIndex.fill(-1);\n\n    // Compute an index from each point to an (arbitrary) incoming halfedge\n    // Used to give the first neighbor of each point; for this reason,\n    // on the hull we give priority to exterior halfedges\n    for (let e = 0, n = halfedges.length; e < n; ++e) {\n      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];\n      if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;\n    }\n    for (let i = 0, n = hull.length; i < n; ++i) {\n      hullIndex[hull[i]] = i;\n    }\n\n    // degenerate case: 1 or 2 (distinct) points\n    if (hull.length <= 2 && hull.length > 0) {\n      this.triangles = new Int32Array(3).fill(-1);\n      this.halfedges = new Int32Array(3).fill(-1);\n      this.triangles[0] = hull[0];\n      inedges[hull[0]] = 1;\n      if (hull.length === 2) {\n        inedges[hull[1]] = 0;\n        this.triangles[1] = hull[1];\n        this.triangles[2] = hull[1];\n      }\n    }\n  }\n  voronoi(bounds) {\n    return new Voronoi(this, bounds);\n  }\n  *neighbors(i) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, collinear} = this;\n\n    // degenerate case with several collinear points\n    if (collinear) {\n      const l = collinear.indexOf(i);\n      if (l > 0) yield collinear[l - 1];\n      if (l < collinear.length - 1) yield collinear[l + 1];\n      return;\n    }\n\n    const e0 = inedges[i];\n    if (e0 === -1) return; // coincident point\n    let e = e0, p0 = -1;\n    do {\n      yield p0 = triangles[e];\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) return; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        const p = hull[(_hullIndex[i] + 1) % hull.length];\n        if (p !== p0) yield p;\n        return;\n      }\n    } while (e !== e0);\n  }\n  find(x, y, i = 0) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n    const i0 = i;\n    let c;\n    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;\n    return c;\n  }\n  _step(i, x, y) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, points} = this;\n    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n    let c = i;\n    let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);\n    const e0 = inedges[i];\n    let e = e0;\n    do {\n      let t = triangles[e];\n      const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);\n      if (dt < dc) dc = dt, c = t;\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        e = hull[(_hullIndex[i] + 1) % hull.length];\n        if (e !== t) {\n          if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e;\n        }\n        break;\n      }\n    } while (e !== e0);\n    return c;\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, halfedges, triangles} = this;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = triangles[i] * 2;\n      const tj = triangles[j] * 2;\n      context.moveTo(points[ti], points[ti + 1]);\n      context.lineTo(points[tj], points[tj + 1]);\n    }\n    this.renderHull(context);\n    return buffer && buffer.value();\n  }\n  renderPoints(context, r) {\n    if (r === undefined && (!context || typeof context.moveTo !== \"function\")) r = context, context = null;\n    r = r == undefined ? 2 : +r;\n    const buffer = context == null ? context = new Path : undefined;\n    const {points} = this;\n    for (let i = 0, n = points.length; i < n; i += 2) {\n      const x = points[i], y = points[i + 1];\n      context.moveTo(x + r, y);\n      context.arc(x, y, r, 0, tau);\n    }\n    return buffer && buffer.value();\n  }\n  renderHull(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {hull, points} = this;\n    const h = hull[0] * 2, n = hull.length;\n    context.moveTo(points[h], points[h + 1]);\n    for (let i = 1; i < n; ++i) {\n      const h = 2 * hull[i];\n      context.lineTo(points[h], points[h + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  hullPolygon() {\n    const polygon = new Polygon;\n    this.renderHull(polygon);\n    return polygon.value();\n  }\n  renderTriangle(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, triangles} = this;\n    const t0 = triangles[i *= 3] * 2;\n    const t1 = triangles[i + 1] * 2;\n    const t2 = triangles[i + 2] * 2;\n    context.moveTo(points[t0], points[t0 + 1]);\n    context.lineTo(points[t1], points[t1 + 1]);\n    context.lineTo(points[t2], points[t2 + 1]);\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *trianglePolygons() {\n    const {triangles} = this;\n    for (let i = 0, n = triangles.length / 3; i < n; ++i) {\n      yield this.trianglePolygon(i);\n    }\n  }\n  trianglePolygon(i) {\n    const polygon = new Polygon;\n    this.renderTriangle(i, polygon);\n    return polygon.value();\n  }\n}\n\nfunction flatArray(points, fx, fy, that) {\n  const n = points.length;\n  const array = new Float64Array(n * 2);\n  for (let i = 0; i < n; ++i) {\n    const p = points[i];\n    array[i * 2] = fx.call(that, p, i, points);\n    array[i * 2 + 1] = fy.call(that, p, i, points);\n  }\n  return array;\n}\n\nfunction* flatIterable(points, fx, fy, that) {\n  let i = 0;\n  for (const p of points) {\n    yield fx.call(that, p, i, points);\n    yield fy.call(that, p, i, points);\n    ++i;\n  }\n}\n","export default function(a, b) {\n\n  function compose(x, y) {\n    return x = a(x, y), b(x[0], x[1]);\n  }\n\n  if (a.invert && b.invert) compose.invert = function(x, y) {\n    return x = b.invert(x, y), x && a.invert(x[0], x[1]);\n  };\n\n  return compose;\n}\n","import compose from \"./compose.js\";\nimport {abs, asin, atan2, cos, degrees, pi, radians, sin, tau} from \"./math.js\";\n\nfunction rotationIdentity(lambda, phi) {\n  if (abs(lambda) > pi) lambda -= Math.round(lambda / tau) * tau;\n  return [lambda, phi];\n}\n\nrotationIdentity.invert = rotationIdentity;\n\nexport function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {\n  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))\n    : rotationLambda(deltaLambda))\n    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)\n    : rotationIdentity);\n}\n\nfunction forwardRotationLambda(deltaLambda) {\n  return function(lambda, phi) {\n    lambda += deltaLambda;\n    if (abs(lambda) > pi) lambda -= Math.round(lambda / tau) * tau;\n    return [lambda, phi];\n  };\n}\n\nfunction rotationLambda(deltaLambda) {\n  var rotation = forwardRotationLambda(deltaLambda);\n  rotation.invert = forwardRotationLambda(-deltaLambda);\n  return rotation;\n}\n\nfunction rotationPhiGamma(deltaPhi, deltaGamma) {\n  var cosDeltaPhi = cos(deltaPhi),\n      sinDeltaPhi = sin(deltaPhi),\n      cosDeltaGamma = cos(deltaGamma),\n      sinDeltaGamma = sin(deltaGamma);\n\n  function rotation(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaPhi + x * sinDeltaPhi;\n    return [\n      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),\n      asin(k * cosDeltaGamma + y * sinDeltaGamma)\n    ];\n  }\n\n  rotation.invert = function(lambda, phi) {\n    var cosPhi = cos(phi),\n        x = cos(lambda) * cosPhi,\n        y = sin(lambda) * cosPhi,\n        z = sin(phi),\n        k = z * cosDeltaGamma - y * sinDeltaGamma;\n    return [\n      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),\n      asin(k * cosDeltaPhi - x * sinDeltaPhi)\n    ];\n  };\n\n  return rotation;\n}\n\nexport default function(rotate) {\n  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);\n\n  function forward(coordinates) {\n    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  }\n\n  forward.invert = function(coordinates) {\n    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);\n    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;\n  };\n\n  return forward;\n}\n","import {asin, atan2, cos, sin, sqrt} from \"../math.js\";\n\nexport function azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n        if (k === Infinity) return [2, 0];\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nexport function azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n","import noop from \"../noop.js\";\n\nexport default function() {\n  var lines = [],\n      line;\n  return {\n    point: function(x, y, m) {\n      line.push([x, y, m]);\n    },\n    lineStart: function() {\n      lines.push(line = []);\n    },\n    lineEnd: noop,\n    rejoin: function() {\n      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));\n    },\n    result: function() {\n      var result = lines;\n      lines = [];\n      line = null;\n      return result;\n    }\n  };\n}\n","import {abs, epsilon} from \"./math.js\";\n\nexport default function(a, b) {\n  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;\n}\n","import pointEqual from \"../pointEqual.js\";\nimport {epsilon} from \"../math.js\";\n\nfunction Intersection(point, points, other, entry) {\n  this.x = point;\n  this.z = points;\n  this.o = other; // another intersection\n  this.e = entry; // is an entry?\n  this.v = false; // visited\n  this.n = this.p = null; // next & previous\n}\n\n// A generalized polygon clipping algorithm: given a polygon that has been cut\n// into its visible line segments, and rejoins the segments by interpolating\n// along the clip edge.\nexport default function(segments, compareIntersection, startInside, interpolate, stream) {\n  var subject = [],\n      clip = [],\n      i,\n      n;\n\n  segments.forEach(function(segment) {\n    if ((n = segment.length - 1) <= 0) return;\n    var n, p0 = segment[0], p1 = segment[n], x;\n\n    if (pointEqual(p0, p1)) {\n      if (!p0[2] && !p1[2]) {\n        stream.lineStart();\n        for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);\n        stream.lineEnd();\n        return;\n      }\n      // handle degenerate cases by moving the point\n      p1[0] += 2 * epsilon;\n    }\n\n    subject.push(x = new Intersection(p0, segment, null, true));\n    clip.push(x.o = new Intersection(p0, null, x, false));\n    subject.push(x = new Intersection(p1, segment, null, false));\n    clip.push(x.o = new Intersection(p1, null, x, true));\n  });\n\n  if (!subject.length) return;\n\n  clip.sort(compareIntersection);\n  link(subject);\n  link(clip);\n\n  for (i = 0, n = clip.length; i < n; ++i) {\n    clip[i].e = startInside = !startInside;\n  }\n\n  var start = subject[0],\n      points,\n      point;\n\n  while (1) {\n    // Find first unvisited intersection.\n    var current = start,\n        isSubject = true;\n    while (current.v) if ((current = current.n) === start) return;\n    points = current.z;\n    stream.lineStart();\n    do {\n      current.v = current.o.v = true;\n      if (current.e) {\n        if (isSubject) {\n          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.n.x, 1, stream);\n        }\n        current = current.n;\n      } else {\n        if (isSubject) {\n          points = current.p.z;\n          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);\n        } else {\n          interpolate(current.x, current.p.x, -1, stream);\n        }\n        current = current.p;\n      }\n      current = current.o;\n      points = current.z;\n      isSubject = !isSubject;\n    } while (!current.v);\n    stream.lineEnd();\n  }\n}\n\nfunction link(array) {\n  if (!(n = array.length)) return;\n  var n,\n      i = 0,\n      a = array[0],\n      b;\n  while (++i < n) {\n    a.n = b = array[i];\n    b.p = a;\n    a = b;\n  }\n  a.n = b = array[0];\n  b.p = a;\n}\n","import clipBuffer from \"./buffer.js\";\nimport clipRejoin from \"./rejoin.js\";\nimport {epsilon, halfPi} from \"../math.js\";\nimport polygonContains from \"../polygonContains.js\";\nimport {merge} from \"d3-array\";\n\nexport default function(pointVisible, clipLine, interpolate, start) {\n  return function(sink) {\n    var line = clipLine(sink),\n        ringBuffer = clipBuffer(),\n        ringSink = clipLine(ringBuffer),\n        polygonStarted = false,\n        polygon,\n        segments,\n        ring;\n\n    var clip = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() {\n        clip.point = pointRing;\n        clip.lineStart = ringStart;\n        clip.lineEnd = ringEnd;\n        segments = [];\n        polygon = [];\n      },\n      polygonEnd: function() {\n        clip.point = point;\n        clip.lineStart = lineStart;\n        clip.lineEnd = lineEnd;\n        segments = merge(segments);\n        var startInside = polygonContains(polygon, start);\n        if (segments.length) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);\n        } else if (startInside) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          interpolate(null, null, 1, sink);\n          sink.lineEnd();\n        }\n        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;\n        segments = polygon = null;\n      },\n      sphere: function() {\n        sink.polygonStart();\n        sink.lineStart();\n        interpolate(null, null, 1, sink);\n        sink.lineEnd();\n        sink.polygonEnd();\n      }\n    };\n\n    function point(lambda, phi) {\n      if (pointVisible(lambda, phi)) sink.point(lambda, phi);\n    }\n\n    function pointLine(lambda, phi) {\n      line.point(lambda, phi);\n    }\n\n    function lineStart() {\n      clip.point = pointLine;\n      line.lineStart();\n    }\n\n    function lineEnd() {\n      clip.point = point;\n      line.lineEnd();\n    }\n\n    function pointRing(lambda, phi) {\n      ring.push([lambda, phi]);\n      ringSink.point(lambda, phi);\n    }\n\n    function ringStart() {\n      ringSink.lineStart();\n      ring = [];\n    }\n\n    function ringEnd() {\n      pointRing(ring[0][0], ring[0][1]);\n      ringSink.lineEnd();\n\n      var clean = ringSink.clean(),\n          ringSegments = ringBuffer.result(),\n          i, n = ringSegments.length, m,\n          segment,\n          point;\n\n      ring.pop();\n      polygon.push(ring);\n      ring = null;\n\n      if (!n) return;\n\n      // No intersections.\n      if (clean & 1) {\n        segment = ringSegments[0];\n        if ((m = segment.length - 1) > 0) {\n          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;\n          sink.lineStart();\n          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);\n          sink.lineEnd();\n        }\n        return;\n      }\n\n      // Rejoin connected segments.\n      // TODO reuse ringBuffer.rejoin()?\n      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));\n\n      segments.push(ringSegments.filter(validSegment));\n    }\n\n    return clip;\n  };\n}\n\nfunction validSegment(segment) {\n  return segment.length > 1;\n}\n\n// Intersections are sorted along the clip edge. For both antimeridian cutting\n// and circle clipping, the same comparison is used.\nfunction compareIntersection(a, b) {\n  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])\n       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);\n}\n","import clip from \"./index.js\";\nimport {abs, atan, cos, epsilon, halfPi, pi, sin} from \"../math.js\";\n\nexport default clip(\n  function() { return true; },\n  clipAntimeridianLine,\n  clipAntimeridianInterpolate,\n  [-pi, -halfPi]\n);\n\n// Takes a line and cuts into visible segments. Return values: 0 - there were\n// intersections or the line was empty; 1 - no intersections; 2 - there were\n// intersections, and the first and last segments should be rejoined.\nfunction clipAntimeridianLine(stream) {\n  var lambda0 = NaN,\n      phi0 = NaN,\n      sign0 = NaN,\n      clean; // no intersections\n\n  return {\n    lineStart: function() {\n      stream.lineStart();\n      clean = 1;\n    },\n    point: function(lambda1, phi1) {\n      var sign1 = lambda1 > 0 ? pi : -pi,\n          delta = abs(lambda1 - lambda0);\n      if (abs(delta - pi) < epsilon) { // line crosses a pole\n        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        stream.point(lambda1, phi0);\n        clean = 0;\n      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian\n        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies\n        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;\n        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);\n        stream.point(sign0, phi0);\n        stream.lineEnd();\n        stream.lineStart();\n        stream.point(sign1, phi0);\n        clean = 0;\n      }\n      stream.point(lambda0 = lambda1, phi0 = phi1);\n      sign0 = sign1;\n    },\n    lineEnd: function() {\n      stream.lineEnd();\n      lambda0 = phi0 = NaN;\n    },\n    clean: function() {\n      return 2 - clean; // if intersections, rejoin first and last segments\n    }\n  };\n}\n\nfunction clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {\n  var cosPhi0,\n      cosPhi1,\n      sinLambda0Lambda1 = sin(lambda0 - lambda1);\n  return abs(sinLambda0Lambda1) > epsilon\n      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)\n          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))\n          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))\n      : (phi0 + phi1) / 2;\n}\n\nfunction clipAntimeridianInterpolate(from, to, direction, stream) {\n  var phi;\n  if (from == null) {\n    phi = direction * halfPi;\n    stream.point(-pi, phi);\n    stream.point(0, phi);\n    stream.point(pi, phi);\n    stream.point(pi, 0);\n    stream.point(pi, -phi);\n    stream.point(0, -phi);\n    stream.point(-pi, -phi);\n    stream.point(-pi, 0);\n    stream.point(-pi, phi);\n  } else if (abs(from[0] - to[0]) > epsilon) {\n    var lambda = from[0] < to[0] ? pi : -pi;\n    phi = direction * lambda / 2;\n    stream.point(-lambda, phi);\n    stream.point(0, phi);\n    stream.point(lambda, phi);\n  } else {\n    stream.point(to[0], to[1]);\n  }\n}\n","import {cartesian, cartesianNormalizeInPlace, spherical} from \"./cartesian.js\";\nimport constant from \"./constant.js\";\nimport {acos, cos, degrees, epsilon, radians, sin, tau} from \"./math.js\";\nimport {rotateRadians} from \"./rotation.js\";\n\n// Generates a circle centered at [0°, 0°], with a given radius and precision.\nexport function circleStream(stream, radius, delta, direction, t0, t1) {\n  if (!delta) return;\n  var cosRadius = cos(radius),\n      sinRadius = sin(radius),\n      step = direction * delta;\n  if (t0 == null) {\n    t0 = radius + direction * tau;\n    t1 = radius - step / 2;\n  } else {\n    t0 = circleRadius(cosRadius, t0);\n    t1 = circleRadius(cosRadius, t1);\n    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;\n  }\n  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {\n    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);\n    stream.point(point[0], point[1]);\n  }\n}\n\n// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].\nfunction circleRadius(cosRadius, point) {\n  point = cartesian(point), point[0] -= cosRadius;\n  cartesianNormalizeInPlace(point);\n  var radius = acos(-point[1]);\n  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;\n}\n\nexport default function() {\n  var center = constant([0, 0]),\n      radius = constant(90),\n      precision = constant(2),\n      ring,\n      rotate,\n      stream = {point: point};\n\n  function point(x, y) {\n    ring.push(x = rotate(x, y));\n    x[0] *= degrees, x[1] *= degrees;\n  }\n\n  function circle() {\n    var c = center.apply(this, arguments),\n        r = radius.apply(this, arguments) * radians,\n        p = precision.apply(this, arguments) * radians;\n    ring = [];\n    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;\n    circleStream(stream, r, p, 1);\n    c = {type: \"Polygon\", coordinates: [ring]};\n    ring = rotate = null;\n    return c;\n  }\n\n  circle.center = function(_) {\n    return arguments.length ? (center = typeof _ === \"function\" ? _ : constant([+_[0], +_[1]]), circle) : center;\n  };\n\n  circle.radius = function(_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), circle) : radius;\n  };\n\n  circle.precision = function(_) {\n    return arguments.length ? (precision = typeof _ === \"function\" ? _ : constant(+_), circle) : precision;\n  };\n\n  return circle;\n}\n","import {cartesian, cartesianAddInPlace, cartesianCross, cartesianDot, cartesianScale, spherical} from \"../cartesian.js\";\nimport {circleStream} from \"../circle.js\";\nimport {abs, cos, epsilon, pi, radians, sqrt} from \"../math.js\";\nimport pointEqual from \"../pointEqual.js\";\nimport clip from \"./index.js\";\n\nexport default function(radius) {\n  var cr = cos(radius),\n      delta = 2 * radians,\n      smallRadius = cr > 0,\n      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case\n\n  function interpolate(from, to, direction, stream) {\n    circleStream(stream, radius, delta, direction, from, to);\n  }\n\n  function visible(lambda, phi) {\n    return cos(lambda) * cos(phi) > cr;\n  }\n\n  // Takes a line and cuts into visible segments. Return values used for polygon\n  // clipping: 0 - there were intersections or the line was empty; 1 - no\n  // intersections 2 - there were intersections, and the first and last segments\n  // should be rejoined.\n  function clipLine(stream) {\n    var point0, // previous point\n        c0, // code for previous point\n        v0, // visibility of previous point\n        v00, // visibility of first point\n        clean; // no intersections\n    return {\n      lineStart: function() {\n        v00 = v0 = false;\n        clean = 1;\n      },\n      point: function(lambda, phi) {\n        var point1 = [lambda, phi],\n            point2,\n            v = visible(lambda, phi),\n            c = smallRadius\n              ? v ? 0 : code(lambda, phi)\n              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;\n        if (!point0 && (v00 = v0 = v)) stream.lineStart();\n        if (v !== v0) {\n          point2 = intersect(point0, point1);\n          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2))\n            point1[2] = 1;\n        }\n        if (v !== v0) {\n          clean = 0;\n          if (v) {\n            // outside going in\n            stream.lineStart();\n            point2 = intersect(point1, point0);\n            stream.point(point2[0], point2[1]);\n          } else {\n            // inside going out\n            point2 = intersect(point0, point1);\n            stream.point(point2[0], point2[1], 2);\n            stream.lineEnd();\n          }\n          point0 = point2;\n        } else if (notHemisphere && point0 && smallRadius ^ v) {\n          var t;\n          // If the codes for two points are different, or are both zero,\n          // and there this segment intersects with the small circle.\n          if (!(c & c0) && (t = intersect(point1, point0, true))) {\n            clean = 0;\n            if (smallRadius) {\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1]);\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n            } else {\n              stream.point(t[1][0], t[1][1]);\n              stream.lineEnd();\n              stream.lineStart();\n              stream.point(t[0][0], t[0][1], 3);\n            }\n          }\n        }\n        if (v && (!point0 || !pointEqual(point0, point1))) {\n          stream.point(point1[0], point1[1]);\n        }\n        point0 = point1, v0 = v, c0 = c;\n      },\n      lineEnd: function() {\n        if (v0) stream.lineEnd();\n        point0 = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return clean | ((v00 && v0) << 1);\n      }\n    };\n  }\n\n  // Intersects the great circle between a and b with the clip circle.\n  function intersect(a, b, two) {\n    var pa = cartesian(a),\n        pb = cartesian(b);\n\n    // We have two planes, n1.p = d1 and n2.p = d2.\n    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).\n    var n1 = [1, 0, 0], // normal\n        n2 = cartesianCross(pa, pb),\n        n2n2 = cartesianDot(n2, n2),\n        n1n2 = n2[0], // cartesianDot(n1, n2),\n        determinant = n2n2 - n1n2 * n1n2;\n\n    // Two polar points.\n    if (!determinant) return !two && a;\n\n    var c1 =  cr * n2n2 / determinant,\n        c2 = -cr * n1n2 / determinant,\n        n1xn2 = cartesianCross(n1, n2),\n        A = cartesianScale(n1, c1),\n        B = cartesianScale(n2, c2);\n    cartesianAddInPlace(A, B);\n\n    // Solve |p(t)|^2 = 1.\n    var u = n1xn2,\n        w = cartesianDot(A, u),\n        uu = cartesianDot(u, u),\n        t2 = w * w - uu * (cartesianDot(A, A) - 1);\n\n    if (t2 < 0) return;\n\n    var t = sqrt(t2),\n        q = cartesianScale(u, (-w - t) / uu);\n    cartesianAddInPlace(q, A);\n    q = spherical(q);\n\n    if (!two) return q;\n\n    // Two intersection points.\n    var lambda0 = a[0],\n        lambda1 = b[0],\n        phi0 = a[1],\n        phi1 = b[1],\n        z;\n\n    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;\n\n    var delta = lambda1 - lambda0,\n        polar = abs(delta - pi) < epsilon,\n        meridian = polar || delta < epsilon;\n\n    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;\n\n    // Check that the first point is between a and b.\n    if (meridian\n        ? polar\n          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)\n          : phi0 <= q[1] && q[1] <= phi1\n        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {\n      var q1 = cartesianScale(u, (-w + t) / uu);\n      cartesianAddInPlace(q1, A);\n      return [q, spherical(q1)];\n    }\n  }\n\n  // Generates a 4-bit vector representing the location of a point relative to\n  // the small circle's bounding box.\n  function code(lambda, phi) {\n    var r = smallRadius ? radius : pi - radius,\n        code = 0;\n    if (lambda < -r) code |= 1; // left\n    else if (lambda > r) code |= 2; // right\n    if (phi < -r) code |= 4; // below\n    else if (phi > r) code |= 8; // above\n    return code;\n  }\n\n  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);\n}\n","export default function(a, b, x0, y0, x1, y1) {\n  var ax = a[0],\n      ay = a[1],\n      bx = b[0],\n      by = b[1],\n      t0 = 0,\n      t1 = 1,\n      dx = bx - ax,\n      dy = by - ay,\n      r;\n\n  r = x0 - ax;\n  if (!dx && r > 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dx > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = x1 - ax;\n  if (!dx && r < 0) return;\n  r /= dx;\n  if (dx < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dx > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  r = y0 - ay;\n  if (!dy && r > 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  } else if (dy > 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  }\n\n  r = y1 - ay;\n  if (!dy && r < 0) return;\n  r /= dy;\n  if (dy < 0) {\n    if (r > t1) return;\n    if (r > t0) t0 = r;\n  } else if (dy > 0) {\n    if (r < t0) return;\n    if (r < t1) t1 = r;\n  }\n\n  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;\n  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;\n  return true;\n}\n","import {abs, epsilon} from \"../math.js\";\nimport clipBuffer from \"./buffer.js\";\nimport clipLine from \"./line.js\";\nimport clipRejoin from \"./rejoin.js\";\nimport {merge} from \"d3-array\";\n\nvar clipMax = 1e9, clipMin = -clipMax;\n\n// TODO Use d3-polygon’s polygonContains here for the ring check?\n// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?\n\nexport default function clipRectangle(x0, y0, x1, y1) {\n\n  function visible(x, y) {\n    return x0 <= x && x <= x1 && y0 <= y && y <= y1;\n  }\n\n  function interpolate(from, to, direction, stream) {\n    var a = 0, a1 = 0;\n    if (from == null\n        || (a = corner(from, direction)) !== (a1 = corner(to, direction))\n        || comparePoint(from, to) < 0 ^ direction > 0) {\n      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);\n      while ((a = (a + direction + 4) % 4) !== a1);\n    } else {\n      stream.point(to[0], to[1]);\n    }\n  }\n\n  function corner(p, direction) {\n    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3\n        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1\n        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0\n        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon\n  }\n\n  function compareIntersection(a, b) {\n    return comparePoint(a.x, b.x);\n  }\n\n  function comparePoint(a, b) {\n    var ca = corner(a, 1),\n        cb = corner(b, 1);\n    return ca !== cb ? ca - cb\n        : ca === 0 ? b[1] - a[1]\n        : ca === 1 ? a[0] - b[0]\n        : ca === 2 ? a[1] - b[1]\n        : b[0] - a[0];\n  }\n\n  return function(stream) {\n    var activeStream = stream,\n        bufferStream = clipBuffer(),\n        segments,\n        polygon,\n        ring,\n        x__, y__, v__, // first point\n        x_, y_, v_, // previous point\n        first,\n        clean;\n\n    var clipStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: polygonStart,\n      polygonEnd: polygonEnd\n    };\n\n    function point(x, y) {\n      if (visible(x, y)) activeStream.point(x, y);\n    }\n\n    function polygonInside() {\n      var winding = 0;\n\n      for (var i = 0, n = polygon.length; i < n; ++i) {\n        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {\n          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];\n          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }\n          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }\n        }\n      }\n\n      return winding;\n    }\n\n    // Buffer geometry within a polygon and then clip it en masse.\n    function polygonStart() {\n      activeStream = bufferStream, segments = [], polygon = [], clean = true;\n    }\n\n    function polygonEnd() {\n      var startInside = polygonInside(),\n          cleanInside = clean && startInside,\n          visible = (segments = merge(segments)).length;\n      if (cleanInside || visible) {\n        stream.polygonStart();\n        if (cleanInside) {\n          stream.lineStart();\n          interpolate(null, null, 1, stream);\n          stream.lineEnd();\n        }\n        if (visible) {\n          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);\n        }\n        stream.polygonEnd();\n      }\n      activeStream = stream, segments = polygon = ring = null;\n    }\n\n    function lineStart() {\n      clipStream.point = linePoint;\n      if (polygon) polygon.push(ring = []);\n      first = true;\n      v_ = false;\n      x_ = y_ = NaN;\n    }\n\n    // TODO rather than special-case polygons, simply handle them separately.\n    // Ideally, coincident intersection points should be jittered to avoid\n    // clipping issues.\n    function lineEnd() {\n      if (segments) {\n        linePoint(x__, y__);\n        if (v__ && v_) bufferStream.rejoin();\n        segments.push(bufferStream.result());\n      }\n      clipStream.point = point;\n      if (v_) activeStream.lineEnd();\n    }\n\n    function linePoint(x, y) {\n      var v = visible(x, y);\n      if (polygon) ring.push([x, y]);\n      if (first) {\n        x__ = x, y__ = y, v__ = v;\n        first = false;\n        if (v) {\n          activeStream.lineStart();\n          activeStream.point(x, y);\n        }\n      } else {\n        if (v && v_) activeStream.point(x, y);\n        else {\n          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],\n              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];\n          if (clipLine(a, b, x0, y0, x1, y1)) {\n            if (!v_) {\n              activeStream.lineStart();\n              activeStream.point(a[0], a[1]);\n            }\n            activeStream.point(b[0], b[1]);\n            if (!v) activeStream.lineEnd();\n            clean = false;\n          } else if (v) {\n            activeStream.lineStart();\n            activeStream.point(x, y);\n            clean = false;\n          }\n        }\n      }\n      x_ = x, y_ = y, v_ = v;\n    }\n\n    return clipStream;\n  };\n}\n","export default x => x;\n","export default function(methods) {\n  return {\n    stream: transformer(methods)\n  };\n}\n\nexport function transformer(methods) {\n  return function(stream) {\n    var s = new TransformStream;\n    for (var key in methods) s[key] = methods[key];\n    s.stream = stream;\n    return s;\n  };\n}\n\nfunction TransformStream() {}\n\nTransformStream.prototype = {\n  constructor: TransformStream,\n  point: function(x, y) { this.stream.point(x, y); },\n  sphere: function() { this.stream.sphere(); },\n  lineStart: function() { this.stream.lineStart(); },\n  lineEnd: function() { this.stream.lineEnd(); },\n  polygonStart: function() { this.stream.polygonStart(); },\n  polygonEnd: function() { this.stream.polygonEnd(); }\n};\n","import noop from \"../noop.js\";\n\nvar x0 = Infinity,\n    y0 = x0,\n    x1 = -x0,\n    y1 = x1;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop,\n  result: function() {\n    var bounds = [[x0, y0], [x1, y1]];\n    x1 = y1 = -(y0 = x0 = Infinity);\n    return bounds;\n  }\n};\n\nfunction boundsPoint(x, y) {\n  if (x < x0) x0 = x;\n  if (x > x1) x1 = x;\n  if (y < y0) y0 = y;\n  if (y > y1) y1 = y;\n}\n\nexport default boundsStream;\n","import {default as geoStream} from \"../stream.js\";\nimport boundsStream from \"../path/bounds.js\";\n\nfunction fit(projection, fitBounds, object) {\n  var clip = projection.clipExtent && projection.clipExtent();\n  projection.scale(150).translate([0, 0]);\n  if (clip != null) projection.clipExtent(null);\n  geoStream(object, projection.stream(boundsStream));\n  fitBounds(boundsStream.result());\n  if (clip != null) projection.clipExtent(clip);\n  return projection;\n}\n\nexport function fitExtent(projection, extent, object) {\n  return fit(projection, function(b) {\n    var w = extent[1][0] - extent[0][0],\n        h = extent[1][1] - extent[0][1],\n        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),\n        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,\n        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitSize(projection, size, object) {\n  return fitExtent(projection, [[0, 0], size], object);\n}\n\nexport function fitWidth(projection, width, object) {\n  return fit(projection, function(b) {\n    var w = +width,\n        k = w / (b[1][0] - b[0][0]),\n        x = (w - k * (b[1][0] + b[0][0])) / 2,\n        y = -k * b[0][1];\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n\nexport function fitHeight(projection, height, object) {\n  return fit(projection, function(b) {\n    var h = +height,\n        k = h / (b[1][1] - b[0][1]),\n        x = -k * b[0][0],\n        y = (h - k * (b[1][1] + b[0][1])) / 2;\n    projection.scale(150 * k).translate([x, y]);\n  }, object);\n}\n","import {cartesian} from \"../cartesian.js\";\nimport {abs, asin, atan2, cos, epsilon, radians, sqrt} from \"../math.js\";\nimport {transformer} from \"../transform.js\";\n\nvar maxDepth = 16, // maximum depth of subdivision\n    cosMinDistance = cos(30 * radians); // cos(minimum angular distance)\n\nexport default function(project, delta2) {\n  return +delta2 ? resample(project, delta2) : resampleNone(project);\n}\n\nfunction resampleNone(project) {\n  return transformer({\n    point: function(x, y) {\n      x = project(x, y);\n      this.stream.point(x[0], x[1]);\n    }\n  });\n}\n\nfunction resample(project, delta2) {\n\n  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {\n    var dx = x1 - x0,\n        dy = y1 - y0,\n        d2 = dx * dx + dy * dy;\n    if (d2 > 4 * delta2 && depth--) {\n      var a = a0 + a1,\n          b = b0 + b1,\n          c = c0 + c1,\n          m = sqrt(a * a + b * b + c * c),\n          phi2 = asin(c /= m),\n          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),\n          p = project(lambda2, phi2),\n          x2 = p[0],\n          y2 = p[1],\n          dx2 = x2 - x0,\n          dy2 = y2 - y0,\n          dz = dy * dx2 - dx * dy2;\n      if (dz * dz / d2 > delta2 // perpendicular projected distance\n          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end\n          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance\n        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);\n        stream.point(x2, y2);\n        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);\n      }\n    }\n  }\n  return function(stream) {\n    var lambda00, x00, y00, a00, b00, c00, // first point\n        lambda0, x0, y0, a0, b0, c0; // previous point\n\n    var resampleStream = {\n      point: point,\n      lineStart: lineStart,\n      lineEnd: lineEnd,\n      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },\n      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }\n    };\n\n    function point(x, y) {\n      x = project(x, y);\n      stream.point(x[0], x[1]);\n    }\n\n    function lineStart() {\n      x0 = NaN;\n      resampleStream.point = linePoint;\n      stream.lineStart();\n    }\n\n    function linePoint(lambda, phi) {\n      var c = cartesian([lambda, phi]), p = project(lambda, phi);\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);\n      stream.point(x0, y0);\n    }\n\n    function lineEnd() {\n      resampleStream.point = point;\n      stream.lineEnd();\n    }\n\n    function ringStart() {\n      lineStart();\n      resampleStream.point = ringPoint;\n      resampleStream.lineEnd = ringEnd;\n    }\n\n    function ringPoint(lambda, phi) {\n      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;\n      resampleStream.point = linePoint;\n    }\n\n    function ringEnd() {\n      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);\n      resampleStream.lineEnd = lineEnd;\n      lineEnd();\n    }\n\n    return resampleStream;\n  };\n}\n","import clipAntimeridian from \"../clip/antimeridian.js\";\nimport clipCircle from \"../clip/circle.js\";\nimport clipRectangle from \"../clip/rectangle.js\";\nimport compose from \"../compose.js\";\nimport identity from \"../identity.js\";\nimport {cos, degrees, radians, sin, sqrt} from \"../math.js\";\nimport {rotateRadians} from \"../rotation.js\";\nimport {transformer} from \"../transform.js\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit.js\";\nimport resample from \"./resample.js\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nfunction scaleTranslate(k, dx, dy, sx, sy) {\n  function transform(x, y) {\n    x *= sx; y *= sy;\n    return [dx + k * x, dy - k * y];\n  }\n  transform.invert = function(x, y) {\n    return [(x - dx) / k * sx, (dy - y) / k * sy];\n  };\n  return transform;\n}\n\nfunction scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {\n  if (!alpha) return scaleTranslate(k, dx, dy, sx, sy);\n  var cosAlpha = cos(alpha),\n      sinAlpha = sin(alpha),\n      a = cosAlpha * k,\n      b = sinAlpha * k,\n      ai = cosAlpha / k,\n      bi = sinAlpha / k,\n      ci = (sinAlpha * dy - cosAlpha * dx) / k,\n      fi = (sinAlpha * dx + cosAlpha * dy) / k;\n  function transform(x, y) {\n    x *= sx; y *= sy;\n    return [a * x - b * y + dx, dy - b * x - a * y];\n  }\n  transform.invert = function(x, y) {\n    return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];\n  };\n  return transform;\n}\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate\n      alpha = 0, // post-rotate angle\n      sx = 1, // reflectX\n      sy = 1, // reflectX\n      theta = null, preclip = clipAntimeridian, // pre-clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // post-clip extent\n      delta2 = 0.5, // precision\n      projectResample,\n      projectTransform,\n      projectRotateTransform,\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    return projectRotateTransform(point[0] * radians, point[1] * radians);\n  }\n\n  function invert(point) {\n    point = projectRotateTransform.invert(point[0], point[1]);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function(_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function(_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.angle = function(_) {\n    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;\n  };\n\n  projection.reflectX = function(_) {\n    return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;\n  };\n\n  projection.reflectY = function(_) {\n    return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function(width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function(height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)),\n        transform = scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha);\n    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);\n    projectTransform = compose(project, transform);\n    projectRotateTransform = compose(rotate, projectTransform);\n    projectResample = resample(projectTransform, delta2);\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n","import {atan, cos, sin} from \"../math.js\";\nimport {azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport function stereographicRaw(x, y) {\n  var cy = cos(y), k = 1 + cos(x) * cy;\n  return [cy * sin(x) / k, sin(y) / k];\n}\n\nstereographicRaw.invert = azimuthalInvert(function(z) {\n  return 2 * atan(z);\n});\n\nexport default function() {\n  return projection(stereographicRaw)\n      .scale(250)\n      .clipAngle(142);\n}\n","export const epsilon = 1e-6;\nexport const epsilon2 = 1e-12;\nexport const pi = Math.PI;\nexport const halfPi = pi / 2;\nexport const quarterPi = pi / 4;\nexport const tau = pi * 2;\n\nexport const degrees = 180 / pi;\nexport const radians = pi / 180;\n\nexport const abs = Math.abs;\nexport const atan = Math.atan;\nexport const atan2 = Math.atan2;\nexport const cos = Math.cos;\nexport const ceil = Math.ceil;\nexport const exp = Math.exp;\nexport const floor = Math.floor;\nexport const log = Math.log;\nexport const max = Math.max;\nexport const min = Math.min;\nexport const pow = Math.pow;\nexport const sin = Math.sin;\nexport const sign =\n  Math.sign ||\n  function (x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n  };\nexport const sqrt = Math.sqrt;\nexport const tan = Math.tan;\n\nexport function acos(x) {\n  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);\n}\n\nexport function asin(x) {\n  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);\n}\n\nexport function haversin(x) {\n  return (x = sin(x / 2)) * x;\n}\n","import { asin, atan2, cos, sin, sqrt } from \"./math.js\";\n\nexport function spherical(cartesian) {\n  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];\n}\n\nexport function cartesian(spherical) {\n  const lambda = spherical[0],\n    phi = spherical[1],\n    cosPhi = cos(phi);\n  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];\n}\n\nexport function cartesianDot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function cartesianCross(a, b) {\n  return [\n    a[1] * b[2] - a[2] * b[1],\n    a[2] * b[0] - a[0] * b[2],\n    a[0] * b[1] - a[1] * b[0],\n  ];\n}\n\n// TODO return a\nexport function cartesianAddInPlace(a, b) {\n  (a[0] += b[0]), (a[1] += b[1]), (a[2] += b[2]);\n}\n\nexport function cartesianAdd(a, b) {\n  return [a[0] + b[0], a[1] + b[1], a[2] + b[2]];\n}\n\nexport function cartesianScale(vector, k) {\n  return [vector[0] * k, vector[1] * k, vector[2] * k];\n}\n\n// TODO return d\nexport function cartesianNormalizeInPlace(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  (d[0] /= l), (d[1] /= l), (d[2] /= l);\n}\n\nexport function cartesianNormalize(d) {\n  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);\n  return [d[0] / l, d[1] / l, d[2] / l];\n}\n","import { Delaunay } from \"d3-delaunay\";\nimport { geoRotation, geoStereographic } from \"d3-geo\";\nimport { extent } from \"d3-array\";\nimport {\n  asin,\n  atan2,\n  cos,\n  degrees,\n  max,\n  min,\n  radians,\n  sign,\n  sin,\n  sqrt,\n} from \"./math.js\";\nimport {\n  cartesianNormalize as normalize,\n  cartesianCross as cross,\n  cartesianDot as dot,\n  cartesianAdd,\n} from \"./cartesian.js\";\n\n// Converts 3D Cartesian to spherical coordinates (degrees).\nfunction spherical(cartesian) {\n  return [\n    atan2(cartesian[1], cartesian[0]) * degrees,\n    asin(max(-1, min(1, cartesian[2]))) * degrees,\n  ];\n}\n\n// Converts spherical coordinates (degrees) to 3D Cartesian.\nfunction cartesian(coordinates) {\n  const lambda = coordinates[0] * radians,\n    phi = coordinates[1] * radians,\n    cosphi = cos(phi);\n  return [cosphi * cos(lambda), cosphi * sin(lambda), sin(phi)];\n}\n\n// Spherical excess of a triangle (in spherical coordinates)\nexport function excess(triangle) {\n  triangle = triangle.map((p) => cartesian(p));\n  return dot(triangle[0], cross(triangle[2], triangle[1]));\n}\n\nexport function geoDelaunay(points) {\n  const delaunay = geo_delaunay_from(points),\n    triangles = geo_triangles(delaunay),\n    edges = geo_edges(triangles, points),\n    neighbors = geo_neighbors(triangles, points.length),\n    find = geo_find(neighbors, points),\n    // Voronoi ; could take a center function as an argument\n    circumcenters = geo_circumcenters(triangles, points),\n    { polygons, centers } = geo_polygons(circumcenters, triangles, points),\n    mesh = geo_mesh(polygons),\n    hull = geo_hull(triangles, points),\n    // Urquhart ; returns a function that takes a distance array as argument.\n    urquhart = geo_urquhart(edges, triangles);\n  return {\n    delaunay,\n    edges,\n    triangles,\n    centers,\n    neighbors,\n    polygons,\n    mesh,\n    hull,\n    urquhart,\n    find,\n  };\n}\n\nfunction geo_find(neighbors, points) {\n  function distance2(a, b) {\n    let x = a[0] - b[0],\n      y = a[1] - b[1],\n      z = a[2] - b[2];\n    return x * x + y * y + z * z;\n  }\n\n  return function find(x, y, next) {\n    if (next === undefined) next = 0;\n    let cell,\n      dist,\n      found = next;\n    const xyz = cartesian([x, y]);\n    do {\n      cell = next;\n      next = null;\n      dist = distance2(xyz, cartesian(points[cell]));\n      neighbors[cell].forEach((i) => {\n        let ndist = distance2(xyz, cartesian(points[i]));\n        if (ndist < dist) {\n          dist = ndist;\n          next = i;\n          found = i;\n          return;\n        }\n      });\n    } while (next !== null);\n\n    return found;\n  };\n}\n\nfunction geo_delaunay_from(points) {\n  if (points.length < 2) return {};\n\n  // find a valid point to send to infinity\n  let pivot = 0;\n  while (isNaN(points[pivot][0] + points[pivot][1]) && pivot++ < points.length);\n\n  const r = geoRotation(points[pivot]),\n    projection = geoStereographic()\n      .translate([0, 0])\n      .scale(1)\n      .rotate(r.invert([180, 0]));\n  points = points.map(projection);\n\n  const zeros = [];\n  let max2 = 1;\n  for (let i = 0, n = points.length; i < n; i++) {\n    let m = points[i][0] ** 2 + points[i][1] ** 2;\n    if (!isFinite(m) || m > 1e32) zeros.push(i);\n    else if (m > max2) max2 = m;\n  }\n\n  const FAR = 1e6 * sqrt(max2);\n\n  zeros.forEach((i) => (points[i] = [FAR, 0]));\n\n  // Add infinite horizon points\n  points.push([0, FAR]);\n  points.push([-FAR, 0]);\n  points.push([0, -FAR]);\n\n  const delaunay = Delaunay.from(points);\n\n  delaunay.projection = projection;\n\n  // clean up the triangulation\n  const { triangles, halfedges, inedges } = delaunay;\n  const degenerate = [];\n  for (let i = 0, l = halfedges.length; i < l; i++) {\n    if (halfedges[i] < 0) {\n      const j = i % 3 == 2 ? i - 2 : i + 1;\n      const k = i % 3 == 0 ? i + 2 : i - 1;\n      const a = halfedges[j];\n      const b = halfedges[k];\n      halfedges[a] = b;\n      halfedges[b] = a;\n      halfedges[j] = halfedges[k] = -1;\n      triangles[i] = triangles[j] = triangles[k] = pivot;\n      inedges[triangles[a]] = a % 3 == 0 ? a + 2 : a - 1;\n      inedges[triangles[b]] = b % 3 == 0 ? b + 2 : b - 1;\n      degenerate.push(Math.min(i, j, k));\n      i += 2 - (i % 3);\n    } else if (triangles[i] > points.length - 3 - 1) {\n      triangles[i] = pivot;\n    }\n  }\n\n  // there should always be 4 degenerate triangles\n  // console.warn(degenerate);\n  return delaunay;\n}\n\nfunction geo_edges(triangles, points) {\n  const _index = new Set();\n  if (points.length === 2) return [[0, 1]];\n  triangles.forEach((tri) => {\n    if (tri[0] === tri[1]) return;\n    if (excess(tri.map((i) => points[i])) < 0) return;\n    for (let i = 0, j; i < 3; i++) {\n      j = (i + 1) % 3;\n      _index.add(extent([tri[i], tri[j]]).join(\"-\"));\n    }\n  });\n  return Array.from(_index, (d) => d.split(\"-\").map(Number));\n}\n\nfunction geo_triangles(delaunay) {\n  const { triangles } = delaunay;\n  if (!triangles) return [];\n\n  const geo_triangles = [];\n  for (let i = 0, n = triangles.length / 3; i < n; i++) {\n    const a = triangles[3 * i],\n      b = triangles[3 * i + 1],\n      c = triangles[3 * i + 2];\n    if (a !== b && b !== c) {\n      geo_triangles.push([a, c, b]);\n    }\n  }\n  return geo_triangles;\n}\n\nfunction geo_circumcenters(triangles, points) {\n  // if (!use_centroids) {\n  return triangles.map((tri) => {\n    const c = tri.map((i) => points[i]).map(cartesian),\n      V = cartesianAdd(\n        cartesianAdd(cross(c[1], c[0]), cross(c[2], c[1])),\n        cross(c[0], c[2])\n      );\n    return spherical(normalize(V));\n  });\n  /*} else {\n    return triangles.map(tri => {\n      return d3.geoCentroid({\n        type: \"MultiPoint\",\n        coordinates: tri.map(i => points[i])\n      });\n    });\n  }*/\n}\n\nfunction geo_neighbors(triangles, npoints) {\n  const neighbors = [];\n  triangles.forEach((tri) => {\n    for (let j = 0; j < 3; j++) {\n      const a = tri[j],\n        b = tri[(j + 1) % 3];\n      neighbors[a] = neighbors[a] || [];\n      neighbors[a].push(b);\n    }\n  });\n\n  // degenerate cases\n  if (triangles.length === 0) {\n    if (npoints === 2) (neighbors[0] = [1]), (neighbors[1] = [0]);\n    else if (npoints === 1) neighbors[0] = [];\n  }\n\n  return neighbors;\n}\n\nfunction geo_polygons(circumcenters, triangles, points) {\n  const polygons = [];\n\n  const centers = circumcenters.slice();\n\n  if (triangles.length === 0) {\n    if (points.length < 2) return { polygons, centers };\n    if (points.length === 2) {\n      // two hemispheres\n      const a = cartesian(points[0]),\n        b = cartesian(points[1]),\n        m = normalize(cartesianAdd(a, b)),\n        d = normalize(cross(a, b)),\n        c = cross(m, d);\n      const poly = [\n        m,\n        cross(m, c),\n        cross(cross(m, c), c),\n        cross(cross(cross(m, c), c), c),\n      ]\n        .map(spherical)\n        .map(supplement);\n      return (\n        polygons.push(poly),\n        polygons.push(poly.slice().reverse()),\n        { polygons, centers }\n      );\n    }\n  }\n\n  triangles.forEach((tri, t) => {\n    for (let j = 0; j < 3; j++) {\n      const a = tri[j],\n        b = tri[(j + 1) % 3],\n        c = tri[(j + 2) % 3];\n      polygons[a] = polygons[a] || [];\n      polygons[a].push([b, c, t, [a, b, c]]);\n    }\n  });\n\n  // reorder each polygon\n  const reordered = polygons.map((poly) => {\n    const p = [poly[0][2]]; // t\n    let k = poly[0][1]; // k = c\n    for (let i = 1; i < poly.length; i++) {\n      // look for b = k\n      for (let j = 0; j < poly.length; j++) {\n        if (poly[j][0] == k) {\n          k = poly[j][1];\n          p.push(poly[j][2]);\n          break;\n        }\n      }\n    }\n\n    if (p.length > 2) {\n      return p;\n    } else if (p.length == 2) {\n      const R0 = o_midpoint(\n          points[poly[0][3][0]],\n          points[poly[0][3][1]],\n          centers[p[0]]\n        ),\n        R1 = o_midpoint(\n          points[poly[0][3][2]],\n          points[poly[0][3][0]],\n          centers[p[0]]\n        );\n      const i0 = supplement(R0),\n        i1 = supplement(R1);\n      return [p[0], i1, p[1], i0];\n    }\n  });\n\n  function supplement(point) {\n    let f = -1;\n    centers.slice(triangles.length, Infinity).forEach((p, i) => {\n      if (p[0] === point[0] && p[1] === point[1]) f = i + triangles.length;\n    });\n    if (f < 0) (f = centers.length), centers.push(point);\n    return f;\n  }\n\n  return { polygons: reordered, centers };\n}\n\nfunction o_midpoint(a, b, c) {\n  a = cartesian(a);\n  b = cartesian(b);\n  c = cartesian(c);\n  const s = sign(dot(cross(b, a), c));\n  return spherical(normalize(cartesianAdd(a, b)).map((d) => s * d));\n}\n\nfunction geo_mesh(polygons) {\n  const mesh = [];\n  polygons.forEach((poly) => {\n    if (!poly) return;\n    let p = poly[poly.length - 1];\n    for (let q of poly) {\n      if (q > p) mesh.push([p, q]);\n      p = q;\n    }\n  });\n  return mesh;\n}\n\nfunction geo_urquhart(edges, triangles) {\n  return function (distances) {\n    const _lengths = new Map(),\n      _urquhart = new Map();\n    edges.forEach((edge, i) => {\n      const u = edge.join(\"-\");\n      _lengths.set(u, distances[i]);\n      _urquhart.set(u, true);\n    });\n\n    triangles.forEach((tri) => {\n      let l = 0,\n        remove = -1;\n      for (let j = 0; j < 3; j++) {\n        let u = extent([tri[j], tri[(j + 1) % 3]]).join(\"-\");\n        if (_lengths.get(u) > l) {\n          l = _lengths.get(u);\n          remove = u;\n        }\n      }\n      _urquhart.set(remove, false);\n    });\n\n    return edges.map((edge) => _urquhart.get(edge.join(\"-\")));\n  };\n}\n\nfunction geo_hull(triangles, points) {\n  const _hull = new Set(),\n    hull = [];\n  triangles.map((tri) => {\n    if (excess(tri.map((i) => points[i > points.length ? 0 : i])) > 1e-12)\n      return;\n    for (let i = 0; i < 3; i++) {\n      let e = [tri[i], tri[(i + 1) % 3]],\n        code = `${e[0]}-${e[1]}`;\n      if (_hull.has(code)) _hull.delete(code);\n      else _hull.add(`${e[1]}-${e[0]}`);\n    }\n  });\n\n  const _index = new Map();\n  let start;\n  _hull.forEach((e) => {\n    e = e.split(\"-\").map(Number);\n    _index.set(e[0], e[1]);\n    start = e[0];\n  });\n\n  if (start === undefined) return hull;\n\n  let next = start;\n  do {\n    hull.push(next);\n    let n = _index.get(next);\n    _index.set(next, -1);\n    next = n;\n  } while (next > -1 && next !== start);\n\n  return hull;\n}\n","import { geoCentroid, geoDistance } from \"d3-geo\";\nimport { geoDelaunay, excess } from \"./delaunay.js\";\n\nexport function geoVoronoi(data) {\n  const v = function (data) {\n    v.delaunay = null;\n    v._data = data;\n\n    if (typeof v._data === \"object\" && v._data.type === \"FeatureCollection\") {\n      v._data = v._data.features;\n    }\n    if (typeof v._data === \"object\") {\n      const temp = v._data\n        .map((d) => [v._vx(d), v._vy(d), d])\n        .filter((d) => isFinite(d[0] + d[1]));\n      v.points = temp.map((d) => [d[0], d[1]]);\n      v.valid = temp.map((d) => d[2]);\n      v.delaunay = geoDelaunay(v.points);\n    }\n    return v;\n  };\n\n  v._vx = function (d) {\n    if (typeof d == \"object\" && \"type\" in d) {\n      return geoCentroid(d)[0];\n    }\n    if (0 in d) return d[0];\n  };\n  v._vy = function (d) {\n    if (typeof d == \"object\" && \"type\" in d) {\n      return geoCentroid(d)[1];\n    }\n    if (1 in d) return d[1];\n  };\n\n  v.x = function (f) {\n    if (!f) return v._vx;\n    v._vx = f;\n    return v;\n  };\n  v.y = function (f) {\n    if (!f) return v._vy;\n    v._vy = f;\n    return v;\n  };\n\n  v.polygons = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n\n    if (!v.delaunay) return false;\n    const coll = {\n      type: \"FeatureCollection\",\n      features: [],\n    };\n    if (v.valid.length === 0) return coll;\n    v.delaunay.polygons.forEach((poly, i) =>\n      coll.features.push({\n        type: \"Feature\",\n        geometry: !poly\n          ? null\n          : {\n              type: \"Polygon\",\n              coordinates: [\n                [...poly, poly[0]].map((i) => v.delaunay.centers[i]),\n              ],\n            },\n        properties: {\n          site: v.valid[i],\n          sitecoordinates: v.points[i],\n          neighbours: v.delaunay.neighbors[i], // not part of the public API\n        },\n      })\n    );\n    if (v.valid.length === 1)\n      coll.features.push({\n        type: \"Feature\",\n        geometry: { type: \"Sphere\" },\n        properties: {\n          site: v.valid[0],\n          sitecoordinates: v.points[0],\n          neighbours: [],\n        },\n      });\n    return coll;\n  };\n\n  v.triangles = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n\n    return {\n      type: \"FeatureCollection\",\n      features: v.delaunay.triangles\n        .map((tri, index) => {\n          tri = tri.map((i) => v.points[i]);\n          tri.center = v.delaunay.centers[index];\n          return tri;\n        })\n        .filter((tri) => excess(tri) > 0)\n        .map((tri) => ({\n          type: \"Feature\",\n          properties: {\n            circumcenter: tri.center,\n          },\n          geometry: {\n            type: \"Polygon\",\n            coordinates: [[...tri, tri[0]]],\n          },\n        })),\n    };\n  };\n\n  v.links = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    const _distances = v.delaunay.edges.map((e) =>\n        geoDistance(v.points[e[0]], v.points[e[1]])\n      ),\n      _urquart = v.delaunay.urquhart(_distances);\n    return {\n      type: \"FeatureCollection\",\n      features: v.delaunay.edges.map((e, i) => ({\n        type: \"Feature\",\n        properties: {\n          source: v.valid[e[0]],\n          target: v.valid[e[1]],\n          length: _distances[i],\n          urquhart: !!_urquart[i],\n        },\n        geometry: {\n          type: \"LineString\",\n          coordinates: [v.points[e[0]], v.points[e[1]]],\n        },\n      })),\n    };\n  };\n\n  v.mesh = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    return {\n      type: \"MultiLineString\",\n      coordinates: v.delaunay.edges.map((e) => [\n        v.points[e[0]],\n        v.points[e[1]],\n      ]),\n    };\n  };\n\n  v.cellMesh = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    if (!v.delaunay) return false;\n    const { centers, polygons } = v.delaunay;\n    const coordinates = [];\n    for (const p of polygons) {\n      if (!p) continue;\n      for (\n        let n = p.length, p0 = p[n - 1], p1 = p[0], i = 0;\n        i < n;\n        p0 = p1, p1 = p[++i]\n      ) {\n        if (p1 > p0) {\n          coordinates.push([centers[p0], centers[p1]]);\n        }\n      }\n    }\n    return {\n      type: \"MultiLineString\",\n      coordinates,\n    };\n  };\n\n  v._found = undefined;\n  v.find = function (x, y, radius) {\n    v._found = v.delaunay.find(x, y, v._found);\n    if (!radius || geoDistance([x, y], v.points[v._found]) < radius)\n      return v._found;\n  };\n\n  v.hull = function (data) {\n    if (data !== undefined) {\n      v(data);\n    }\n    const hull = v.delaunay.hull,\n      points = v.points;\n    return hull.length === 0\n      ? null\n      : {\n          type: \"Polygon\",\n          coordinates: [[...hull.map((i) => points[i]), points[hull[0]]]],\n        };\n  };\n\n  return data ? v(data) : v;\n}\n","import { BufferGeometry, Float32BufferAttribute } from 'three';\nimport { merge, extent, mean } from 'd3-array';\nimport earcut from 'earcut';\nimport Delaunator from 'delaunator';\nimport turfPointInPolygon from '@turf/boolean-point-in-polygon';\nimport { geoBounds, geoContains, geoDistance, geoInterpolate } from 'd3-geo';\nimport { geoVoronoi } from 'd3-geo-voronoi';\nimport { scaleLinear } from 'd3-scale';\n\nfunction _callSuper(t, o, e) {\n  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n}\nfunction _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function () {\n    return !!t;\n  })();\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : String(i);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction geoPolygonTriangulate(polygon) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref$resolution = _ref.resolution,\n    resolution = _ref$resolution === void 0 ? Infinity : _ref$resolution;\n  var contour = interpolateContourPoints(polygon, resolution);\n  var edgePoints = merge(contour);\n  var innerPoints = getInnerGeoPoints(polygon, resolution);\n  var points = [].concat(_toConsumableArray(edgePoints), _toConsumableArray(innerPoints));\n  var boundariesGeojson = {\n    type: 'Polygon',\n    coordinates: polygon\n  };\n  var _geoBounds = geoBounds(boundariesGeojson),\n    _geoBounds2 = _slicedToArray(_geoBounds, 2),\n    _geoBounds2$ = _slicedToArray(_geoBounds2[0], 2),\n    minLng = _geoBounds2$[0],\n    minLat = _geoBounds2$[1],\n    _geoBounds2$2 = _slicedToArray(_geoBounds2[1], 2),\n    maxLng = _geoBounds2$2[0],\n    maxLat = _geoBounds2$2[1];\n  var crossesPoleOrAntimeridian = minLng > maxLng // crosses antimeridian\n  || maxLat >= 89 // crosses north pole\n  || minLat <= -89; // crosses south pole\n\n  var indices = [];\n  if (crossesPoleOrAntimeridian) {\n    // Use d3-geo-voronoi. Slowest, but most accurate for polygons that cross poles or anti-meridian\n    var vt = geoVoronoi(points).triangles(); // geoDelaunay generates more triangles than needed\n    var pntMap = new Map(points.map(function (_ref2, idx) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        lng = _ref3[0],\n        lat = _ref3[1];\n      return [\"\".concat(lng, \"-\").concat(lat), idx];\n    }));\n    vt.features.forEach(function (f) {\n      var _indices;\n      var triangle = f.geometry.coordinates[0].slice(0, 3).reverse(); // reverse wound to match earcut\n\n      var inds = [];\n      triangle.forEach(function (_ref4) {\n        var _ref5 = _slicedToArray(_ref4, 2),\n          lng = _ref5[0],\n          lat = _ref5[1];\n        var k = \"\".concat(lng, \"-\").concat(lat);\n        pntMap.has(k) && inds.push(pntMap.get(k));\n      });\n      if (inds.length !== 3) return; // triangle malfunction\n\n      // exclude edge triangles outside polygon perimeter or through holes\n      if (inds.some(function (ind) {\n        return ind < edgePoints.length;\n      })) {\n        var triangleCentroid = f.properties.circumcenter;\n        if (!pointInside(triangleCentroid, boundariesGeojson, crossesPoleOrAntimeridian)) return;\n      }\n      (_indices = indices).push.apply(_indices, inds);\n    });\n  } else if (!innerPoints.length) {\n    // earcut triangulation slightly more performing if it's only using the polygon perimeter\n    var _earcut$flatten = earcut.flatten(contour),\n      vertices = _earcut$flatten.vertices,\n      _earcut$flatten$holes = _earcut$flatten.holes,\n      holes = _earcut$flatten$holes === void 0 ? [] : _earcut$flatten$holes;\n    indices = earcut(vertices, holes, 2);\n  } else {\n    // use delaunator\n    var delaunay = Delaunator.from(points);\n    var _loop = function _loop(i) {\n      var _indices2;\n      var inds = [2, 1, 0].map(function (idx) {\n        return delaunay.triangles[i + idx];\n      }); // reverse wound to have same orientation as earcut\n      var triangle = inds.map(function (indice) {\n        return points[indice];\n      });\n\n      // exclude edge triangles outside polygon perimeter or through holes\n      if (inds.some(function (ind) {\n        return ind < edgePoints.length;\n      })) {\n        var triangleCentroid = [0, 1].map(function (coordIdx) {\n          return mean(triangle, function (p) {\n            return p[coordIdx];\n          });\n        });\n        if (!pointInside(triangleCentroid, boundariesGeojson, crossesPoleOrAntimeridian)) return 1; // continue\n      }\n      (_indices2 = indices).push.apply(_indices2, _toConsumableArray(inds));\n    };\n    for (var i = 0, len = delaunay.triangles.length; i < len; i += 3) {\n      if (_loop(i)) continue;\n    }\n  }\n\n  // calc uvs\n  var lngUvScale = scaleLinear(extent(points, function (d) {\n    return d[0];\n  }), [0, 1]);\n  var latUvScale = scaleLinear(extent(points, function (d) {\n    return d[1];\n  }), [0, 1]);\n  var uvs = points.map(function (_ref6) {\n    var _ref7 = _slicedToArray(_ref6, 2),\n      lng = _ref7[0],\n      lat = _ref7[1];\n    return [lngUvScale(lng), latUvScale(lat)];\n  });\n  var triangles = {\n    points: points,\n    indices: indices,\n    uvs: uvs\n  };\n  return {\n    contour: contour,\n    triangles: triangles\n  };\n}\nfunction interpolateContourPoints(polygon, maxDistance) {\n  // add interpolated points for segments that are further apart than the max distance\n  return polygon.map(function (coords) {\n    var pnts = [];\n    var prevPnt;\n    coords.forEach(function (pnt) {\n      if (prevPnt) {\n        var dist = geoDistance(pnt, prevPnt) * 180 / Math.PI;\n        if (dist > maxDistance) {\n          var interpol = geoInterpolate(prevPnt, pnt);\n          var tStep = 1 / Math.ceil(dist / maxDistance);\n          var t = tStep;\n          while (t < 1) {\n            pnts.push(interpol(t));\n            t += tStep;\n          }\n        }\n      }\n      pnts.push(prevPnt = pnt);\n    });\n    return pnts;\n  });\n}\nfunction getInnerGeoPoints(polygon, maxDistance) {\n  var boundariesGeojson = {\n    type: 'Polygon',\n    coordinates: polygon\n  };\n  var _geoBounds3 = geoBounds(boundariesGeojson),\n    _geoBounds4 = _slicedToArray(_geoBounds3, 2),\n    _geoBounds4$ = _slicedToArray(_geoBounds4[0], 2),\n    minLng = _geoBounds4$[0],\n    minLat = _geoBounds4$[1],\n    _geoBounds4$2 = _slicedToArray(_geoBounds4[1], 2),\n    maxLng = _geoBounds4$2[0],\n    maxLat = _geoBounds4$2[1];\n\n  // polygon smaller than maxDistance -> no inner points\n  if (Math.min(Math.abs(maxLng - minLng), Math.abs(maxLat - minLat)) < maxDistance) return [];\n  var crossesPoleOrAntimeridian = minLng > maxLng || maxLat >= 89 || minLat <= -89;\n  return getGeoSpiralGrid(maxDistance, {\n    minLng: minLng,\n    maxLng: maxLng,\n    minLat: minLat,\n    maxLat: maxLat\n  }).filter(function (pnt) {\n    return pointInside(pnt, boundariesGeojson, crossesPoleOrAntimeridian);\n  });\n}\nfunction getGeoSpiralGrid(distanceBetweenPoints) {\n  var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    minLng = _ref8.minLng,\n    maxLng = _ref8.maxLng,\n    minLat = _ref8.minLat,\n    maxLat = _ref8.maxLat;\n  var numPoints = Math.round(Math.pow(360 / distanceBetweenPoints, 2) / Math.PI);\n\n  // https://observablehq.com/@mbostock/spherical-fibonacci-lattice\n  var phi = (1 + Math.sqrt(5)) / 2; // golden ratio\n\n  var getPntLng = function getPntLng(idx) {\n    return idx / phi * 360 % 360 - 180;\n  };\n  var getPntLat = function getPntLat(idx) {\n    return Math.acos(2 * idx / numPoints - 1) / Math.PI * 180 - 90;\n  };\n  var getPntIdx = function getPntIdx(lat) {\n    return numPoints * (Math.cos((lat + 90) * Math.PI / 180) + 1) / 2;\n  };\n  var pntIdxRange = [maxLat !== undefined ? Math.ceil(getPntIdx(maxLat)) : 0, minLat !== undefined ? Math.floor(getPntIdx(minLat)) : numPoints - 1];\n  var isLngInRange = minLng === undefined && maxLng === undefined ? function () {\n    return true;\n  } : minLng === undefined ? function (lng) {\n    return lng <= maxLng;\n  } : maxLng === undefined ? function (lng) {\n    return lng >= minLng;\n  } : maxLng >= minLng ? function (lng) {\n    return lng >= minLng && lng <= maxLng;\n  } : function (lng) {\n    return lng >= minLng || lng <= maxLng;\n  }; // for ranges that cross the anti-meridian\n\n  var pnts = [];\n  for (var i = pntIdxRange[0]; i <= pntIdxRange[1]; i++) {\n    var lng = getPntLng(i);\n    isLngInRange(lng) && pnts.push([lng, getPntLat(i)]);\n  }\n  return pnts;\n}\nfunction pointInside(pnt, polygon) {\n  var crossesPoleOrAntimeridian = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  // turf method is more performing but malfunctions if polygon includes a pole (lat = 90 | -90) or crosses the antimeridian (lng = 180 | -180)\n  return crossesPoleOrAntimeridian ? geoContains(polygon, pnt) : turfPointInPolygon(pnt, polygon);\n}\n\nvar THREE = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n: {\n  BufferGeometry: BufferGeometry,\n  Float32BufferAttribute: Float32BufferAttribute\n};\n\n// support both modes for backwards threejs compatibility\nvar setAttributeFn = new THREE.BufferGeometry().setAttribute ? 'setAttribute' : 'addAttribute';\nvar ConicPolygonBufferGeometry = /*#__PURE__*/function (_THREE$BufferGeometry) {\n  _inherits(ConicPolygonBufferGeometry, _THREE$BufferGeometry);\n  function ConicPolygonBufferGeometry(polygonGeoJson, startHeight, endHeight, closedBottom, closedTop, includeSides, curvatureResolution) {\n    var _this;\n    _classCallCheck(this, ConicPolygonBufferGeometry);\n    _this = _callSuper(this, ConicPolygonBufferGeometry);\n    _this.type = 'ConicPolygonBufferGeometry';\n    _this.parameters = {\n      polygonGeoJson: polygonGeoJson,\n      startHeight: startHeight,\n      endHeight: endHeight,\n      closedBottom: closedBottom,\n      closedTop: closedTop,\n      includeSides: includeSides,\n      curvatureResolution: curvatureResolution\n    };\n\n    // defaults\n    startHeight = startHeight || 0;\n    endHeight = endHeight || 1;\n    closedBottom = closedBottom !== undefined ? closedBottom : true;\n    closedTop = closedTop !== undefined ? closedTop : true;\n    includeSides = includeSides !== undefined ? includeSides : true;\n    curvatureResolution = curvatureResolution || 5; // in angular degrees\n\n    // pre-calculate contour, triangulation and UV maps\n    var _geoPolygonTriangulat = geoPolygonTriangulate(polygonGeoJson, {\n        resolution: curvatureResolution\n      }),\n      contour = _geoPolygonTriangulat.contour,\n      triangles = _geoPolygonTriangulat.triangles;\n    var flatUvs = merge(triangles.uvs);\n    var vertices = [];\n    var uvs = [];\n    var indices = [];\n    var groupCnt = 0; // add groups to apply different materials to torso / caps\n\n    var addGroup = function addGroup(groupData) {\n      var prevVertCnt = Math.round(vertices.length / 3);\n      var prevIndCnt = indices.length;\n      vertices = vertices.concat(groupData.vertices);\n      uvs = uvs.concat(groupData.uvs);\n      indices = indices.concat(!prevVertCnt ? groupData.indices : groupData.indices.map(function (ind) {\n        return ind + prevVertCnt;\n      }));\n      _this.addGroup(prevIndCnt, indices.length - prevIndCnt, groupCnt++);\n    };\n    includeSides && addGroup(generateTorso());\n    closedBottom && addGroup(generateCap(startHeight, false));\n    closedTop && addGroup(generateCap(endHeight, true));\n\n    // build geometry\n    _this.setIndex(indices);\n    _this[setAttributeFn]('position', new THREE.Float32BufferAttribute(vertices, 3));\n    _this[setAttributeFn]('uv', new THREE.Float32BufferAttribute(uvs, 2));\n\n    // auto-calculate normals\n    _this.computeVertexNormals();\n\n    //\n\n    function generateVertices(polygon, altitude) {\n      var coords3d = polygon.map(function (coords) {\n        return coords.map(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            lng = _ref2[0],\n            lat = _ref2[1];\n          return polar2Cartesian(lat, lng, altitude);\n        });\n      });\n      // returns { vertices, holes, coordinates }. Each point generates 3 vertice items (x,y,z).\n      return earcut.flatten(coords3d);\n    }\n    function generateTorso() {\n      var _generateVertices = generateVertices(contour, startHeight),\n        bottomVerts = _generateVertices.vertices,\n        holes = _generateVertices.holes;\n      var _generateVertices2 = generateVertices(contour, endHeight),\n        topVerts = _generateVertices2.vertices;\n      var vertices = merge([topVerts, bottomVerts]);\n      var numPoints = Math.round(topVerts.length / 3);\n      var holesIdx = new Set(holes);\n      var lastHoleIdx = 0;\n      var indices = [];\n      for (var v0Idx = 0; v0Idx < numPoints; v0Idx++) {\n        var v1Idx = v0Idx + 1; // next point\n        if (v1Idx === numPoints) {\n          v1Idx = lastHoleIdx; // close final loop\n        } else if (holesIdx.has(v1Idx)) {\n          var holeIdx = v1Idx;\n          v1Idx = lastHoleIdx; // close hole loop\n          lastHoleIdx = holeIdx;\n        }\n\n        // Each pair of coords generates two triangles (faces)\n        indices.push(v0Idx, v0Idx + numPoints, v1Idx + numPoints);\n        indices.push(v1Idx + numPoints, v1Idx, v0Idx);\n      }\n      var uvs = []; // wrap texture around perimeter (u), with v=1 on top\n      for (var v = 1; v >= 0; v--) for (var i = 0; i < numPoints; i += 1) uvs.push(i / (numPoints - 1), v);\n      return {\n        indices: indices,\n        vertices: vertices,\n        uvs: uvs\n      };\n    }\n    function generateCap(radius) {\n      var isTop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return {\n        // need to reverse-wind the bottom triangles to make them face outwards\n        indices: isTop ? triangles.indices : triangles.indices.slice().reverse(),\n        vertices: generateVertices([triangles.points], radius).vertices,\n        uvs: flatUvs\n      };\n    }\n    return _this;\n  }\n  return _createClass(ConicPolygonBufferGeometry);\n}(THREE.BufferGeometry); //\nfunction polar2Cartesian(lat, lng) {\n  var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var phi = (90 - lat) * Math.PI / 180;\n  var theta = (90 - lng) * Math.PI / 180;\n  return [r * Math.sin(phi) * Math.cos(theta),\n  // x\n  r * Math.cos(phi),\n  // y\n  r * Math.sin(phi) * Math.sin(theta) // z\n  ];\n}\n\nexport { ConicPolygonBufferGeometry, ConicPolygonBufferGeometry as ConicPolygonGeometry };\n","import { Box3, BufferGeometry, Float32BufferAttribute, InstancedBufferGeometry, InstancedInterleavedBuffer, InterleavedBufferAttribute, Sphere, Vector3, WireframeGeometry, ShaderLib, ShaderMaterial, UniformsLib, UniformsUtils, Vector2, Line3, MathUtils, Matrix4, Mesh, Vector4 } from 'three';\n\nconst THREE$2 = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n: {\n  Box3,\n  BufferGeometry,\n  Float32BufferAttribute,\n  InstancedBufferGeometry,\n  InstancedInterleavedBuffer,\n  InterleavedBufferAttribute,\n  Sphere,\n  Vector3,\n  WireframeGeometry\n};\n\n// support multiple method names for backwards threejs compatibility\nvar setAttributeFn$1 = new THREE$2.BufferGeometry().setAttribute ? 'setAttribute' : 'addAttribute';\nconst _box$1 = new THREE$2.Box3();\nconst _vector = new THREE$2.Vector3();\nclass LineSegmentsGeometry extends THREE$2.InstancedBufferGeometry {\n  constructor() {\n    super();\n    this.type = 'LineSegmentsGeometry';\n    const positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];\n    const uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];\n    const index = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];\n    this.setIndex(index);\n    this[setAttributeFn$1]('position', new THREE$2.Float32BufferAttribute(positions, 3));\n    this[setAttributeFn$1]('uv', new THREE$2.Float32BufferAttribute(uvs, 2));\n  }\n  applyMatrix4(matrix) {\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== undefined) {\n      start.applyMatrix4(matrix);\n      end.applyMatrix4(matrix);\n      start.needsUpdate = true;\n    }\n    if (this.boundingBox !== null) {\n      this.computeBoundingBox();\n    }\n    if (this.boundingSphere !== null) {\n      this.computeBoundingSphere();\n    }\n    return this;\n  }\n  setPositions(array) {\n    let lineSegments;\n    if (array instanceof Float32Array) {\n      lineSegments = array;\n    } else if (Array.isArray(array)) {\n      lineSegments = new Float32Array(array);\n    }\n    const instanceBuffer = new THREE$2.InstancedInterleavedBuffer(lineSegments, 6, 1); // xyz, xyz\n\n    this[setAttributeFn$1]('instanceStart', new THREE$2.InterleavedBufferAttribute(instanceBuffer, 3, 0)); // xyz\n\n    this[setAttributeFn$1]('instanceEnd', new THREE$2.InterleavedBufferAttribute(instanceBuffer, 3, 3)); // xyz\n    //\n\n    this.computeBoundingBox();\n    this.computeBoundingSphere();\n    return this;\n  }\n  setColors(array) {\n    let colors;\n    if (array instanceof Float32Array) {\n      colors = array;\n    } else if (Array.isArray(array)) {\n      colors = new Float32Array(array);\n    }\n    const instanceColorBuffer = new THREE$2.InstancedInterleavedBuffer(colors, 6, 1); // rgb, rgb\n\n    this[setAttributeFn$1]('instanceColorStart', new THREE$2.InterleavedBufferAttribute(instanceColorBuffer, 3, 0)); // rgb\n\n    this[setAttributeFn$1]('instanceColorEnd', new THREE$2.InterleavedBufferAttribute(instanceColorBuffer, 3, 3)); // rgb\n\n    return this;\n  }\n  fromWireframeGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  fromEdgesGeometry(geometry) {\n    this.setPositions(geometry.attributes.position.array);\n    return this;\n  }\n  fromMesh(mesh) {\n    this.fromWireframeGeometry(new THREE$2.WireframeGeometry(mesh.geometry)); // set colors, maybe\n\n    return this;\n  }\n  fromLineSegments(lineSegments) {\n    const geometry = lineSegments.geometry;\n    if (geometry.isGeometry) {\n      console.error('LineSegmentsGeometry no longer supports Geometry. Use THREE.BufferGeometry instead.');\n      return;\n    } else if (geometry.isBufferGeometry) {\n      this.setPositions(geometry.attributes.position.array); // assumes non-indexed\n    } // set colors, maybe\n\n    return this;\n  }\n  computeBoundingBox() {\n    if (this.boundingBox === null) {\n      this.boundingBox = new THREE$2.Box3();\n    }\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== undefined && end !== undefined) {\n      this.boundingBox.setFromBufferAttribute(start);\n      _box$1.setFromBufferAttribute(end);\n      this.boundingBox.union(_box$1);\n    }\n  }\n  computeBoundingSphere() {\n    if (this.boundingSphere === null) {\n      this.boundingSphere = new THREE$2.Sphere();\n    }\n    if (this.boundingBox === null) {\n      this.computeBoundingBox();\n    }\n    const start = this.attributes.instanceStart;\n    const end = this.attributes.instanceEnd;\n    if (start !== undefined && end !== undefined) {\n      const center = this.boundingSphere.center;\n      this.boundingBox.getCenter(center);\n      let maxRadiusSq = 0;\n      for (let i = 0, il = start.count; i < il; i++) {\n        _vector.fromBufferAttribute(start, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n        _vector.fromBufferAttribute(end, i);\n        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector));\n      }\n      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);\n      if (isNaN(this.boundingSphere.radius)) {\n        console.error('THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.', this);\n      }\n    }\n  }\n  toJSON() {// todo\n  }\n  applyMatrix(matrix) {\n    console.warn('THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().');\n    return this.applyMatrix4(matrix);\n  }\n}\nLineSegmentsGeometry.prototype.isLineSegmentsGeometry = true;\n\n/**\n * parameters = {\n *  color: <hex>,\n *  linewidth: <float>,\n *  dashed: <boolean>,\n *  dashScale: <float>,\n *  dashSize: <float>,\n *  dashOffset: <float>,\n *  gapSize: <float>,\n *  resolution: <Vector2>, // to be set by renderer\n * }\n */\n\nconst THREE$1 = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n: {\n  ShaderLib,\n  ShaderMaterial,\n  UniformsLib,\n  UniformsUtils,\n  Vector2\n};\nTHREE$1.UniformsLib.line = {\n  worldUnits: {\n    value: 1\n  },\n  linewidth: {\n    value: 1\n  },\n  resolution: {\n    value: new THREE$1.Vector2(1, 1)\n  },\n  dashScale: {\n    value: 1\n  },\n  dashSize: {\n    value: 1\n  },\n  dashOffset: {\n    value: 0\n  },\n  gapSize: {\n    value: 1\n  } // todo FIX - maybe change to totalSize\n};\nTHREE$1.ShaderLib['line'] = {\n  uniforms: THREE$1.UniformsUtils.merge([THREE$1.UniformsLib.common, THREE$1.UniformsLib.fog, THREE$1.UniformsLib.line]),\n  vertexShader: /* glsl */\n  `\n\t\t#include <common>\n\t\t#include <color_pars_vertex>\n\t\t#include <fog_pars_vertex>\n\t\t#include <logdepthbuf_pars_vertex>\n\t\t#include <clipping_planes_pars_vertex>\n\n\t\tuniform float linewidth;\n\t\tuniform vec2 resolution;\n\n\t\tattribute vec3 instanceStart;\n\t\tattribute vec3 instanceEnd;\n\n\t\tattribute vec3 instanceColorStart;\n\t\tattribute vec3 instanceColorEnd;\n\n\t\tvarying vec2 vUv;\n\t\tvarying vec4 worldPos;\n\t\tvarying vec3 worldStart;\n\t\tvarying vec3 worldEnd;\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashScale;\n\t\t\tattribute float instanceDistanceStart;\n\t\t\tattribute float instanceDistanceEnd;\n\t\t\tvarying float vLineDistance;\n\n\t\t#endif\n\n\t\tvoid trimSegment( const in vec4 start, inout vec4 end ) {\n\n\t\t\t// trim end segment so it terminates between the camera plane and the near plane\n\n\t\t\t// conservative estimate of the near plane\n\t\t\tfloat a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column\n\t\t\tfloat b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column\n\t\t\tfloat nearEstimate = - 0.5 * b / a;\n\n\t\t\tfloat alpha = ( nearEstimate - start.z ) / ( end.z - start.z );\n\n\t\t\tend.xyz = mix( start.xyz, end.xyz, alpha );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#ifdef USE_COLOR\n\n\t\t\t\tvColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;\n\n\t\t\t#endif\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tvLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;\n\n\t\t\t#endif\n\n\t\t\tfloat aspect = resolution.x / resolution.y;\n\n\t\t\tvUv = uv;\n\n\t\t\t// camera space\n\t\t\tvec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );\n\t\t\tvec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );\n\n\t\t\tworldStart = start.xyz;\n\t\t\tworldEnd = end.xyz;\n\n\t\t\t// special case for perspective projection, and segments that terminate either in, or behind, the camera plane\n\t\t\t// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space\n\t\t\t// but we need to perform ndc-space calculations in the shader, so we must address this issue directly\n\t\t\t// perhaps there is a more elegant solution -- WestLangley\n\n\t\t\tbool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column\n\n\t\t\tif ( perspective ) {\n\n\t\t\t\tif ( start.z < 0.0 && end.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( start, end );\n\n\t\t\t\t} else if ( end.z < 0.0 && start.z >= 0.0 ) {\n\n\t\t\t\t\ttrimSegment( end, start );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// clip space\n\t\t\tvec4 clipStart = projectionMatrix * start;\n\t\t\tvec4 clipEnd = projectionMatrix * end;\n\n\t\t\t// ndc space\n\t\t\tvec3 ndcStart = clipStart.xyz / clipStart.w;\n\t\t\tvec3 ndcEnd = clipEnd.xyz / clipEnd.w;\n\n\t\t\t// direction\n\t\t\tvec2 dir = ndcEnd.xy - ndcStart.xy;\n\n\t\t\t// account for clip-space aspect ratio\n\t\t\tdir.x *= aspect;\n\t\t\tdir = normalize( dir );\n\n\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t// get the offset direction as perpendicular to the view vector\n\t\t\t\tvec3 worldDir = normalize( end.xyz - start.xyz );\n\t\t\t\tvec3 offset;\n\t\t\t\tif ( position.y < 0.5 ) {\n\n\t\t\t\t\toffset = normalize( cross( start.xyz, worldDir ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\toffset = normalize( cross( end.xyz, worldDir ) );\n\n\t\t\t\t}\n\n\t\t\t\t// sign flip\n\t\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t\tfloat forwardOffset = dot( worldDir, vec3( 0.0, 0.0, 1.0 ) );\n\n\t\t\t\t// don't extend the line if we're rendering dashes because we\n\t\t\t\t// won't be rendering the endcaps\n\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t// extend the line bounds to encompass  endcaps\n\t\t\t\t\tstart.xyz += - worldDir * linewidth * 0.5;\n\t\t\t\t\tend.xyz += worldDir * linewidth * 0.5;\n\n\t\t\t\t\t// shift the position of the quad so it hugs the forward edge of the line\n\t\t\t\t\toffset.xy -= dir * forwardOffset;\n\t\t\t\t\toffset.z += 0.5;\n\n\t\t\t\t#endif\n\n\t\t\t\t// endcaps\n\t\t\t\tif ( position.y > 1.0 || position.y < 0.0 ) {\n\n\t\t\t\t\toffset.xy += dir * 2.0 * forwardOffset;\n\n\t\t\t\t}\n\n\t\t\t\t// adjust for linewidth\n\t\t\t\toffset *= linewidth * 0.5;\n\n\t\t\t\t// set the world position\n\t\t\t\tworldPos = ( position.y < 0.5 ) ? start : end;\n\t\t\t\tworldPos.xyz += offset;\n\n\t\t\t\t// project the worldpos\n\t\t\t\tvec4 clip = projectionMatrix * worldPos;\n\n\t\t\t\t// shift the depth of the projected points so the line\n\t\t\t\t// segements overlap neatly\n\t\t\t\tvec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;\n\t\t\t\tclip.z = clipPose.z * clip.w;\n\n\t\t\t#else\n\n\t\t\tvec2 offset = vec2( dir.y, - dir.x );\n\t\t\t// undo aspect ratio adjustment\n\t\t\tdir.x /= aspect;\n\t\t\toffset.x /= aspect;\n\n\t\t\t// sign flip\n\t\t\tif ( position.x < 0.0 ) offset *= - 1.0;\n\n\t\t\t// endcaps\n\t\t\tif ( position.y < 0.0 ) {\n\n\t\t\t\toffset += - dir;\n\n\t\t\t} else if ( position.y > 1.0 ) {\n\n\t\t\t\toffset += dir;\n\n\t\t\t}\n\n\t\t\t// adjust for linewidth\n\t\t\toffset *= linewidth;\n\n\t\t\t// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...\n\t\t\toffset /= resolution.y;\n\n\t\t\t// select end\n\t\t\tvec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;\n\n\t\t\t// back to clip space\n\t\t\toffset *= clip.w;\n\n\t\t\tclip.xy += offset;\n\n\t\t\t#endif\n\n\t\t\tgl_Position = clip;\n\n\t\t\tvec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation\n\n\t\t\t#include <logdepthbuf_vertex>\n\t\t\t#include <clipping_planes_vertex>\n\t\t\t#include <fog_vertex>\n\n\t\t}\n\t\t`,\n  fragmentShader: /* glsl */\n  `\n\t\tuniform vec3 diffuse;\n\t\tuniform float opacity;\n\t\tuniform float linewidth;\n\n\t\t#ifdef USE_DASH\n\n\t\t\tuniform float dashOffset;\n\t\t\tuniform float dashSize;\n\t\t\tuniform float gapSize;\n\n\t\t#endif\n\n\t\tvarying float vLineDistance;\n\t\tvarying vec4 worldPos;\n\t\tvarying vec3 worldStart;\n\t\tvarying vec3 worldEnd;\n\n\t\t#include <common>\n\t\t#include <color_pars_fragment>\n\t\t#include <fog_pars_fragment>\n\t\t#include <logdepthbuf_pars_fragment>\n\t\t#include <clipping_planes_pars_fragment>\n\n\t\tvarying vec2 vUv;\n\n\t\tvec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {\n\n\t\t\tfloat mua;\n\t\t\tfloat mub;\n\n\t\t\tvec3 p13 = p1 - p3;\n\t\t\tvec3 p43 = p4 - p3;\n\n\t\t\tvec3 p21 = p2 - p1;\n\n\t\t\tfloat d1343 = dot( p13, p43 );\n\t\t\tfloat d4321 = dot( p43, p21 );\n\t\t\tfloat d1321 = dot( p13, p21 );\n\t\t\tfloat d4343 = dot( p43, p43 );\n\t\t\tfloat d2121 = dot( p21, p21 );\n\n\t\t\tfloat denom = d2121 * d4343 - d4321 * d4321;\n\n\t\t\tfloat numer = d1343 * d4321 - d1321 * d4343;\n\n\t\t\tmua = numer / denom;\n\t\t\tmua = clamp( mua, 0.0, 1.0 );\n\t\t\tmub = ( d1343 + d4321 * ( mua ) ) / d4343;\n\t\t\tmub = clamp( mub, 0.0, 1.0 );\n\n\t\t\treturn vec2( mua, mub );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#include <clipping_planes_fragment>\n\n\t\t\t#ifdef USE_DASH\n\n\t\t\t\tif ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps\n\n\t\t\t\tif ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX\n\n\t\t\t#endif\n\n\t\t\tfloat alpha = opacity;\n\n\t\t\t#ifdef WORLD_UNITS\n\n\t\t\t\t// Find the closest points on the view ray and the line segment\n\t\t\t\tvec3 rayEnd = normalize( worldPos.xyz ) * 1e5;\n\t\t\t\tvec3 lineDir = worldEnd - worldStart;\n\t\t\t\tvec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );\n\n\t\t\t\tvec3 p1 = worldStart + lineDir * params.x;\n\t\t\t\tvec3 p2 = rayEnd * params.y;\n\t\t\t\tvec3 delta = p1 - p2;\n\t\t\t\tfloat len = length( delta );\n\t\t\t\tfloat norm = len / linewidth;\n\n\t\t\t\t#ifndef USE_DASH\n\n\t\t\t\t\t#ifdef ALPHA_TO_COVERAGE\n\n\t\t\t\t\t\tfloat dnorm = fwidth( norm );\n\t\t\t\t\t\talpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );\n\n\t\t\t\t\t#else\n\n\t\t\t\t\t\tif ( norm > 0.5 ) {\n\n\t\t\t\t\t\t\tdiscard;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t#endif\n\n\t\t\t#endif\n\n\t\t\t#else\n\n\t\t\t\t#ifdef ALPHA_TO_COVERAGE\n\n\t\t\t\t\t// artifacts appear on some hardware if a derivative is taken within a conditional\n\t\t\t\t\tfloat a = vUv.x;\n\t\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\t\tfloat len2 = a * a + b * b;\n\t\t\t\t\tfloat dlen = fwidth( len2 );\n\n\t\t\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\t\t\talpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t#else\n\n\t\t\tif ( abs( vUv.y ) > 1.0 ) {\n\n\t\t\t\tfloat a = vUv.x;\n\t\t\t\tfloat b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;\n\t\t\t\tfloat len2 = a * a + b * b;\n\n\t\t\t\tif ( len2 > 1.0 ) discard;\n\n\t\t\t}\n\n\t\t\t\t#endif\n\n\t\t\t#endif\n\n\t\t\tvec4 diffuseColor = vec4( diffuse, alpha );\n\n\t\t\t#include <logdepthbuf_fragment>\n\t\t\t#include <color_fragment>\n\n\t\t\tgl_FragColor = vec4( diffuseColor.rgb, alpha );\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <colorspace_fragment>\n\t\t\t#include <fog_fragment>\n\t\t\t#include <premultiplied_alpha_fragment>\n\n\t\t}\n\t\t`\n};\nclass LineMaterial extends THREE$1.ShaderMaterial {\n  constructor(parameters) {\n    super({\n      type: 'LineMaterial',\n      uniforms: THREE$1.UniformsUtils.clone(THREE$1.ShaderLib['line'].uniforms),\n      vertexShader: THREE$1.ShaderLib['line'].vertexShader,\n      fragmentShader: THREE$1.ShaderLib['line'].fragmentShader,\n      clipping: true // required for clipping support\n    });\n    Object.defineProperties(this, {\n      color: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.diffuse.value;\n        },\n        set: function (value) {\n          this.uniforms.diffuse.value = value;\n        }\n      },\n      worldUnits: {\n        enumerable: true,\n        get: function () {\n          return 'WORLD_UNITS' in this.defines;\n        },\n        set: function (value) {\n          if (value === true) {\n            this.defines.WORLD_UNITS = '';\n          } else {\n            delete this.defines.WORLD_UNITS;\n          }\n        }\n      },\n      linewidth: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.linewidth.value;\n        },\n        set: function (value) {\n          this.uniforms.linewidth.value = value;\n        }\n      },\n      dashed: {\n        enumerable: true,\n        get: function () {\n          return Boolean('USE_DASH' in this.defines);\n        },\n        set(value) {\n          if (Boolean(value) !== Boolean('USE_DASH' in this.defines)) {\n            this.needsUpdate = true;\n          }\n          if (value === true) {\n            this.defines.USE_DASH = '';\n          } else {\n            delete this.defines.USE_DASH;\n          }\n        }\n      },\n      dashScale: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.dashScale.value;\n        },\n        set: function (value) {\n          this.uniforms.dashScale.value = value;\n        }\n      },\n      dashSize: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.dashSize.value;\n        },\n        set: function (value) {\n          this.uniforms.dashSize.value = value;\n        }\n      },\n      dashOffset: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.dashOffset.value;\n        },\n        set: function (value) {\n          this.uniforms.dashOffset.value = value;\n        }\n      },\n      gapSize: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.gapSize.value;\n        },\n        set: function (value) {\n          this.uniforms.gapSize.value = value;\n        }\n      },\n      opacity: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.opacity.value;\n        },\n        set: function (value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      resolution: {\n        enumerable: true,\n        get: function () {\n          return this.uniforms.resolution.value;\n        },\n        set: function (value) {\n          this.uniforms.resolution.value.copy(value);\n        }\n      },\n      alphaToCoverage: {\n        enumerable: true,\n        get: function () {\n          return Boolean('ALPHA_TO_COVERAGE' in this.defines);\n        },\n        set: function (value) {\n          if (Boolean(value) !== Boolean('ALPHA_TO_COVERAGE' in this.defines)) {\n            this.needsUpdate = true;\n          }\n          if (value === true) {\n            this.defines.ALPHA_TO_COVERAGE = '';\n            this.extensions.derivatives = true;\n          } else {\n            delete this.defines.ALPHA_TO_COVERAGE;\n            this.extensions.derivatives = false;\n          }\n        }\n      }\n    });\n    this.setValues(parameters);\n  }\n}\nLineMaterial.prototype.isLineMaterial = true;\n\nconst THREE = window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n: {\n  Box3,\n  BufferGeometry,\n  InstancedInterleavedBuffer,\n  InterleavedBufferAttribute,\n  Line3,\n  MathUtils,\n  Matrix4,\n  Mesh,\n  Sphere,\n  Vector3,\n  Vector4\n};\n\n// support both modes for backwards threejs compatibility\nvar setAttributeFn = new THREE.BufferGeometry().setAttribute ? 'setAttribute' : 'addAttribute';\nconst _start = new THREE.Vector3();\nconst _end = new THREE.Vector3();\nconst _start4 = new THREE.Vector4();\nconst _end4 = new THREE.Vector4();\nconst _ssOrigin = new THREE.Vector4();\nconst _ssOrigin3 = new THREE.Vector3();\nconst _mvMatrix = new THREE.Matrix4();\nconst _line = new THREE.Line3();\nconst _closestPoint = new THREE.Vector3();\nconst _box = new THREE.Box3();\nconst _sphere = new THREE.Sphere();\nconst _clipToWorldVector = new THREE.Vector4();\nclass LineSegments2 extends THREE.Mesh {\n  constructor(geometry = new LineSegmentsGeometry(), material = new LineMaterial({\n    color: Math.random() * 0xffffff\n  })) {\n    super(geometry, material);\n    this.type = 'LineSegments2';\n  } // for backwards-compatability, but could be a method of LineSegmentsGeometry...\n\n  computeLineDistances() {\n    const geometry = this.geometry;\n    const instanceStart = geometry.attributes.instanceStart;\n    const instanceEnd = geometry.attributes.instanceEnd;\n    const lineDistances = new Float32Array(2 * instanceStart.count);\n    for (let i = 0, j = 0, l = instanceStart.count; i < l; i++, j += 2) {\n      _start.fromBufferAttribute(instanceStart, i);\n      _end.fromBufferAttribute(instanceEnd, i);\n      lineDistances[j] = j === 0 ? 0 : lineDistances[j - 1];\n      lineDistances[j + 1] = lineDistances[j] + _start.distanceTo(_end);\n    }\n    const instanceDistanceBuffer = new THREE.InstancedInterleavedBuffer(lineDistances, 2, 1); // d0, d1\n\n    geometry[setAttributeFn]('instanceDistanceStart', new THREE.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0)); // d0\n\n    geometry[setAttributeFn]('instanceDistanceEnd', new THREE.InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1)); // d1\n\n    return this;\n  }\n  raycast(raycaster, intersects) {\n    if (raycaster.camera === null) {\n      console.error('LineSegments2: \"Raycaster.camera\" needs to be set in order to raycast against LineSegments2.');\n    }\n    const threshold = raycaster.params.Line2 !== undefined ? raycaster.params.Line2.threshold || 0 : 0;\n    const ray = raycaster.ray;\n    const camera = raycaster.camera;\n    const projectionMatrix = camera.projectionMatrix;\n    const matrixWorld = this.matrixWorld;\n    const geometry = this.geometry;\n    const material = this.material;\n    const resolution = material.resolution;\n    const lineWidth = material.linewidth + threshold;\n    const instanceStart = geometry.attributes.instanceStart;\n    const instanceEnd = geometry.attributes.instanceEnd; // camera forward is negative\n\n    const near = -camera.near; // clip space is [ - 1, 1 ] so multiply by two to get the full\n    // width in clip space\n\n    const ssMaxWidth = 2.0 * Math.max(lineWidth / resolution.width, lineWidth / resolution.height); //\n    // check if we intersect the sphere bounds\n\n    if (geometry.boundingSphere === null) {\n      geometry.computeBoundingSphere();\n    }\n    _sphere.copy(geometry.boundingSphere).applyMatrix4(matrixWorld);\n    const distanceToSphere = Math.max(camera.near, _sphere.distanceToPoint(ray.origin)); // get the w component to scale the world space line width\n\n    _clipToWorldVector.set(0, 0, -distanceToSphere, 1.0).applyMatrix4(camera.projectionMatrix);\n    _clipToWorldVector.multiplyScalar(1.0 / _clipToWorldVector.w);\n    _clipToWorldVector.applyMatrix4(camera.projectionMatrixInverse); // increase the sphere bounds by the worst case line screen space width\n\n    const sphereMargin = Math.abs(ssMaxWidth / _clipToWorldVector.w) * 0.5;\n    _sphere.radius += sphereMargin;\n    if (raycaster.ray.intersectsSphere(_sphere) === false) {\n      return;\n    } //\n    // check if we intersect the box bounds\n\n    if (geometry.boundingBox === null) {\n      geometry.computeBoundingBox();\n    }\n    _box.copy(geometry.boundingBox).applyMatrix4(matrixWorld);\n    const distanceToBox = Math.max(camera.near, _box.distanceToPoint(ray.origin)); // get the w component to scale the world space line width\n\n    _clipToWorldVector.set(0, 0, -distanceToBox, 1.0).applyMatrix4(camera.projectionMatrix);\n    _clipToWorldVector.multiplyScalar(1.0 / _clipToWorldVector.w);\n    _clipToWorldVector.applyMatrix4(camera.projectionMatrixInverse); // increase the sphere bounds by the worst case line screen space width\n\n    const boxMargin = Math.abs(ssMaxWidth / _clipToWorldVector.w) * 0.5;\n    _box.max.x += boxMargin;\n    _box.max.y += boxMargin;\n    _box.max.z += boxMargin;\n    _box.min.x -= boxMargin;\n    _box.min.y -= boxMargin;\n    _box.min.z -= boxMargin;\n    if (raycaster.ray.intersectsBox(_box) === false) {\n      return;\n    } //\n    // pick a point 1 unit out along the ray to avoid the ray origin\n    // sitting at the camera origin which will cause \"w\" to be 0 when\n    // applying the projection matrix.\n\n    ray.at(1, _ssOrigin); // ndc space [ - 1.0, 1.0 ]\n\n    _ssOrigin.w = 1;\n    _ssOrigin.applyMatrix4(camera.matrixWorldInverse);\n    _ssOrigin.applyMatrix4(projectionMatrix);\n    _ssOrigin.multiplyScalar(1 / _ssOrigin.w); // screen space\n\n    _ssOrigin.x *= resolution.x / 2;\n    _ssOrigin.y *= resolution.y / 2;\n    _ssOrigin.z = 0;\n    _ssOrigin3.copy(_ssOrigin);\n    _mvMatrix.multiplyMatrices(camera.matrixWorldInverse, matrixWorld);\n    for (let i = 0, l = instanceStart.count; i < l; i++) {\n      _start4.fromBufferAttribute(instanceStart, i);\n      _end4.fromBufferAttribute(instanceEnd, i);\n      _start4.w = 1;\n      _end4.w = 1; // camera space\n\n      _start4.applyMatrix4(_mvMatrix);\n      _end4.applyMatrix4(_mvMatrix); // skip the segment if it's entirely behind the camera\n\n      var isBehindCameraNear = _start4.z > near && _end4.z > near;\n      if (isBehindCameraNear) {\n        continue;\n      } // trim the segment if it extends behind camera near\n\n      if (_start4.z > near) {\n        const deltaDist = _start4.z - _end4.z;\n        const t = (_start4.z - near) / deltaDist;\n        _start4.lerp(_end4, t);\n      } else if (_end4.z > near) {\n        const deltaDist = _end4.z - _start4.z;\n        const t = (_end4.z - near) / deltaDist;\n        _end4.lerp(_start4, t);\n      } // clip space\n\n      _start4.applyMatrix4(projectionMatrix);\n      _end4.applyMatrix4(projectionMatrix); // ndc space [ - 1.0, 1.0 ]\n\n      _start4.multiplyScalar(1 / _start4.w);\n      _end4.multiplyScalar(1 / _end4.w); // screen space\n\n      _start4.x *= resolution.x / 2;\n      _start4.y *= resolution.y / 2;\n      _end4.x *= resolution.x / 2;\n      _end4.y *= resolution.y / 2; // create 2d segment\n\n      _line.start.copy(_start4);\n      _line.start.z = 0;\n      _line.end.copy(_end4);\n      _line.end.z = 0; // get closest point on ray to segment\n\n      const param = _line.closestPointToPointParameter(_ssOrigin3, true);\n      _line.at(param, _closestPoint); // check if the intersection point is within clip space\n\n      const zPos = THREE.MathUtils.lerp(_start4.z, _end4.z, param);\n      const isInClipSpace = zPos >= -1 && zPos <= 1;\n      const isInside = _ssOrigin3.distanceTo(_closestPoint) < lineWidth * 0.5;\n      if (isInClipSpace && isInside) {\n        _line.start.fromBufferAttribute(instanceStart, i);\n        _line.end.fromBufferAttribute(instanceEnd, i);\n        _line.start.applyMatrix4(matrixWorld);\n        _line.end.applyMatrix4(matrixWorld);\n        const pointOnLine = new THREE.Vector3();\n        const point = new THREE.Vector3();\n        ray.distanceSqToSegment(_line.start, _line.end, point, pointOnLine);\n        intersects.push({\n          point: point,\n          pointOnLine: pointOnLine,\n          distance: ray.origin.distanceTo(point),\n          object: this,\n          face: null,\n          faceIndex: i,\n          uv: null,\n          uv2: null\n        });\n      }\n    }\n  }\n}\nLineSegments2.prototype.LineSegments2 = true;\n\nclass LineGeometry extends LineSegmentsGeometry {\n  constructor() {\n    super();\n    this.type = 'LineGeometry';\n  }\n  setPositions(array) {\n    // converts [ x1, y1, z1,  x2, y2, z2, ... ] to pairs format\n    var length = array.length - 3;\n    var points = new Float32Array(2 * length);\n    for (var i = 0; i < length; i += 3) {\n      points[2 * i] = array[i];\n      points[2 * i + 1] = array[i + 1];\n      points[2 * i + 2] = array[i + 2];\n      points[2 * i + 3] = array[i + 3];\n      points[2 * i + 4] = array[i + 4];\n      points[2 * i + 5] = array[i + 5];\n    }\n    super.setPositions(points);\n    return this;\n  }\n  setColors(array) {\n    // converts [ r1, g1, b1,  r2, g2, b2, ... ] to pairs format\n    var length = array.length - 3;\n    var colors = new Float32Array(2 * length);\n    for (var i = 0; i < length; i += 3) {\n      colors[2 * i] = array[i];\n      colors[2 * i + 1] = array[i + 1];\n      colors[2 * i + 2] = array[i + 2];\n      colors[2 * i + 3] = array[i + 3];\n      colors[2 * i + 4] = array[i + 4];\n      colors[2 * i + 5] = array[i + 5];\n    }\n    super.setColors(colors);\n    return this;\n  }\n  fromLine(line) {\n    var geometry = line.geometry;\n    if (geometry.isGeometry) {\n      console.error('THREE.LineGeometry no longer supports Geometry. Use THREE.BufferGeometry instead.');\n      return;\n    } else if (geometry.isBufferGeometry) {\n      this.setPositions(geometry.attributes.position.array); // assumes non-indexed\n    } // set colors, maybe\n\n    return this;\n  }\n}\nLineGeometry.prototype.isLineGeometry = true;\n\nclass Line2 extends LineSegments2 {\n  constructor(geometry = new LineGeometry(), material = new LineMaterial({\n    color: Math.random() * 0xffffff\n  })) {\n    super(geometry, material);\n    this.type = 'Line2';\n  }\n}\nLine2.prototype.isLine2 = true;\n\nexport { Line2, LineGeometry, LineMaterial, LineSegments2, LineSegmentsGeometry };\n","\nexport default function earcut(data, holeIndices, dim = 2) {\n\n    const hasHoles = holeIndices && holeIndices.length;\n    const outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n    let outerNode = linkedList(data, 0, outerLen, dim, true);\n    const triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    let minX, minY, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = Infinity;\n        minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (let i = dim; i < outerLen; i += dim) {\n            const x = data[i];\n            const y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 32767 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    let last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (let i = start; i < end; i += dim) last = insertNode(i / dim | 0, data[i], data[i + 1], last);\n    } else {\n        for (let i = end - dim; i >= start; i -= dim) last = insertNode(i / dim | 0, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    let p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    let stop = ear;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        const prev = ear.prev;\n        const next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            triangles.push(prev.i, ear.i, next.i); // cut off the triangle\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n            // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n            // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    const a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    const x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    let p = c.next;\n    while (p !== a) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    const a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    const ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n    // triangle bbox; min & max are calculated like this for speed\n    const x0 = ax < bx ? (ax < cx ? ax : cx) : (bx < cx ? bx : cx),\n        y0 = ay < by ? (ay < cy ? ay : cy) : (by < cy ? by : cy),\n        x1 = ax > bx ? (ax > cx ? ax : cx) : (bx > cx ? bx : cx),\n        y1 = ay > by ? (ay > cy ? ay : cy) : (by > cy ? by : cy);\n\n    // z-order range for the current triangle bbox;\n    const minZ = zOrder(x0, y0, minX, minY, invSize),\n        maxZ = zOrder(x1, y1, minX, minY, invSize);\n\n    let p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, p.x, p.y) && area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n            pointInTriangle(ax, ay, bx, by, cx, cy, n.x, n.y) && area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles) {\n    let p = start;\n    do {\n        const a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i, p.i, b.i);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    let a = start;\n    do {\n        let b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                let c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize, 0);\n                earcutLinked(c, triangles, dim, minX, minY, invSize, 0);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    const queue = [];\n\n    for (let i = 0, len = holeIndices.length; i < len; i++) {\n        const start = holeIndices[i] * dim;\n        const end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        const list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (let i = 0; i < queue.length; i++) {\n        outerNode = eliminateHole(queue[i], outerNode);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    const bridge = findHoleBridge(hole, outerNode);\n    if (!bridge) {\n        return outerNode;\n    }\n\n    const bridgeReverse = splitPolygon(bridge, hole);\n\n    // filter collinear points around the cuts\n    filterPoints(bridgeReverse, bridgeReverse.next);\n    return filterPoints(bridge, bridge.next);\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    let p = outerNode;\n    const hx = hole.x;\n    const hy = hole.y;\n    let qx = -Infinity;\n    let m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                m = p.x < p.next.x ? p : p.next;\n                if (x === hx) return m; // hole touches outer segment; pick leftmost endpoint\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    const stop = m;\n    const mx = m.x;\n    const my = m.y;\n    let tanMin = Infinity;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n                pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            const tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    let p = start;\n    do {\n        if (p.z === 0) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    let numMerges;\n    let inSize = 1;\n\n    do {\n        let p = list;\n        let e;\n        list = null;\n        let tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            let q = p;\n            let pSize = 0;\n            for (let i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            let qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = (x - minX) * invSize | 0;\n    y = (y - minY) * invSize | 0;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    let p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) >= (ax - px) * (cy - py) &&\n           (ax - px) * (by - py) >= (bx - px) * (ay - py) &&\n           (bx - px) * (cy - py) >= (cx - px) * (by - py);\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n           (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    const o1 = sign(area(p1, q1, p2));\n    const o2 = sign(area(p1, q1, q2));\n    const o3 = sign(area(p2, q2, p1));\n    const o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    let p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n                intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    let p = a;\n    let inside = false;\n    const px = (a.x + b.x) / 2;\n    const py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    const a2 = createNode(a.i, a.x, a.y),\n        b2 = createNode(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    const p = createNode(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction createNode(i, x, y) {\n    return {\n        i, // vertex index in coordinates array\n        x, y, // vertex coordinates\n        prev: null, // previous and next vertex nodes in a polygon ring\n        next: null,\n        z: 0, // z-order curve value\n        prevZ: null, // previous and next nodes in z-order\n        nextZ: null,\n        steiner: false // indicates whether this is a steiner point\n    };\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nexport function deviation(data, holeIndices, dim, triangles) {\n    const hasHoles = holeIndices && holeIndices.length;\n    const outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    let polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (let i = 0, len = holeIndices.length; i < len; i++) {\n            const start = holeIndices[i] * dim;\n            const end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    let trianglesArea = 0;\n    for (let i = 0; i < triangles.length; i += 3) {\n        const a = triangles[i] * dim;\n        const b = triangles[i + 1] * dim;\n        const c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n}\n\nfunction signedArea(data, start, end, dim) {\n    let sum = 0;\n    for (let i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nexport function flatten(data) {\n    const vertices = [];\n    const holes = [];\n    const dimensions = data[0][0].length;\n    let holeIndex = 0;\n    let prevLen = 0;\n\n    for (const ring of data) {\n        for (const p of ring) {\n            for (let d = 0; d < dimensions; d++) vertices.push(p[d]);\n        }\n        if (prevLen) {\n            holeIndex += prevLen;\n            holes.push(holeIndex);\n        }\n        prevLen = ring.length;\n    }\n    return {vertices, holes, dimensions};\n}\n","import { BufferGeometry, Float32BufferAttribute } from 'three';\nimport { flatten } from 'earcut';\nimport { geoDistance, geoInterpolate } from 'd3-geo';\n\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nfunction _arrayWithHoles(r) {\n  if (Array.isArray(r)) return r;\n}\nfunction _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nfunction _callSuper(t, o, e) {\n  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n}\nfunction _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _createClass(e, r, t) {\n  return Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nfunction _createForOfIteratorHelper(r, e) {\n  var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (!t) {\n    if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e) {\n      t && (r = t);\n      var n = 0,\n        F = function () {};\n      return {\n        s: F,\n        n: function () {\n          return n >= r.length ? {\n            done: !0\n          } : {\n            done: !1,\n            value: r[n++]\n          };\n        },\n        e: function (r) {\n          throw r;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var o,\n    a = !0,\n    u = !1;\n  return {\n    s: function () {\n      t = t.call(r);\n    },\n    n: function () {\n      var r = t.next();\n      return a = r.done, r;\n    },\n    e: function (r) {\n      u = !0, o = r;\n    },\n    f: function () {\n      try {\n        a || null == t.return || t.return();\n      } finally {\n        if (u) throw o;\n      }\n    }\n  };\n}\nfunction _getPrototypeOf(t) {\n  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, _getPrototypeOf(t);\n}\nfunction _inherits(t, e) {\n  if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: !0,\n      configurable: !0\n    }\n  }), Object.defineProperty(t, \"prototype\", {\n    writable: !1\n  }), e && _setPrototypeOf(t, e);\n}\nfunction _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function () {\n    return !!t;\n  })();\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _possibleConstructorReturn(t, e) {\n  if (e && (\"object\" == typeof e || \"function\" == typeof e)) return e;\n  if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n  return _assertThisInitialized(t);\n}\nfunction _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nfunction _slicedToArray(r, e) {\n  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\n\nvar interpolateLine = function interpolateLine() {\n  var lineCoords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var maxDegDistance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var result = [];\n  var prevPnt = null;\n  lineCoords.forEach(function (pnt) {\n    if (prevPnt) {\n      var dist = geoDistance(pnt, prevPnt) * 180 / Math.PI;\n      if (dist > maxDegDistance) {\n        var interpol = geoInterpolate(prevPnt, pnt);\n        var tStep = 1 / Math.ceil(dist / maxDegDistance);\n        var t = tStep;\n        while (t < 1) {\n          result.push(interpol(t));\n          t += tStep;\n        }\n      }\n    }\n    result.push(prevPnt = pnt);\n  });\n  return result;\n};\n\nvar THREE = typeof window !== 'undefined' && window.THREE ? window.THREE // Prefer consumption from global THREE, if exists\n: {\n  BufferGeometry: BufferGeometry,\n  Float32BufferAttribute: Float32BufferAttribute\n};\n\n// support both modes for backwards threejs compatibility\nvar setAttributeFn = new THREE.BufferGeometry().setAttribute ? 'setAttribute' : 'addAttribute';\nvar GeoJsonGeometry = /*#__PURE__*/function (_THREE$BufferGeometry) {\n  function GeoJsonGeometry(geoJson) {\n    var _this;\n    var radius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    var resolution = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;\n    _classCallCheck(this, GeoJsonGeometry);\n    _this = _callSuper(this, GeoJsonGeometry);\n    _this.type = 'GeoJsonGeometry';\n    _this.parameters = {\n      geoJson: geoJson,\n      radius: radius,\n      resolution: resolution\n    };\n\n    // process various geometry types\n    var groups = ({\n      Point: genPoint,\n      MultiPoint: genMultiPoint,\n      LineString: genLineString,\n      MultiLineString: genMultiLineString,\n      Polygon: genPolygon,\n      MultiPolygon: genMultiPolygon\n    }[geoJson.type] || function () {\n      return [];\n    })(geoJson.coordinates, radius);\n\n    // concat groups\n    var indices = [],\n      vertices = [];\n    var groupCnt = 0;\n    groups.forEach(function (newG) {\n      var prevIndCnt = indices.length;\n      concatGroup({\n        indices: indices,\n        vertices: vertices\n      }, newG);\n      _this.addGroup(prevIndCnt, indices.length - prevIndCnt, groupCnt++);\n    });\n\n    // build geometry\n    indices.length && _this.setIndex(indices);\n    vertices.length && _this[setAttributeFn]('position', new THREE.Float32BufferAttribute(vertices, 3));\n\n    //\n\n    function genPoint(coords, r) {\n      var vertices = polar2Cartesian(coords[1], coords[0], r);\n      var indices = [];\n      return [{\n        vertices: vertices,\n        indices: indices\n      }];\n    }\n    function genMultiPoint(coords, r) {\n      var result = {\n        vertices: [],\n        indices: []\n      };\n      coords.map(function (c) {\n        return genPoint(c, r);\n      }).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n          newPnt = _ref2[0];\n        concatGroup(result, newPnt);\n      });\n      return [result];\n    }\n    function genLineString(coords, r) {\n      var coords3d = interpolateLine(coords, resolution).map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          lng = _ref4[0],\n          lat = _ref4[1];\n        return polar2Cartesian(lat, lng, r);\n      });\n      var _earcutFlatten = flatten([coords3d]),\n        vertices = _earcutFlatten.vertices;\n      var numPoints = Math.round(vertices.length / 3);\n      var indices = [];\n      for (var vIdx = 1; vIdx < numPoints; vIdx++) {\n        indices.push(vIdx - 1, vIdx);\n      }\n      return [{\n        vertices: vertices,\n        indices: indices\n      }];\n    }\n    function genMultiLineString(coords, r) {\n      var result = {\n        vertices: [],\n        indices: []\n      };\n      coords.map(function (c) {\n        return genLineString(c, r);\n      }).forEach(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 1),\n          newLine = _ref6[0];\n        concatGroup(result, newLine);\n      });\n      return [result];\n    }\n    function genPolygon(coords, r) {\n      var coords3d = coords.map(function (coordsSegment) {\n        return interpolateLine(coordsSegment, resolution).map(function (_ref7) {\n          var _ref8 = _slicedToArray(_ref7, 2),\n            lng = _ref8[0],\n            lat = _ref8[1];\n          return polar2Cartesian(lat, lng, r);\n        });\n      });\n\n      // Each point generates 3 vertice items (x,y,z).\n      var _earcutFlatten2 = flatten(coords3d),\n        vertices = _earcutFlatten2.vertices,\n        holes = _earcutFlatten2.holes;\n      var firstHoleIdx = holes[0] || Infinity;\n      var outerVertices = vertices.slice(0, firstHoleIdx * 3);\n      var holeVertices = vertices.slice(firstHoleIdx * 3);\n      var holesIdx = new Set(holes);\n      var numPoints = Math.round(vertices.length / 3);\n      var outerIndices = [],\n        holeIndices = [];\n      for (var vIdx = 1; vIdx < numPoints; vIdx++) {\n        if (!holesIdx.has(vIdx)) {\n          if (vIdx < firstHoleIdx) {\n            outerIndices.push(vIdx - 1, vIdx);\n          } else {\n            holeIndices.push(vIdx - 1 - firstHoleIdx, vIdx - firstHoleIdx);\n          }\n        }\n      }\n      var groups = [{\n        indices: outerIndices,\n        vertices: outerVertices\n      }];\n      if (holes.length) {\n        groups.push({\n          indices: holeIndices,\n          vertices: holeVertices\n        });\n      }\n      return groups;\n    }\n    function genMultiPolygon(coords, r) {\n      var outer = {\n        vertices: [],\n        indices: []\n      };\n      var holes = {\n        vertices: [],\n        indices: []\n      };\n      coords.map(function (c) {\n        return genPolygon(c, r);\n      }).forEach(function (_ref9) {\n        var _ref10 = _slicedToArray(_ref9, 2),\n          newOuter = _ref10[0],\n          newHoles = _ref10[1];\n        concatGroup(outer, newOuter);\n        newHoles && concatGroup(holes, newHoles);\n      });\n      var groups = [outer];\n      holes.vertices.length && groups.push(holes);\n      return groups;\n    }\n    return _this;\n  }\n  _inherits(GeoJsonGeometry, _THREE$BufferGeometry);\n  return _createClass(GeoJsonGeometry);\n}(THREE.BufferGeometry); //\nfunction concatGroup(main, extra) {\n  var prevVertCnt = Math.round(main.vertices.length / 3);\n  concatArr(main.vertices, extra.vertices);\n  concatArr(main.indices, extra.indices.map(function (ind) {\n    return ind + prevVertCnt;\n  }));\n}\nfunction concatArr(target, src) {\n  var _iterator = _createForOfIteratorHelper(src),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var e = _step.value;\n      target.push(e);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nfunction polar2Cartesian(lat, lng) {\n  var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var phi = (90 - lat) * Math.PI / 180;\n  var theta = (90 - lng) * Math.PI / 180;\n  return [r * Math.sin(phi) * Math.cos(theta),\n  // x\n  r * Math.cos(phi),\n  // y\n  r * Math.sin(phi) * Math.sin(theta) // z\n  ];\n}\n\nexport { GeoJsonGeometry };\n","/**\n * Text = 3D Text\n *\n * parameters = {\n *  font: <THREE.Font>, // font\n *\n *  size: <float>, // size of the text\n *  depth: <float>, // thickness to extrude text\n *  curveSegments: <int>, // number of points on the curves\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into text bevel goes\n *  bevelSize: <float>, // how far from text outline (including bevelOffset) is bevel\n *  bevelOffset: <float> // how far from text outline does bevel start\n * }\n */\n\nimport {\n\tExtrudeGeometry\n} from 'three';\n\nclass TextGeometry extends ExtrudeGeometry {\n\n\tconstructor( text, parameters = {} ) {\n\n\t\tconst font = parameters.font;\n\n\t\tif ( font === undefined ) {\n\n\t\t\tsuper(); // generate default extrude geometry\n\n\t\t} else {\n\n\t\t\tconst shapes = font.generateShapes( text, parameters.size );\n\n\t\t\t// translate parameters to ExtrudeGeometry API\n\n\t\t\tif ( parameters.depth === undefined && parameters.height !== undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.TextGeometry: .height is now depreciated. Please use .depth instead' ); // @deprecated, r163\n\n\t\t\t}\n\n\t\t\tparameters.depth = parameters.depth !== undefined ?\n\t\t\t\tparameters.depth : parameters.height !== undefined ?\n\t\t\t\t\tparameters.height : 50;\n\n\t\t\t// defaults\n\n\t\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\t\t\tsuper( shapes, parameters );\n\n\t\t}\n\n\t\tthis.type = 'TextGeometry';\n\n\t}\n\n}\n\n\nexport { TextGeometry };\n","import {\n\tFileLoader,\n\tLoader,\n\tShapePath\n} from 'three';\n\nclass FontLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tconst font = scope.parse( JSON.parse( text ) );\n\n\t\t\tif ( onLoad ) onLoad( font );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\treturn new Font( json );\n\n\t}\n\n}\n\n//\n\nclass Font {\n\n\tconstructor( data ) {\n\n\t\tthis.isFont = true;\n\n\t\tthis.type = 'Font';\n\n\t\tthis.data = data;\n\n\t}\n\n\tgenerateShapes( text, size = 100 ) {\n\n\t\tconst shapes = [];\n\t\tconst paths = createPaths( text, size, this.data );\n\n\t\tfor ( let p = 0, pl = paths.length; p < pl; p ++ ) {\n\n\t\t\tshapes.push( ...paths[ p ].toShapes() );\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n}\n\nfunction createPaths( text, size, data ) {\n\n\tconst chars = Array.from( text );\n\tconst scale = size / data.resolution;\n\tconst line_height = ( data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness ) * scale;\n\n\tconst paths = [];\n\n\tlet offsetX = 0, offsetY = 0;\n\n\tfor ( let i = 0; i < chars.length; i ++ ) {\n\n\t\tconst char = chars[ i ];\n\n\t\tif ( char === '\\n' ) {\n\n\t\t\toffsetX = 0;\n\t\t\toffsetY -= line_height;\n\n\t\t} else {\n\n\t\t\tconst ret = createPath( char, scale, offsetX, offsetY, data );\n\t\t\toffsetX += ret.offsetX;\n\t\t\tpaths.push( ret.path );\n\n\t\t}\n\n\t}\n\n\treturn paths;\n\n}\n\nfunction createPath( char, scale, offsetX, offsetY, data ) {\n\n\tconst glyph = data.glyphs[ char ] || data.glyphs[ '?' ];\n\n\tif ( ! glyph ) {\n\n\t\tconsole.error( 'THREE.Font: character \"' + char + '\" does not exists in font family ' + data.familyName + '.' );\n\n\t\treturn;\n\n\t}\n\n\tconst path = new ShapePath();\n\n\tlet x, y, cpx, cpy, cpx1, cpy1, cpx2, cpy2;\n\n\tif ( glyph.o ) {\n\n\t\tconst outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );\n\n\t\tfor ( let i = 0, l = outline.length; i < l; ) {\n\n\t\t\tconst action = outline[ i ++ ];\n\n\t\t\tswitch ( action ) {\n\n\t\t\t\tcase 'm': // moveTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.moveTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'l': // lineTo\n\n\t\t\t\t\tx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\ty = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.lineTo( x, y );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'q': // quadraticCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.quadraticCurveTo( cpx1, cpy1, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'b': // bezierCurveTo\n\n\t\t\t\t\tcpx = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx1 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy1 = outline[ i ++ ] * scale + offsetY;\n\t\t\t\t\tcpx2 = outline[ i ++ ] * scale + offsetX;\n\t\t\t\t\tcpy2 = outline[ i ++ ] * scale + offsetY;\n\n\t\t\t\t\tpath.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { offsetX: glyph.ha * scale, path: path };\n\n}\n\nexport { FontLoader, Font };\n","import {\n\tMatrix4,\n\tObject3D,\n\tVector2,\n\tVector3\n} from 'three';\n\nclass CSS2DObject extends Object3D {\n\n\tconstructor( element = document.createElement( 'div' ) ) {\n\n\t\tsuper();\n\n\t\tthis.isCSS2DObject = true;\n\n\t\tthis.element = element;\n\n\t\tthis.element.style.position = 'absolute';\n\t\tthis.element.style.userSelect = 'none';\n\n\t\tthis.element.setAttribute( 'draggable', false );\n\n\t\tthis.center = new Vector2( 0.5, 0.5 ); // ( 0, 0 ) is the lower left; ( 1, 1 ) is the top right\n\n\t\tthis.addEventListener( 'removed', function () {\n\n\t\t\tthis.traverse( function ( object ) {\n\n\t\t\t\tif ( object.element instanceof Element && object.element.parentNode !== null ) {\n\n\t\t\t\t\tobject.element.parentNode.removeChild( object.element );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.element = source.element.cloneNode( true );\n\n\t\tthis.center = source.center;\n\n\t\treturn this;\n\n\t}\n\n}\n\n//\n\nconst _vector = new Vector3();\nconst _viewMatrix = new Matrix4();\nconst _viewProjectionMatrix = new Matrix4();\nconst _a = new Vector3();\nconst _b = new Vector3();\n\nclass CSS2DRenderer {\n\n\tconstructor( parameters = {} ) {\n\n\t\tconst _this = this;\n\n\t\tlet _width, _height;\n\t\tlet _widthHalf, _heightHalf;\n\n\t\tconst cache = {\n\t\t\tobjects: new WeakMap()\n\t\t};\n\n\t\tconst domElement = parameters.element !== undefined ? parameters.element : document.createElement( 'div' );\n\n\t\tdomElement.style.overflow = 'hidden';\n\n\t\tthis.domElement = domElement;\n\n\t\tthis.getSize = function () {\n\n\t\t\treturn {\n\t\t\t\twidth: _width,\n\t\t\t\theight: _height\n\t\t\t};\n\n\t\t};\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\n\t\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\n\n\t\t\t_viewMatrix.copy( camera.matrixWorldInverse );\n\t\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\n\t\t\trenderObject( scene, scene, camera );\n\t\t\tzOrder( scene );\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_widthHalf = _width / 2;\n\t\t\t_heightHalf = _height / 2;\n\n\t\t\tdomElement.style.width = width + 'px';\n\t\t\tdomElement.style.height = height + 'px';\n\n\t\t};\n\n\t\tfunction hideObject( object ) {\n\n\t\t\tif ( object.isCSS2DObject ) object.element.style.display = 'none';\n\n\t\t\tfor ( let i = 0, l = object.children.length; i < l; i ++ ) {\n\n\t\t\t\thideObject( object.children[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera ) {\n\n\t\t\tif ( object.visible === false ) {\n\n\t\t\t\thideObject( object );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\t\t\t\n\t\t\tif ( object.isCSS2DObject ) {\n\n\t\t\t\t_vector.setFromMatrixPosition( object.matrixWorld );\n\t\t\t\t_vector.applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\tconst visible = ( _vector.z >= - 1 && _vector.z <= 1 ) && ( object.layers.test( camera.layers ) === true );\n\n\t\t\t\tconst element = object.element;\n\t\t\t\telement.style.display = visible === true ? '' : 'none';\n\n\t\t\t\tif ( visible === true ) {\n\n\t\t\t\t\tobject.onBeforeRender( _this, scene, camera );\n\n\t\t\t\t\telement.style.transform = 'translate(' + ( - 100 * object.center.x ) + '%,' + ( - 100 * object.center.y ) + '%)' + 'translate(' + ( _vector.x * _widthHalf + _widthHalf ) + 'px,' + ( - _vector.y * _heightHalf + _heightHalf ) + 'px)';\n\n\t\t\t\t\tif ( element.parentNode !== domElement ) {\n\n\t\t\t\t\t\tdomElement.appendChild( element );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.onAfterRender( _this, scene, camera );\n\n\t\t\t\t}\n\n\t\t\t\tconst objectData = {\n\t\t\t\t\tdistanceToCameraSquared: getDistanceToSquared( camera, object )\n\t\t\t\t};\n\n\t\t\t\tcache.objects.set( object, objectData );\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, l = object.children.length; i < l; i ++ ) {\n\n\t\t\t\trenderObject( object.children[ i ], scene, camera );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getDistanceToSquared( object1, object2 ) {\n\n\t\t\t_a.setFromMatrixPosition( object1.matrixWorld );\n\t\t\t_b.setFromMatrixPosition( object2.matrixWorld );\n\n\t\t\treturn _a.distanceToSquared( _b );\n\n\t\t}\n\n\t\tfunction filterAndFlatten( scene ) {\n\n\t\t\tconst result = [];\n\n\t\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\t\tif ( object.isCSS2DObject ) result.push( object );\n\n\t\t\t} );\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction zOrder( scene ) {\n\n\t\t\tconst sorted = filterAndFlatten( scene ).sort( function ( a, b ) {\n\n\t\t\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\t\t\treturn b.renderOrder - a.renderOrder;\n\n\t\t\t\t}\n\n\t\t\t\tconst distanceA = cache.objects.get( a ).distanceToCameraSquared;\n\t\t\t\tconst distanceB = cache.objects.get( b ).distanceToCameraSquared;\n\n\t\t\t\treturn distanceA - distanceB;\n\n\t\t\t} );\n\n\t\t\tconst zMax = sorted.length;\n\n\t\t\tfor ( let i = 0, l = sorted.length; i < l; i ++ ) {\n\n\t\t\t\tsorted[ i ].element.style.zIndex = zMax - i;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport { CSS2DObject, CSS2DRenderer };\n","import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tInstancedBufferAttribute,\n\tInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tTriangleFanDrawMode,\n\tTriangleStripDrawMode,\n\tTrianglesDrawMode,\n\tVector3,\n} from 'three';\n\nfunction computeMikkTSpaceTangents( geometry, MikkTSpace, negateSign = true ) {\n\n\tif ( ! MikkTSpace || ! MikkTSpace.isReady ) {\n\n\t\tthrow new Error( 'BufferGeometryUtils: Initialized MikkTSpace library required.' );\n\n\t}\n\n\tif ( ! geometry.hasAttribute( 'position' ) || ! geometry.hasAttribute( 'normal' ) || ! geometry.hasAttribute( 'uv' ) ) {\n\n\t\tthrow new Error( 'BufferGeometryUtils: Tangents require \"position\", \"normal\", and \"uv\" attributes.' );\n\n\t}\n\n\tfunction getAttributeArray( attribute ) {\n\n\t\tif ( attribute.normalized || attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tconst dstArray = new Float32Array( attribute.count * attribute.itemSize );\n\n\t\t\tfor ( let i = 0, j = 0; i < attribute.count; i ++ ) {\n\n\t\t\t\tdstArray[ j ++ ] = attribute.getX( i );\n\t\t\t\tdstArray[ j ++ ] = attribute.getY( i );\n\n\t\t\t\tif ( attribute.itemSize > 2 ) {\n\n\t\t\t\t\tdstArray[ j ++ ] = attribute.getZ( i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t\tif ( attribute.array instanceof Float32Array ) {\n\n\t\t\treturn attribute.array;\n\n\t\t}\n\n\t\treturn new Float32Array( attribute.array );\n\n\t}\n\n\t// MikkTSpace algorithm requires non-indexed input.\n\n\tconst _geometry = geometry.index ? geometry.toNonIndexed() : geometry;\n\n\t// Compute vertex tangents.\n\n\tconst tangents = MikkTSpace.generateTangents(\n\n\t\tgetAttributeArray( _geometry.attributes.position ),\n\t\tgetAttributeArray( _geometry.attributes.normal ),\n\t\tgetAttributeArray( _geometry.attributes.uv )\n\n\t);\n\n\t// Texture coordinate convention of glTF differs from the apparent\n\t// default of the MikkTSpace library; .w component must be flipped.\n\n\tif ( negateSign ) {\n\n\t\tfor ( let i = 3; i < tangents.length; i += 4 ) {\n\n\t\t\ttangents[ i ] *= - 1;\n\n\t\t}\n\n\t}\n\n\t//\n\n\t_geometry.setAttribute( 'tangent', new BufferAttribute( tangents, 4 ) );\n\n\tif ( geometry !== _geometry ) {\n\n\t\tgeometry.copy( _geometry );\n\n\t}\n\n\treturn geometry;\n\n}\n\n/**\n * @param  {Array<BufferGeometry>} geometries\n * @param  {Boolean} useGroups\n * @return {BufferGeometry}\n */\nfunction mergeGeometries( geometries, useGroups = false ) {\n\n\tconst isIndexed = geometries[ 0 ].index !== null;\n\n\tconst attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\n\tconst morphAttributesUsed = new Set( Object.keys( geometries[ 0 ].morphAttributes ) );\n\n\tconst attributes = {};\n\tconst morphAttributes = {};\n\n\tconst morphTargetsRelative = geometries[ 0 ].morphTargetsRelative;\n\n\tconst mergedGeometry = new BufferGeometry();\n\n\tlet offset = 0;\n\n\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\tconst geometry = geometries[ i ];\n\t\tlet attributesCount = 0;\n\n\t\t// ensure that all geometries are indexed, or none\n\n\t\tif ( isIndexed !== ( geometry.index !== null ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// gather attributes, exit early if they're different\n\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tif ( ! attributesUsed.has( name ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( attributes[ name ] === undefined ) attributes[ name ] = [];\n\n\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\n\n\t\t\tattributesCount ++;\n\n\t\t}\n\n\t\t// ensure geometries have the same number of attributes\n\n\t\tif ( attributesCount !== attributesUsed.size ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. Make sure all geometries have the same number of attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// gather morph attributes, exit early if they're different\n\n\t\tif ( morphTargetsRelative !== geometry.morphTargetsRelative ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. .morphTargetsRelative must be consistent throughout all geometries.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tfor ( const name in geometry.morphAttributes ) {\n\n\t\t\tif ( ! morphAttributesUsed.has( name ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '.  .morphAttributes must be consistent throughout all geometries.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( morphAttributes[ name ] === undefined ) morphAttributes[ name ] = [];\n\n\t\t\tmorphAttributes[ name ].push( geometry.morphAttributes[ name ] );\n\n\t\t}\n\n\t\tif ( useGroups ) {\n\n\t\t\tlet count;\n\n\t\t\tif ( isIndexed ) {\n\n\t\t\t\tcount = geometry.index.count;\n\n\t\t\t} else if ( geometry.attributes.position !== undefined ) {\n\n\t\t\t\tcount = geometry.attributes.position.count;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. The geometry must have either an index or a position attribute' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.addGroup( offset, count, i );\n\n\t\t\toffset += count;\n\n\t\t}\n\n\t}\n\n\t// merge indices\n\n\tif ( isIndexed ) {\n\n\t\tlet indexOffset = 0;\n\t\tconst mergedIndex = [];\n\n\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\t\tconst index = geometries[ i ].index;\n\n\t\t\tfor ( let j = 0; j < index.count; ++ j ) {\n\n\t\t\t\tmergedIndex.push( index.getX( j ) + indexOffset );\n\n\t\t\t}\n\n\t\t\tindexOffset += geometries[ i ].attributes.position.count;\n\n\t\t}\n\n\t\tmergedGeometry.setIndex( mergedIndex );\n\n\t}\n\n\t// merge attributes\n\n\tfor ( const name in attributes ) {\n\n\t\tconst mergedAttribute = mergeAttributes( attributes[ name ] );\n\n\t\tif ( ! mergedAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' + name + ' attribute.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tmergedGeometry.setAttribute( name, mergedAttribute );\n\n\t}\n\n\t// merge morph attributes\n\n\tfor ( const name in morphAttributes ) {\n\n\t\tconst numMorphTargets = morphAttributes[ name ][ 0 ].length;\n\n\t\tif ( numMorphTargets === 0 ) break;\n\n\t\tmergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n\t\tmergedGeometry.morphAttributes[ name ] = [];\n\n\t\tfor ( let i = 0; i < numMorphTargets; ++ i ) {\n\n\t\t\tconst morphAttributesToMerge = [];\n\n\t\t\tfor ( let j = 0; j < morphAttributes[ name ].length; ++ j ) {\n\n\t\t\t\tmorphAttributesToMerge.push( morphAttributes[ name ][ j ][ i ] );\n\n\t\t\t}\n\n\t\t\tconst mergedMorphAttribute = mergeAttributes( morphAttributesToMerge );\n\n\t\t\tif ( ! mergedMorphAttribute ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' + name + ' morphAttribute.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.morphAttributes[ name ].push( mergedMorphAttribute );\n\n\t\t}\n\n\t}\n\n\treturn mergedGeometry;\n\n}\n\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {BufferAttribute}\n */\nfunction mergeAttributes( attributes ) {\n\n\tlet TypedArray;\n\tlet itemSize;\n\tlet normalized;\n\tlet gpuType = - 1;\n\tlet arrayLength = 0;\n\n\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\n\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( itemSize === undefined ) itemSize = attribute.itemSize;\n\t\tif ( itemSize !== attribute.itemSize ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( normalized === undefined ) normalized = attribute.normalized;\n\t\tif ( normalized !== attribute.normalized ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( gpuType === - 1 ) gpuType = attribute.gpuType;\n\t\tif ( gpuType !== attribute.gpuType ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.gpuType must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tarrayLength += attribute.count * itemSize;\n\n\t}\n\n\tconst array = new TypedArray( arrayLength );\n\tconst result = new BufferAttribute( array, itemSize, normalized );\n\tlet offset = 0;\n\n\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tconst tupleOffset = offset / itemSize;\n\t\t\tfor ( let j = 0, l = attribute.count; j < l; j ++ ) {\n\n\t\t\t\tfor ( let c = 0; c < itemSize; c ++ ) {\n\n\t\t\t\t\tconst value = attribute.getComponent( j, c );\n\t\t\t\t\tresult.setComponent( j + tupleOffset, c, value );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tarray.set( attribute.array, offset );\n\n\t\t}\n\n\t\toffset += attribute.count * itemSize;\n\n\t}\n\n\tif ( gpuType !== undefined ) {\n\n\t\tresult.gpuType = gpuType;\n\n\t}\n\n\treturn result;\n\n}\n\n/**\n * @param {BufferAttribute}\n * @return {BufferAttribute}\n */\nexport function deepCloneAttribute( attribute ) {\n\n\tif ( attribute.isInstancedInterleavedBufferAttribute || attribute.isInterleavedBufferAttribute ) {\n\n\t\treturn deinterleaveAttribute( attribute );\n\n\t}\n\n\tif ( attribute.isInstancedBufferAttribute ) {\n\n\t\treturn new InstancedBufferAttribute().copy( attribute );\n\n\t}\n\n\treturn new BufferAttribute().copy( attribute );\n\n}\n\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {Array<InterleavedBufferAttribute>}\n */\nfunction interleaveAttributes( attributes ) {\n\n\t// Interleaves the provided attributes into an InterleavedBuffer and returns\n\t// a set of InterleavedBufferAttributes for each attribute\n\tlet TypedArray;\n\tlet arrayLength = 0;\n\tlet stride = 0;\n\n\t// calculate the length and type of the interleavedBuffer\n\tfor ( let i = 0, l = attributes.length; i < l; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\n\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\tconsole.error( 'AttributeBuffers of different types cannot be interleaved' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tarrayLength += attribute.array.length;\n\t\tstride += attribute.itemSize;\n\n\t}\n\n\t// Create the set of buffer attributes\n\tconst interleavedBuffer = new InterleavedBuffer( new TypedArray( arrayLength ), stride );\n\tlet offset = 0;\n\tconst res = [];\n\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\tconst setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\tfor ( let j = 0, l = attributes.length; j < l; j ++ ) {\n\n\t\tconst attribute = attributes[ j ];\n\t\tconst itemSize = attribute.itemSize;\n\t\tconst count = attribute.count;\n\t\tconst iba = new InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, attribute.normalized );\n\t\tres.push( iba );\n\n\t\toffset += itemSize;\n\n\t\t// Move the data for each attribute into the new interleavedBuffer\n\t\t// at the appropriate offset\n\t\tfor ( let c = 0; c < count; c ++ ) {\n\n\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\tiba[ setters[ k ] ]( c, attribute[ getters[ k ] ]( c ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn res;\n\n}\n\n// returns a new, non-interleaved version of the provided attribute\nexport function deinterleaveAttribute( attribute ) {\n\n\tconst cons = attribute.data.array.constructor;\n\tconst count = attribute.count;\n\tconst itemSize = attribute.itemSize;\n\tconst normalized = attribute.normalized;\n\n\tconst array = new cons( count * itemSize );\n\tlet newAttribute;\n\tif ( attribute.isInstancedInterleavedBufferAttribute ) {\n\n\t\tnewAttribute = new InstancedBufferAttribute( array, itemSize, normalized, attribute.meshPerAttribute );\n\n\t} else {\n\n\t\tnewAttribute = new BufferAttribute( array, itemSize, normalized );\n\n\t}\n\n\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\tnewAttribute.setX( i, attribute.getX( i ) );\n\n\t\tif ( itemSize >= 2 ) {\n\n\t\t\tnewAttribute.setY( i, attribute.getY( i ) );\n\n\t\t}\n\n\t\tif ( itemSize >= 3 ) {\n\n\t\t\tnewAttribute.setZ( i, attribute.getZ( i ) );\n\n\t\t}\n\n\t\tif ( itemSize >= 4 ) {\n\n\t\t\tnewAttribute.setW( i, attribute.getW( i ) );\n\n\t\t}\n\n\t}\n\n\treturn newAttribute;\n\n}\n\n// deinterleaves all attributes on the geometry\nexport function deinterleaveGeometry( geometry ) {\n\n\tconst attributes = geometry.attributes;\n\tconst morphTargets = geometry.morphTargets;\n\tconst attrMap = new Map();\n\n\tfor ( const key in attributes ) {\n\n\t\tconst attr = attributes[ key ];\n\t\tif ( attr.isInterleavedBufferAttribute ) {\n\n\t\t\tif ( ! attrMap.has( attr ) ) {\n\n\t\t\t\tattrMap.set( attr, deinterleaveAttribute( attr ) );\n\n\t\t\t}\n\n\t\t\tattributes[ key ] = attrMap.get( attr );\n\n\t\t}\n\n\t}\n\n\tfor ( const key in morphTargets ) {\n\n\t\tconst attr = morphTargets[ key ];\n\t\tif ( attr.isInterleavedBufferAttribute ) {\n\n\t\t\tif ( ! attrMap.has( attr ) ) {\n\n\t\t\t\tattrMap.set( attr, deinterleaveAttribute( attr ) );\n\n\t\t\t}\n\n\t\t\tmorphTargets[ key ] = attrMap.get( attr );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * @param {BufferGeometry} geometry\n * @return {number}\n */\nfunction estimateBytesUsed( geometry ) {\n\n\t// Return the estimated memory used by this geometry in bytes\n\t// Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n\t// for InterleavedBufferAttributes.\n\tlet mem = 0;\n\tfor ( const name in geometry.attributes ) {\n\n\t\tconst attr = geometry.getAttribute( name );\n\t\tmem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n\n\t}\n\n\tconst indices = geometry.getIndex();\n\tmem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n\treturn mem;\n\n}\n\n/**\n * @param {BufferGeometry} geometry\n * @param {number} tolerance\n * @return {BufferGeometry}\n */\nfunction mergeVertices( geometry, tolerance = 1e-4 ) {\n\n\ttolerance = Math.max( tolerance, Number.EPSILON );\n\n\t// Generate an index buffer if the geometry doesn't have one, or optimize it\n\t// if it's already available.\n\tconst hashToIndex = {};\n\tconst indices = geometry.getIndex();\n\tconst positions = geometry.getAttribute( 'position' );\n\tconst vertexCount = indices ? indices.count : positions.count;\n\n\t// next value for triangle indices\n\tlet nextIndex = 0;\n\n\t// attributes and new attribute arrays\n\tconst attributeNames = Object.keys( geometry.attributes );\n\tconst tmpAttributes = {};\n\tconst tmpMorphAttributes = {};\n\tconst newIndices = [];\n\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\tconst setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\t// Initialize the arrays, allocating space conservatively. Extra\n\t// space will be trimmed in the last step.\n\tfor ( let i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\tconst name = attributeNames[ i ];\n\t\tconst attr = geometry.attributes[ name ];\n\n\t\ttmpAttributes[ name ] = new attr.constructor(\n\t\t\tnew attr.array.constructor( attr.count * attr.itemSize ),\n\t\t\tattr.itemSize,\n\t\t\tattr.normalized\n\t\t);\n\n\t\tconst morphAttributes = geometry.morphAttributes[ name ];\n\t\tif ( morphAttributes ) {\n\n\t\t\tif ( ! tmpMorphAttributes[ name ] ) tmpMorphAttributes[ name ] = [];\n\t\t\tmorphAttributes.forEach( ( morphAttr, i ) => {\n\n\t\t\t\tconst array = new morphAttr.array.constructor( morphAttr.count * morphAttr.itemSize );\n\t\t\t\ttmpMorphAttributes[ name ][ i ] = new morphAttr.constructor( array, morphAttr.itemSize, morphAttr.normalized );\n\n\t\t\t} );\n\n\t\t}\n\n\t}\n\n\t// convert the error tolerance to an amount of decimal places to truncate to\n\tconst halfTolerance = tolerance * 0.5;\n\tconst exponent = Math.log10( 1 / tolerance );\n\tconst hashMultiplier = Math.pow( 10, exponent );\n\tconst hashAdditive = halfTolerance * hashMultiplier;\n\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\tconst index = indices ? indices.getX( i ) : i;\n\n\t\t// Generate a hash for the vertex attributes at the current index 'i'\n\t\tlet hash = '';\n\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\tconst name = attributeNames[ j ];\n\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\tconst itemSize = attribute.itemSize;\n\n\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t// double tilde truncates the decimal value\n\t\t\t\thash += `${ ~ ~ ( attribute[ getters[ k ] ]( index ) * hashMultiplier + hashAdditive ) },`;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Add another reference to the vertex if it's already\n\t\t// used by another index\n\t\tif ( hash in hashToIndex ) {\n\n\t\t\tnewIndices.push( hashToIndex[ hash ] );\n\n\t\t} else {\n\n\t\t\t// copy data to the new index in the temporary attributes\n\t\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\tconst name = attributeNames[ j ];\n\t\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\t\tconst morphAttributes = geometry.morphAttributes[ name ];\n\t\t\t\tconst itemSize = attribute.itemSize;\n\t\t\t\tconst newArray = tmpAttributes[ name ];\n\t\t\t\tconst newMorphArrays = tmpMorphAttributes[ name ];\n\n\t\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\tconst getterFunc = getters[ k ];\n\t\t\t\t\tconst setterFunc = setters[ k ];\n\t\t\t\t\tnewArray[ setterFunc ]( nextIndex, attribute[ getterFunc ]( index ) );\n\n\t\t\t\t\tif ( morphAttributes ) {\n\n\t\t\t\t\t\tfor ( let m = 0, ml = morphAttributes.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tnewMorphArrays[ m ][ setterFunc ]( nextIndex, morphAttributes[ m ][ getterFunc ]( index ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\thashToIndex[ hash ] = nextIndex;\n\t\t\tnewIndices.push( nextIndex );\n\t\t\tnextIndex ++;\n\n\t\t}\n\n\t}\n\n\t// generate result BufferGeometry\n\tconst result = geometry.clone();\n\tfor ( const name in geometry.attributes ) {\n\n\t\tconst tmpAttribute = tmpAttributes[ name ];\n\n\t\tresult.setAttribute( name, new tmpAttribute.constructor(\n\t\t\ttmpAttribute.array.slice( 0, nextIndex * tmpAttribute.itemSize ),\n\t\t\ttmpAttribute.itemSize,\n\t\t\ttmpAttribute.normalized,\n\t\t) );\n\n\t\tif ( ! ( name in tmpMorphAttributes ) ) continue;\n\n\t\tfor ( let j = 0; j < tmpMorphAttributes[ name ].length; j ++ ) {\n\n\t\t\tconst tmpMorphAttribute = tmpMorphAttributes[ name ][ j ];\n\n\t\t\tresult.morphAttributes[ name ][ j ] = new tmpMorphAttribute.constructor(\n\t\t\t\ttmpMorphAttribute.array.slice( 0, nextIndex * tmpMorphAttribute.itemSize ),\n\t\t\t\ttmpMorphAttribute.itemSize,\n\t\t\t\ttmpMorphAttribute.normalized,\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\t// indices\n\n\tresult.setIndex( newIndices );\n\n\treturn result;\n\n}\n\n/**\n * @param {BufferGeometry} geometry\n * @param {number} drawMode\n * @return {BufferGeometry}\n */\nfunction toTrianglesDrawMode( geometry, drawMode ) {\n\n\tif ( drawMode === TrianglesDrawMode ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.' );\n\t\treturn geometry;\n\n\t}\n\n\tif ( drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode ) {\n\n\t\tlet index = geometry.getIndex();\n\n\t\t// generate index if not present\n\n\t\tif ( index === null ) {\n\n\t\t\tconst indices = [];\n\n\t\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tfor ( let i = 0; i < position.count; i ++ ) {\n\n\t\t\t\t\tindices.push( i );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\tindex = geometry.getIndex();\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst numberOfTriangles = index.count - 2;\n\t\tconst newIndices = [];\n\n\t\tif ( drawMode === TriangleFanDrawMode ) {\n\n\t\t\t// gl.TRIANGLE_FAN\n\n\t\t\tfor ( let i = 1; i <= numberOfTriangles; i ++ ) {\n\n\t\t\t\tnewIndices.push( index.getX( 0 ) );\n\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// gl.TRIANGLE_STRIP\n\n\t\t\tfor ( let i = 0; i < numberOfTriangles; i ++ ) {\n\n\t\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ( newIndices.length / 3 ) !== numberOfTriangles ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );\n\n\t\t}\n\n\t\t// build final geometry\n\n\t\tconst newGeometry = geometry.clone();\n\t\tnewGeometry.setIndex( newIndices );\n\t\tnewGeometry.clearGroups();\n\n\t\treturn newGeometry;\n\n\t} else {\n\n\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode );\n\t\treturn geometry;\n\n\t}\n\n}\n\n/**\n * Calculates the morphed attributes of a morphed/skinned BufferGeometry.\n * Helpful for Raytracing or Decals.\n * @param {Mesh | Line | Points} object An instance of Mesh, Line or Points.\n * @return {Object} An Object with original position/normal attributes and morphed ones.\n */\nfunction computeMorphedAttributes( object ) {\n\n\tconst _vA = new Vector3();\n\tconst _vB = new Vector3();\n\tconst _vC = new Vector3();\n\n\tconst _tempA = new Vector3();\n\tconst _tempB = new Vector3();\n\tconst _tempC = new Vector3();\n\n\tconst _morphA = new Vector3();\n\tconst _morphB = new Vector3();\n\tconst _morphC = new Vector3();\n\n\tfunction _calculateMorphedAttributeData(\n\t\tobject,\n\t\tattribute,\n\t\tmorphAttribute,\n\t\tmorphTargetsRelative,\n\t\ta,\n\t\tb,\n\t\tc,\n\t\tmodifiedAttributeArray\n\t) {\n\n\t\t_vA.fromBufferAttribute( attribute, a );\n\t\t_vB.fromBufferAttribute( attribute, b );\n\t\t_vC.fromBufferAttribute( attribute, c );\n\n\t\tconst morphInfluences = object.morphTargetInfluences;\n\n\t\tif ( morphAttribute && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\t\t\t_morphB.set( 0, 0, 0 );\n\t\t\t_morphC.set( 0, 0, 0 );\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst influence = morphInfluences[ i ];\n\t\t\t\tconst morph = morphAttribute[ i ];\n\n\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute( morph, a );\n\t\t\t\t_tempB.fromBufferAttribute( morph, b );\n\t\t\t\t_tempC.fromBufferAttribute( morph, c );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_vA.add( _morphA );\n\t\t\t_vB.add( _morphB );\n\t\t\t_vC.add( _morphC );\n\n\t\t}\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tobject.applyBoneTransform( a, _vA );\n\t\t\tobject.applyBoneTransform( b, _vB );\n\t\t\tobject.applyBoneTransform( c, _vC );\n\n\t\t}\n\n\t\tmodifiedAttributeArray[ a * 3 + 0 ] = _vA.x;\n\t\tmodifiedAttributeArray[ a * 3 + 1 ] = _vA.y;\n\t\tmodifiedAttributeArray[ a * 3 + 2 ] = _vA.z;\n\t\tmodifiedAttributeArray[ b * 3 + 0 ] = _vB.x;\n\t\tmodifiedAttributeArray[ b * 3 + 1 ] = _vB.y;\n\t\tmodifiedAttributeArray[ b * 3 + 2 ] = _vB.z;\n\t\tmodifiedAttributeArray[ c * 3 + 0 ] = _vC.x;\n\t\tmodifiedAttributeArray[ c * 3 + 1 ] = _vC.y;\n\t\tmodifiedAttributeArray[ c * 3 + 2 ] = _vC.z;\n\n\t}\n\n\tconst geometry = object.geometry;\n\tconst material = object.material;\n\n\tlet a, b, c;\n\tconst index = geometry.index;\n\tconst positionAttribute = geometry.attributes.position;\n\tconst morphPosition = geometry.morphAttributes.position;\n\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\tconst normalAttribute = geometry.attributes.normal;\n\tconst morphNormal = geometry.morphAttributes.position;\n\n\tconst groups = geometry.groups;\n\tconst drawRange = geometry.drawRange;\n\tlet i, j, il, jl;\n\tlet group;\n\tlet start, end;\n\n\tconst modifiedPosition = new Float32Array( positionAttribute.count * positionAttribute.itemSize );\n\tconst modifiedNormal = new Float32Array( normalAttribute.count * normalAttribute.itemSize );\n\n\tif ( index !== null ) {\n\n\t\t// indexed buffer geometry\n\n\t\tif ( Array.isArray( material ) ) {\n\n\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tgroup = groups[ i ];\n\n\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\ta = index.getX( i );\n\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tpositionAttribute,\n\t\t\t\t\tmorphPosition,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedPosition\n\t\t\t\t);\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tnormalAttribute,\n\t\t\t\t\tmorphNormal,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedNormal\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\t// non-indexed buffer geometry\n\n\t\tif ( Array.isArray( material ) ) {\n\n\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tgroup = groups[ i ];\n\n\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\ta = j;\n\t\t\t\t\tb = j + 1;\n\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\tend = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\ta = i;\n\t\t\t\tb = i + 1;\n\t\t\t\tc = i + 2;\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tpositionAttribute,\n\t\t\t\t\tmorphPosition,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedPosition\n\t\t\t\t);\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tnormalAttribute,\n\t\t\t\t\tmorphNormal,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedNormal\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tconst morphedPositionAttribute = new Float32BufferAttribute( modifiedPosition, 3 );\n\tconst morphedNormalAttribute = new Float32BufferAttribute( modifiedNormal, 3 );\n\n\treturn {\n\n\t\tpositionAttribute: positionAttribute,\n\t\tnormalAttribute: normalAttribute,\n\t\tmorphedPositionAttribute: morphedPositionAttribute,\n\t\tmorphedNormalAttribute: morphedNormalAttribute\n\n\t};\n\n}\n\nfunction mergeGroups( geometry ) {\n\n\tif ( geometry.groups.length === 0 ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometryUtils.mergeGroups(): No groups are defined. Nothing to merge.' );\n\t\treturn geometry;\n\n\t}\n\n\tlet groups = geometry.groups;\n\n\t// sort groups by material index\n\n\tgroups = groups.sort( ( a, b ) => {\n\n\t\tif ( a.materialIndex !== b.materialIndex ) return a.materialIndex - b.materialIndex;\n\n\t\treturn a.start - b.start;\n\n\t} );\n\n\t// create index for non-indexed geometries\n\n\tif ( geometry.getIndex() === null ) {\n\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\t\tconst indices = [];\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i += 3 ) {\n\n\t\t\tindices.push( i, i + 1, i + 2 );\n\n\t\t}\n\n\t\tgeometry.setIndex( indices );\n\n\t}\n\n\t// sort index\n\n\tconst index = geometry.getIndex();\n\n\tconst newIndices = [];\n\n\tfor ( let i = 0; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tconst groupStart = group.start;\n\t\tconst groupLength = groupStart + group.count;\n\n\t\tfor ( let j = groupStart; j < groupLength; j ++ ) {\n\n\t\t\tnewIndices.push( index.getX( j ) );\n\n\t\t}\n\n\t}\n\n\tgeometry.dispose(); // Required to force buffer recreation\n\tgeometry.setIndex( newIndices );\n\n\t// update groups indices\n\n\tlet start = 0;\n\n\tfor ( let i = 0; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tgroup.start = start;\n\t\tstart += group.count;\n\n\t}\n\n\t// merge groups\n\n\tlet currentGroup = groups[ 0 ];\n\n\tgeometry.groups = [ currentGroup ];\n\n\tfor ( let i = 1; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tif ( currentGroup.materialIndex === group.materialIndex ) {\n\n\t\t\tcurrentGroup.count += group.count;\n\n\t\t} else {\n\n\t\t\tcurrentGroup = group;\n\t\t\tgeometry.groups.push( currentGroup );\n\n\t\t}\n\n\t}\n\n\treturn geometry;\n\n}\n\n\n/**\n * Modifies the supplied geometry if it is non-indexed, otherwise creates a new,\n * non-indexed geometry. Returns the geometry with smooth normals everywhere except\n * faces that meet at an angle greater than the crease angle.\n *\n * @param {BufferGeometry} geometry\n * @param {number} [creaseAngle]\n * @return {BufferGeometry}\n */\nfunction toCreasedNormals( geometry, creaseAngle = Math.PI / 3 /* 60 degrees */ ) {\n\n\tconst creaseDot = Math.cos( creaseAngle );\n\tconst hashMultiplier = ( 1 + 1e-10 ) * 1e2;\n\n\t// reusable vectors\n\tconst verts = [ new Vector3(), new Vector3(), new Vector3() ];\n\tconst tempVec1 = new Vector3();\n\tconst tempVec2 = new Vector3();\n\tconst tempNorm = new Vector3();\n\tconst tempNorm2 = new Vector3();\n\n\t// hashes a vector\n\tfunction hashVertex( v ) {\n\n\t\tconst x = ~ ~ ( v.x * hashMultiplier );\n\t\tconst y = ~ ~ ( v.y * hashMultiplier );\n\t\tconst z = ~ ~ ( v.z * hashMultiplier );\n\t\treturn `${x},${y},${z}`;\n\n\t}\n\n\t// BufferGeometry.toNonIndexed() warns if the geometry is non-indexed\n\t// and returns the original geometry\n\tconst resultGeometry = geometry.index ? geometry.toNonIndexed() : geometry;\n\tconst posAttr = resultGeometry.attributes.position;\n\tconst vertexMap = {};\n\n\t// find all the normals shared by commonly located vertices\n\tfor ( let i = 0, l = posAttr.count / 3; i < l; i ++ ) {\n\n\t\tconst i3 = 3 * i;\n\t\tconst a = verts[ 0 ].fromBufferAttribute( posAttr, i3 + 0 );\n\t\tconst b = verts[ 1 ].fromBufferAttribute( posAttr, i3 + 1 );\n\t\tconst c = verts[ 2 ].fromBufferAttribute( posAttr, i3 + 2 );\n\n\t\ttempVec1.subVectors( c, b );\n\t\ttempVec2.subVectors( a, b );\n\n\t\t// add the normal to the map for all vertices\n\t\tconst normal = new Vector3().crossVectors( tempVec1, tempVec2 ).normalize();\n\t\tfor ( let n = 0; n < 3; n ++ ) {\n\n\t\t\tconst vert = verts[ n ];\n\t\t\tconst hash = hashVertex( vert );\n\t\t\tif ( ! ( hash in vertexMap ) ) {\n\n\t\t\t\tvertexMap[ hash ] = [];\n\n\t\t\t}\n\n\t\t\tvertexMap[ hash ].push( normal );\n\n\t\t}\n\n\t}\n\n\t// average normals from all vertices that share a common location if they are within the\n\t// provided crease threshold\n\tconst normalArray = new Float32Array( posAttr.count * 3 );\n\tconst normAttr = new BufferAttribute( normalArray, 3, false );\n\tfor ( let i = 0, l = posAttr.count / 3; i < l; i ++ ) {\n\n\t\t// get the face normal for this vertex\n\t\tconst i3 = 3 * i;\n\t\tconst a = verts[ 0 ].fromBufferAttribute( posAttr, i3 + 0 );\n\t\tconst b = verts[ 1 ].fromBufferAttribute( posAttr, i3 + 1 );\n\t\tconst c = verts[ 2 ].fromBufferAttribute( posAttr, i3 + 2 );\n\n\t\ttempVec1.subVectors( c, b );\n\t\ttempVec2.subVectors( a, b );\n\n\t\ttempNorm.crossVectors( tempVec1, tempVec2 ).normalize();\n\n\t\t// average all normals that meet the threshold and set the normal value\n\t\tfor ( let n = 0; n < 3; n ++ ) {\n\n\t\t\tconst vert = verts[ n ];\n\t\t\tconst hash = hashVertex( vert );\n\t\t\tconst otherNormals = vertexMap[ hash ];\n\t\t\ttempNorm2.set( 0, 0, 0 );\n\n\t\t\tfor ( let k = 0, lk = otherNormals.length; k < lk; k ++ ) {\n\n\t\t\t\tconst otherNorm = otherNormals[ k ];\n\t\t\t\tif ( tempNorm.dot( otherNorm ) > creaseDot ) {\n\n\t\t\t\t\ttempNorm2.add( otherNorm );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttempNorm2.normalize();\n\t\t\tnormAttr.setXYZ( i3 + n, tempNorm2.x, tempNorm2.y, tempNorm2.z );\n\n\t\t}\n\n\t}\n\n\tresultGeometry.setAttribute( 'normal', normAttr );\n\treturn resultGeometry;\n\n}\n\nexport {\n\tcomputeMikkTSpaceTangents,\n\tmergeGeometries,\n\tmergeAttributes,\n\tinterleaveAttributes,\n\testimateBytesUsed,\n\tmergeVertices,\n\ttoTrianglesDrawMode,\n\tcomputeMorphedAttributes,\n\tmergeGroups,\n\ttoCreasedNormals\n};\n","// This file is autogenerated. It's used to publish ESM to npm.\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\n\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n\nvar trimLeft = /^\\s+/;\nvar trimRight = /\\s+$/;\nfunction tinycolor(color, opts) {\n  color = color ? color : \"\";\n  opts = opts || {};\n\n  // If input is already a tinycolor, return itself\n  if (color instanceof tinycolor) {\n    return color;\n  }\n  // If we are called as a function, call using new instead\n  if (!(this instanceof tinycolor)) {\n    return new tinycolor(color, opts);\n  }\n  var rgb = inputToRGB(color);\n  this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb.format;\n  this._gradientType = opts.gradientType;\n\n  // Don't let the range of [0,255] come back in [0,1].\n  // Potentially lose a little bit of precision here, but will fix issues where\n  // .5 gets interpreted as half of the total, instead of half of 1\n  // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n  if (this._r < 1) this._r = Math.round(this._r);\n  if (this._g < 1) this._g = Math.round(this._g);\n  if (this._b < 1) this._b = Math.round(this._b);\n  this._ok = rgb.ok;\n}\ntinycolor.prototype = {\n  isDark: function isDark() {\n    return this.getBrightness() < 128;\n  },\n  isLight: function isLight() {\n    return !this.isDark();\n  },\n  isValid: function isValid() {\n    return this._ok;\n  },\n  getOriginalInput: function getOriginalInput() {\n    return this._originalInput;\n  },\n  getFormat: function getFormat() {\n    return this._format;\n  },\n  getAlpha: function getAlpha() {\n    return this._a;\n  },\n  getBrightness: function getBrightness() {\n    //http://www.w3.org/TR/AERT#color-contrast\n    var rgb = this.toRgb();\n    return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n  },\n  getLuminance: function getLuminance() {\n    //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n    var rgb = this.toRgb();\n    var RsRGB, GsRGB, BsRGB, R, G, B;\n    RsRGB = rgb.r / 255;\n    GsRGB = rgb.g / 255;\n    BsRGB = rgb.b / 255;\n    if (RsRGB <= 0.03928) R = RsRGB / 12.92;else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n    if (GsRGB <= 0.03928) G = GsRGB / 12.92;else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n    if (BsRGB <= 0.03928) B = BsRGB / 12.92;else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n    return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n  },\n  setAlpha: function setAlpha(value) {\n    this._a = boundAlpha(value);\n    this._roundA = Math.round(100 * this._a) / 100;\n    return this;\n  },\n  toHsv: function toHsv() {\n    var hsv = rgbToHsv(this._r, this._g, this._b);\n    return {\n      h: hsv.h * 360,\n      s: hsv.s,\n      v: hsv.v,\n      a: this._a\n    };\n  },\n  toHsvString: function toHsvString() {\n    var hsv = rgbToHsv(this._r, this._g, this._b);\n    var h = Math.round(hsv.h * 360),\n      s = Math.round(hsv.s * 100),\n      v = Math.round(hsv.v * 100);\n    return this._a == 1 ? \"hsv(\" + h + \", \" + s + \"%, \" + v + \"%)\" : \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \" + this._roundA + \")\";\n  },\n  toHsl: function toHsl() {\n    var hsl = rgbToHsl(this._r, this._g, this._b);\n    return {\n      h: hsl.h * 360,\n      s: hsl.s,\n      l: hsl.l,\n      a: this._a\n    };\n  },\n  toHslString: function toHslString() {\n    var hsl = rgbToHsl(this._r, this._g, this._b);\n    var h = Math.round(hsl.h * 360),\n      s = Math.round(hsl.s * 100),\n      l = Math.round(hsl.l * 100);\n    return this._a == 1 ? \"hsl(\" + h + \", \" + s + \"%, \" + l + \"%)\" : \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \" + this._roundA + \")\";\n  },\n  toHex: function toHex(allow3Char) {\n    return rgbToHex(this._r, this._g, this._b, allow3Char);\n  },\n  toHexString: function toHexString(allow3Char) {\n    return \"#\" + this.toHex(allow3Char);\n  },\n  toHex8: function toHex8(allow4Char) {\n    return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);\n  },\n  toHex8String: function toHex8String(allow4Char) {\n    return \"#\" + this.toHex8(allow4Char);\n  },\n  toRgb: function toRgb() {\n    return {\n      r: Math.round(this._r),\n      g: Math.round(this._g),\n      b: Math.round(this._b),\n      a: this._a\n    };\n  },\n  toRgbString: function toRgbString() {\n    return this._a == 1 ? \"rgb(\" + Math.round(this._r) + \", \" + Math.round(this._g) + \", \" + Math.round(this._b) + \")\" : \"rgba(\" + Math.round(this._r) + \", \" + Math.round(this._g) + \", \" + Math.round(this._b) + \", \" + this._roundA + \")\";\n  },\n  toPercentageRgb: function toPercentageRgb() {\n    return {\n      r: Math.round(bound01(this._r, 255) * 100) + \"%\",\n      g: Math.round(bound01(this._g, 255) * 100) + \"%\",\n      b: Math.round(bound01(this._b, 255) * 100) + \"%\",\n      a: this._a\n    };\n  },\n  toPercentageRgbString: function toPercentageRgbString() {\n    return this._a == 1 ? \"rgb(\" + Math.round(bound01(this._r, 255) * 100) + \"%, \" + Math.round(bound01(this._g, 255) * 100) + \"%, \" + Math.round(bound01(this._b, 255) * 100) + \"%)\" : \"rgba(\" + Math.round(bound01(this._r, 255) * 100) + \"%, \" + Math.round(bound01(this._g, 255) * 100) + \"%, \" + Math.round(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n  },\n  toName: function toName() {\n    if (this._a === 0) {\n      return \"transparent\";\n    }\n    if (this._a < 1) {\n      return false;\n    }\n    return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n  },\n  toFilter: function toFilter(secondColor) {\n    var hex8String = \"#\" + rgbaToArgbHex(this._r, this._g, this._b, this._a);\n    var secondHex8String = hex8String;\n    var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n    if (secondColor) {\n      var s = tinycolor(secondColor);\n      secondHex8String = \"#\" + rgbaToArgbHex(s._r, s._g, s._b, s._a);\n    }\n    return \"progid:DXImageTransform.Microsoft.gradient(\" + gradientType + \"startColorstr=\" + hex8String + \",endColorstr=\" + secondHex8String + \")\";\n  },\n  toString: function toString(format) {\n    var formatSet = !!format;\n    format = format || this._format;\n    var formattedString = false;\n    var hasAlpha = this._a < 1 && this._a >= 0;\n    var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"hex4\" || format === \"hex8\" || format === \"name\");\n    if (needsAlphaFormat) {\n      // Special case for \"transparent\", all other non-alpha formats\n      // will return rgba when there is transparency.\n      if (format === \"name\" && this._a === 0) {\n        return this.toName();\n      }\n      return this.toRgbString();\n    }\n    if (format === \"rgb\") {\n      formattedString = this.toRgbString();\n    }\n    if (format === \"prgb\") {\n      formattedString = this.toPercentageRgbString();\n    }\n    if (format === \"hex\" || format === \"hex6\") {\n      formattedString = this.toHexString();\n    }\n    if (format === \"hex3\") {\n      formattedString = this.toHexString(true);\n    }\n    if (format === \"hex4\") {\n      formattedString = this.toHex8String(true);\n    }\n    if (format === \"hex8\") {\n      formattedString = this.toHex8String();\n    }\n    if (format === \"name\") {\n      formattedString = this.toName();\n    }\n    if (format === \"hsl\") {\n      formattedString = this.toHslString();\n    }\n    if (format === \"hsv\") {\n      formattedString = this.toHsvString();\n    }\n    return formattedString || this.toHexString();\n  },\n  clone: function clone() {\n    return tinycolor(this.toString());\n  },\n  _applyModification: function _applyModification(fn, args) {\n    var color = fn.apply(null, [this].concat([].slice.call(args)));\n    this._r = color._r;\n    this._g = color._g;\n    this._b = color._b;\n    this.setAlpha(color._a);\n    return this;\n  },\n  lighten: function lighten() {\n    return this._applyModification(_lighten, arguments);\n  },\n  brighten: function brighten() {\n    return this._applyModification(_brighten, arguments);\n  },\n  darken: function darken() {\n    return this._applyModification(_darken, arguments);\n  },\n  desaturate: function desaturate() {\n    return this._applyModification(_desaturate, arguments);\n  },\n  saturate: function saturate() {\n    return this._applyModification(_saturate, arguments);\n  },\n  greyscale: function greyscale() {\n    return this._applyModification(_greyscale, arguments);\n  },\n  spin: function spin() {\n    return this._applyModification(_spin, arguments);\n  },\n  _applyCombination: function _applyCombination(fn, args) {\n    return fn.apply(null, [this].concat([].slice.call(args)));\n  },\n  analogous: function analogous() {\n    return this._applyCombination(_analogous, arguments);\n  },\n  complement: function complement() {\n    return this._applyCombination(_complement, arguments);\n  },\n  monochromatic: function monochromatic() {\n    return this._applyCombination(_monochromatic, arguments);\n  },\n  splitcomplement: function splitcomplement() {\n    return this._applyCombination(_splitcomplement, arguments);\n  },\n  // Disabled until https://github.com/bgrins/TinyColor/issues/254\n  // polyad: function (number) {\n  //   return this._applyCombination(polyad, [number]);\n  // },\n  triad: function triad() {\n    return this._applyCombination(polyad, [3]);\n  },\n  tetrad: function tetrad() {\n    return this._applyCombination(polyad, [4]);\n  }\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function (color, opts) {\n  if (_typeof(color) == \"object\") {\n    var newColor = {};\n    for (var i in color) {\n      if (color.hasOwnProperty(i)) {\n        if (i === \"a\") {\n          newColor[i] = color[i];\n        } else {\n          newColor[i] = convertToPercentage(color[i]);\n        }\n      }\n    }\n    color = newColor;\n  }\n  return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n  var rgb = {\n    r: 0,\n    g: 0,\n    b: 0\n  };\n  var a = 1;\n  var s = null;\n  var v = null;\n  var l = null;\n  var ok = false;\n  var format = false;\n  if (typeof color == \"string\") {\n    color = stringInputToObject(color);\n  }\n  if (_typeof(color) == \"object\") {\n    if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n      rgb = rgbToRgb(color.r, color.g, color.b);\n      ok = true;\n      format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n      s = convertToPercentage(color.s);\n      v = convertToPercentage(color.v);\n      rgb = hsvToRgb(color.h, s, v);\n      ok = true;\n      format = \"hsv\";\n    } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n      s = convertToPercentage(color.s);\n      l = convertToPercentage(color.l);\n      rgb = hslToRgb(color.h, s, l);\n      ok = true;\n      format = \"hsl\";\n    }\n    if (color.hasOwnProperty(\"a\")) {\n      a = color.a;\n    }\n  }\n  a = boundAlpha(a);\n  return {\n    ok: ok,\n    format: color.format || format,\n    r: Math.min(255, Math.max(rgb.r, 0)),\n    g: Math.min(255, Math.max(rgb.g, 0)),\n    b: Math.min(255, Math.max(rgb.b, 0)),\n    a: a\n  };\n}\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b) {\n  return {\n    r: bound01(r, 255) * 255,\n    g: bound01(g, 255) * 255,\n    b: bound01(b, 255) * 255\n  };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n  r = bound01(r, 255);\n  g = bound01(g, 255);\n  b = bound01(b, 255);\n  var max = Math.max(r, g, b),\n    min = Math.min(r, g, b);\n  var h,\n    s,\n    l = (max + min) / 2;\n  if (max == min) {\n    h = s = 0; // achromatic\n  } else {\n    var d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n  return {\n    h: h,\n    s: s,\n    l: l\n  };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n  var r, g, b;\n  h = bound01(h, 360);\n  s = bound01(s, 100);\n  l = bound01(l, 100);\n  function hue2rgb(p, q, t) {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\n    if (t < 1 / 2) return q;\n    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n  }\n  if (s === 0) {\n    r = g = b = l; // achromatic\n  } else {\n    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    var p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n  return {\n    r: r * 255,\n    g: g * 255,\n    b: b * 255\n  };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n  r = bound01(r, 255);\n  g = bound01(g, 255);\n  b = bound01(b, 255);\n  var max = Math.max(r, g, b),\n    min = Math.min(r, g, b);\n  var h,\n    s,\n    v = max;\n  var d = max - min;\n  s = max === 0 ? 0 : d / max;\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n  return {\n    h: h,\n    s: s,\n    v: v\n  };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hsvToRgb(h, s, v) {\n  h = bound01(h, 360) * 6;\n  s = bound01(s, 100);\n  v = bound01(v, 100);\n  var i = Math.floor(h),\n    f = h - i,\n    p = v * (1 - s),\n    q = v * (1 - f * s),\n    t = v * (1 - (1 - f) * s),\n    mod = i % 6,\n    r = [v, q, p, p, t, v][mod],\n    g = [t, v, v, q, p, p][mod],\n    b = [p, p, t, v, v, q][mod];\n  return {\n    r: r * 255,\n    g: g * 255,\n    b: b * 255\n  };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n  var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];\n\n  // Return a 3 character hex if possible\n  if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n  }\n  return hex.join(\"\");\n}\n\n// `rgbaToHex`\n// Converts an RGBA color plus alpha transparency to hex\n// Assumes r, g, b are contained in the set [0, 255] and\n// a in [0, 1]. Returns a 4 or 8 character rgba hex\nfunction rgbaToHex(r, g, b, a, allow4Char) {\n  var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a))];\n\n  // Return a 4 character hex if possible\n  if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {\n    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n  }\n  return hex.join(\"\");\n}\n\n// `rgbaToArgbHex`\n// Converts an RGBA color to an ARGB Hex8 string\n// Rarely used, but required for \"toFilter()\"\nfunction rgbaToArgbHex(r, g, b, a) {\n  var hex = [pad2(convertDecimalToHex(a)), pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];\n  return hex.join(\"\");\n}\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n  if (!color1 || !color2) return false;\n  return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\ntinycolor.random = function () {\n  return tinycolor.fromRatio({\n    r: Math.random(),\n    g: Math.random(),\n    b: Math.random()\n  });\n};\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction _desaturate(color, amount) {\n  amount = amount === 0 ? 0 : amount || 10;\n  var hsl = tinycolor(color).toHsl();\n  hsl.s -= amount / 100;\n  hsl.s = clamp01(hsl.s);\n  return tinycolor(hsl);\n}\nfunction _saturate(color, amount) {\n  amount = amount === 0 ? 0 : amount || 10;\n  var hsl = tinycolor(color).toHsl();\n  hsl.s += amount / 100;\n  hsl.s = clamp01(hsl.s);\n  return tinycolor(hsl);\n}\nfunction _greyscale(color) {\n  return tinycolor(color).desaturate(100);\n}\nfunction _lighten(color, amount) {\n  amount = amount === 0 ? 0 : amount || 10;\n  var hsl = tinycolor(color).toHsl();\n  hsl.l += amount / 100;\n  hsl.l = clamp01(hsl.l);\n  return tinycolor(hsl);\n}\nfunction _brighten(color, amount) {\n  amount = amount === 0 ? 0 : amount || 10;\n  var rgb = tinycolor(color).toRgb();\n  rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n  rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n  rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n  return tinycolor(rgb);\n}\nfunction _darken(color, amount) {\n  amount = amount === 0 ? 0 : amount || 10;\n  var hsl = tinycolor(color).toHsl();\n  hsl.l -= amount / 100;\n  hsl.l = clamp01(hsl.l);\n  return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction _spin(color, amount) {\n  var hsl = tinycolor(color).toHsl();\n  var hue = (hsl.h + amount) % 360;\n  hsl.h = hue < 0 ? 360 + hue : hue;\n  return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction _complement(color) {\n  var hsl = tinycolor(color).toHsl();\n  hsl.h = (hsl.h + 180) % 360;\n  return tinycolor(hsl);\n}\nfunction polyad(color, number) {\n  if (isNaN(number) || number <= 0) {\n    throw new Error(\"Argument to polyad must be a positive number\");\n  }\n  var hsl = tinycolor(color).toHsl();\n  var result = [tinycolor(color)];\n  var step = 360 / number;\n  for (var i = 1; i < number; i++) {\n    result.push(tinycolor({\n      h: (hsl.h + i * step) % 360,\n      s: hsl.s,\n      l: hsl.l\n    }));\n  }\n  return result;\n}\nfunction _splitcomplement(color) {\n  var hsl = tinycolor(color).toHsl();\n  var h = hsl.h;\n  return [tinycolor(color), tinycolor({\n    h: (h + 72) % 360,\n    s: hsl.s,\n    l: hsl.l\n  }), tinycolor({\n    h: (h + 216) % 360,\n    s: hsl.s,\n    l: hsl.l\n  })];\n}\nfunction _analogous(color, results, slices) {\n  results = results || 6;\n  slices = slices || 30;\n  var hsl = tinycolor(color).toHsl();\n  var part = 360 / slices;\n  var ret = [tinycolor(color)];\n  for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {\n    hsl.h = (hsl.h + part) % 360;\n    ret.push(tinycolor(hsl));\n  }\n  return ret;\n}\nfunction _monochromatic(color, results) {\n  results = results || 6;\n  var hsv = tinycolor(color).toHsv();\n  var h = hsv.h,\n    s = hsv.s,\n    v = hsv.v;\n  var ret = [];\n  var modification = 1 / results;\n  while (results--) {\n    ret.push(tinycolor({\n      h: h,\n      s: s,\n      v: v\n    }));\n    v = (v + modification) % 1;\n  }\n  return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function (color1, color2, amount) {\n  amount = amount === 0 ? 0 : amount || 50;\n  var rgb1 = tinycolor(color1).toRgb();\n  var rgb2 = tinycolor(color2).toRgb();\n  var p = amount / 100;\n  var rgba = {\n    r: (rgb2.r - rgb1.r) * p + rgb1.r,\n    g: (rgb2.g - rgb1.g) * p + rgb1.g,\n    b: (rgb2.b - rgb1.b) * p + rgb1.b,\n    a: (rgb2.a - rgb1.a) * p + rgb1.a\n  };\n  return tinycolor(rgba);\n};\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)\n\n// `contrast`\n// Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)\ntinycolor.readability = function (color1, color2) {\n  var c1 = tinycolor(color1);\n  var c2 = tinycolor(color2);\n  return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);\n};\n\n// `isReadable`\n// Ensure that foreground and background color combinations meet WCAG2 guidelines.\n// The third argument is an optional Object.\n//      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';\n//      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.\n// If the entire object is absent, isReadable defaults to {level:\"AA\",size:\"small\"}.\n\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\n//    tinycolor.isReadable(\"#000\", \"#111\",{level:\"AA\",size:\"large\"}) => false\ntinycolor.isReadable = function (color1, color2, wcag2) {\n  var readability = tinycolor.readability(color1, color2);\n  var wcag2Parms, out;\n  out = false;\n  wcag2Parms = validateWCAG2Parms(wcag2);\n  switch (wcag2Parms.level + wcag2Parms.size) {\n    case \"AAsmall\":\n    case \"AAAlarge\":\n      out = readability >= 4.5;\n      break;\n    case \"AAlarge\":\n      out = readability >= 3;\n      break;\n    case \"AAAsmall\":\n      out = readability >= 7;\n      break;\n  }\n  return out;\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// Optionally returns Black or White if the most readable color is unreadable.\n// *Example*\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:false}).toHexString(); // \"#112255\"\n//    tinycolor.mostReadable(tinycolor.mostReadable(\"#123\", [\"#124\", \"#125\"],{includeFallbackColors:true}).toHexString();  // \"#ffffff\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"large\"}).toHexString(); // \"#faf3f3\"\n//    tinycolor.mostReadable(\"#a8015a\", [\"#faf3f3\"],{includeFallbackColors:true,level:\"AAA\",size:\"small\"}).toHexString(); // \"#ffffff\"\ntinycolor.mostReadable = function (baseColor, colorList, args) {\n  var bestColor = null;\n  var bestScore = 0;\n  var readability;\n  var includeFallbackColors, level, size;\n  args = args || {};\n  includeFallbackColors = args.includeFallbackColors;\n  level = args.level;\n  size = args.size;\n  for (var i = 0; i < colorList.length; i++) {\n    readability = tinycolor.readability(baseColor, colorList[i]);\n    if (readability > bestScore) {\n      bestScore = readability;\n      bestColor = tinycolor(colorList[i]);\n    }\n  }\n  if (tinycolor.isReadable(baseColor, bestColor, {\n    level: level,\n    size: size\n  }) || !includeFallbackColors) {\n    return bestColor;\n  } else {\n    args.includeFallbackColors = false;\n    return tinycolor.mostReadable(baseColor, [\"#fff\", \"#000\"], args);\n  }\n};\n\n// Big List of Colors\n// ------------------\n// <https://www.w3.org/TR/css-color-4/#named-colors>\nvar names = tinycolor.names = {\n  aliceblue: \"f0f8ff\",\n  antiquewhite: \"faebd7\",\n  aqua: \"0ff\",\n  aquamarine: \"7fffd4\",\n  azure: \"f0ffff\",\n  beige: \"f5f5dc\",\n  bisque: \"ffe4c4\",\n  black: \"000\",\n  blanchedalmond: \"ffebcd\",\n  blue: \"00f\",\n  blueviolet: \"8a2be2\",\n  brown: \"a52a2a\",\n  burlywood: \"deb887\",\n  burntsienna: \"ea7e5d\",\n  cadetblue: \"5f9ea0\",\n  chartreuse: \"7fff00\",\n  chocolate: \"d2691e\",\n  coral: \"ff7f50\",\n  cornflowerblue: \"6495ed\",\n  cornsilk: \"fff8dc\",\n  crimson: \"dc143c\",\n  cyan: \"0ff\",\n  darkblue: \"00008b\",\n  darkcyan: \"008b8b\",\n  darkgoldenrod: \"b8860b\",\n  darkgray: \"a9a9a9\",\n  darkgreen: \"006400\",\n  darkgrey: \"a9a9a9\",\n  darkkhaki: \"bdb76b\",\n  darkmagenta: \"8b008b\",\n  darkolivegreen: \"556b2f\",\n  darkorange: \"ff8c00\",\n  darkorchid: \"9932cc\",\n  darkred: \"8b0000\",\n  darksalmon: \"e9967a\",\n  darkseagreen: \"8fbc8f\",\n  darkslateblue: \"483d8b\",\n  darkslategray: \"2f4f4f\",\n  darkslategrey: \"2f4f4f\",\n  darkturquoise: \"00ced1\",\n  darkviolet: \"9400d3\",\n  deeppink: \"ff1493\",\n  deepskyblue: \"00bfff\",\n  dimgray: \"696969\",\n  dimgrey: \"696969\",\n  dodgerblue: \"1e90ff\",\n  firebrick: \"b22222\",\n  floralwhite: \"fffaf0\",\n  forestgreen: \"228b22\",\n  fuchsia: \"f0f\",\n  gainsboro: \"dcdcdc\",\n  ghostwhite: \"f8f8ff\",\n  gold: \"ffd700\",\n  goldenrod: \"daa520\",\n  gray: \"808080\",\n  green: \"008000\",\n  greenyellow: \"adff2f\",\n  grey: \"808080\",\n  honeydew: \"f0fff0\",\n  hotpink: \"ff69b4\",\n  indianred: \"cd5c5c\",\n  indigo: \"4b0082\",\n  ivory: \"fffff0\",\n  khaki: \"f0e68c\",\n  lavender: \"e6e6fa\",\n  lavenderblush: \"fff0f5\",\n  lawngreen: \"7cfc00\",\n  lemonchiffon: \"fffacd\",\n  lightblue: \"add8e6\",\n  lightcoral: \"f08080\",\n  lightcyan: \"e0ffff\",\n  lightgoldenrodyellow: \"fafad2\",\n  lightgray: \"d3d3d3\",\n  lightgreen: \"90ee90\",\n  lightgrey: \"d3d3d3\",\n  lightpink: \"ffb6c1\",\n  lightsalmon: \"ffa07a\",\n  lightseagreen: \"20b2aa\",\n  lightskyblue: \"87cefa\",\n  lightslategray: \"789\",\n  lightslategrey: \"789\",\n  lightsteelblue: \"b0c4de\",\n  lightyellow: \"ffffe0\",\n  lime: \"0f0\",\n  limegreen: \"32cd32\",\n  linen: \"faf0e6\",\n  magenta: \"f0f\",\n  maroon: \"800000\",\n  mediumaquamarine: \"66cdaa\",\n  mediumblue: \"0000cd\",\n  mediumorchid: \"ba55d3\",\n  mediumpurple: \"9370db\",\n  mediumseagreen: \"3cb371\",\n  mediumslateblue: \"7b68ee\",\n  mediumspringgreen: \"00fa9a\",\n  mediumturquoise: \"48d1cc\",\n  mediumvioletred: \"c71585\",\n  midnightblue: \"191970\",\n  mintcream: \"f5fffa\",\n  mistyrose: \"ffe4e1\",\n  moccasin: \"ffe4b5\",\n  navajowhite: \"ffdead\",\n  navy: \"000080\",\n  oldlace: \"fdf5e6\",\n  olive: \"808000\",\n  olivedrab: \"6b8e23\",\n  orange: \"ffa500\",\n  orangered: \"ff4500\",\n  orchid: \"da70d6\",\n  palegoldenrod: \"eee8aa\",\n  palegreen: \"98fb98\",\n  paleturquoise: \"afeeee\",\n  palevioletred: \"db7093\",\n  papayawhip: \"ffefd5\",\n  peachpuff: \"ffdab9\",\n  peru: \"cd853f\",\n  pink: \"ffc0cb\",\n  plum: \"dda0dd\",\n  powderblue: \"b0e0e6\",\n  purple: \"800080\",\n  rebeccapurple: \"663399\",\n  red: \"f00\",\n  rosybrown: \"bc8f8f\",\n  royalblue: \"4169e1\",\n  saddlebrown: \"8b4513\",\n  salmon: \"fa8072\",\n  sandybrown: \"f4a460\",\n  seagreen: \"2e8b57\",\n  seashell: \"fff5ee\",\n  sienna: \"a0522d\",\n  silver: \"c0c0c0\",\n  skyblue: \"87ceeb\",\n  slateblue: \"6a5acd\",\n  slategray: \"708090\",\n  slategrey: \"708090\",\n  snow: \"fffafa\",\n  springgreen: \"00ff7f\",\n  steelblue: \"4682b4\",\n  tan: \"d2b48c\",\n  teal: \"008080\",\n  thistle: \"d8bfd8\",\n  tomato: \"ff6347\",\n  turquoise: \"40e0d0\",\n  violet: \"ee82ee\",\n  wheat: \"f5deb3\",\n  white: \"fff\",\n  whitesmoke: \"f5f5f5\",\n  yellow: \"ff0\",\n  yellowgreen: \"9acd32\"\n};\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = tinycolor.hexNames = flip(names);\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n  var flipped = {};\n  for (var i in o) {\n    if (o.hasOwnProperty(i)) {\n      flipped[o[i]] = i;\n    }\n  }\n  return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n  a = parseFloat(a);\n  if (isNaN(a) || a < 0 || a > 1) {\n    a = 1;\n  }\n  return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n  if (isOnePointZero(n)) n = \"100%\";\n  var processPercent = isPercentage(n);\n  n = Math.min(max, Math.max(0, parseFloat(n)));\n\n  // Automatically convert percentage into number\n  if (processPercent) {\n    n = parseInt(n * max, 10) / 100;\n  }\n\n  // Handle floating point rounding errors\n  if (Math.abs(n - max) < 0.000001) {\n    return 1;\n  }\n\n  // Convert into [0, 1] range if it isn't already\n  return n % max / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n  return Math.min(1, Math.max(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n  return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n  return typeof n == \"string\" && n.indexOf(\".\") != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n  return typeof n === \"string\" && n.indexOf(\"%\") != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n  return c.length == 1 ? \"0\" + c : \"\" + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n  if (n <= 1) {\n    n = n * 100 + \"%\";\n  }\n  return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n  return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n  return parseIntFromHex(h) / 255;\n}\nvar matchers = function () {\n  // <http://www.w3.org/TR/css3-values/#integers>\n  var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n  // <http://www.w3.org/TR/css3-values/#number-value>\n  var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n  // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n  var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n  // Actual matching.\n  // Parentheses and commas are optional, but not required.\n  // Whitespace can take the place of commas or opening paren\n  var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n  var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n  return {\n    CSS_UNIT: new RegExp(CSS_UNIT),\n    rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n    rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n    hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n    hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n    hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n    hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\n    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n  };\n}();\n\n// `isValidCSSUnit`\n// Take in a single string / number and check to see if it looks like a CSS unit\n// (see `matchers` above for definition).\nfunction isValidCSSUnit(color) {\n  return !!matchers.CSS_UNIT.exec(color);\n}\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n  color = color.replace(trimLeft, \"\").replace(trimRight, \"\").toLowerCase();\n  var named = false;\n  if (names[color]) {\n    color = names[color];\n    named = true;\n  } else if (color == \"transparent\") {\n    return {\n      r: 0,\n      g: 0,\n      b: 0,\n      a: 0,\n      format: \"name\"\n    };\n  }\n\n  // Try to match string input using regular expressions.\n  // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n  // Just return an object and let the conversion functions handle that.\n  // This way the result will be the same whether the tinycolor is initialized with string or object.\n  var match;\n  if (match = matchers.rgb.exec(color)) {\n    return {\n      r: match[1],\n      g: match[2],\n      b: match[3]\n    };\n  }\n  if (match = matchers.rgba.exec(color)) {\n    return {\n      r: match[1],\n      g: match[2],\n      b: match[3],\n      a: match[4]\n    };\n  }\n  if (match = matchers.hsl.exec(color)) {\n    return {\n      h: match[1],\n      s: match[2],\n      l: match[3]\n    };\n  }\n  if (match = matchers.hsla.exec(color)) {\n    return {\n      h: match[1],\n      s: match[2],\n      l: match[3],\n      a: match[4]\n    };\n  }\n  if (match = matchers.hsv.exec(color)) {\n    return {\n      h: match[1],\n      s: match[2],\n      v: match[3]\n    };\n  }\n  if (match = matchers.hsva.exec(color)) {\n    return {\n      h: match[1],\n      s: match[2],\n      v: match[3],\n      a: match[4]\n    };\n  }\n  if (match = matchers.hex8.exec(color)) {\n    return {\n      r: parseIntFromHex(match[1]),\n      g: parseIntFromHex(match[2]),\n      b: parseIntFromHex(match[3]),\n      a: convertHexToDecimal(match[4]),\n      format: named ? \"name\" : \"hex8\"\n    };\n  }\n  if (match = matchers.hex6.exec(color)) {\n    return {\n      r: parseIntFromHex(match[1]),\n      g: parseIntFromHex(match[2]),\n      b: parseIntFromHex(match[3]),\n      format: named ? \"name\" : \"hex\"\n    };\n  }\n  if (match = matchers.hex4.exec(color)) {\n    return {\n      r: parseIntFromHex(match[1] + \"\" + match[1]),\n      g: parseIntFromHex(match[2] + \"\" + match[2]),\n      b: parseIntFromHex(match[3] + \"\" + match[3]),\n      a: convertHexToDecimal(match[4] + \"\" + match[4]),\n      format: named ? \"name\" : \"hex8\"\n    };\n  }\n  if (match = matchers.hex3.exec(color)) {\n    return {\n      r: parseIntFromHex(match[1] + \"\" + match[1]),\n      g: parseIntFromHex(match[2] + \"\" + match[2]),\n      b: parseIntFromHex(match[3] + \"\" + match[3]),\n      format: named ? \"name\" : \"hex\"\n    };\n  }\n  return false;\n}\nfunction validateWCAG2Parms(parms) {\n  // return valid WCAG2 parms for isReadable.\n  // If input parms are invalid, return {\"level\":\"AA\", \"size\":\"small\"}\n  var level, size;\n  parms = parms || {\n    level: \"AA\",\n    size: \"small\"\n  };\n  level = (parms.level || \"AA\").toUpperCase();\n  size = (parms.size || \"small\").toLowerCase();\n  if (level !== \"AA\" && level !== \"AAA\") {\n    level = \"AA\";\n  }\n  if (size !== \"small\" && size !== \"large\") {\n    size = \"small\";\n  }\n  return {\n    level: level,\n    size: size\n  };\n}\n\nexport { tinycolor as default };\n"],"names":["earcut","data","holeIndices","dim","minX","minY","maxX","maxY","x","y","invSize","hasHoles","length","outerLen","outerNode","linkedList","triangles","next","prev","eliminateHoles","i","len","start","end","list","queue","steiner","push","getLeftmost","p","leftmost","sort","compareX","eliminateHole","hole","bridge","findHoleBridge","m","hx","hy","qx","Infinity","tan","stop","mx","my","tanMin","pointInTriangle","Math","abs","locallyInside","area","bridgeReverse","splitPolygon","filterPoints","max","earcutLinked","ear","pass","indexCurve","z","zOrder","prevZ","nextZ","sortLinked","q","e","tail","numMerges","pSize","qSize","inSize","isEarHashed","a","c","ax","bx","b","cx","ay","by","cy","x0","y0","x1","y1","minZ","maxZ","n","isEar","removeNode","cureLocalIntersections","equals","intersects","splitEarcut","intersectsPolygon","middleInside","inside","px","py","clockwise","last","signedArea","insertNode","again","r","p1","p2","q1","q2","o1","sign","o2","o3","o4","onSegment","min","num","a2","Node","b2","an","bp","sum","j","module","exports","deviation","polygonArea","trianglesArea","flatten","result","vertices","holes","dimensions","holeIndex","d","t","id","loaded","call","NaN","_minFPS","_maxFPS","_timeScale","_currentTick","_currentTime","_tickDeltaTime","_isRunning","_maxInterval","isNaN","_minInterval","_onResume","default","_onPause","_onTick","_onTickOncePerFrame","resume","prototype","updateOnce","currentTimeSeconds","tickDeltaTimeSeconds","currentTick","_lastTimeUpdated","getTimer","dispatch","animateOnce","pause","window","cancelAnimationFrame","_animationFrameHandle","dispose","removeAll","Object","defineProperty","get","enumerable","configurable","set","requestAnimationFrame","onFrame","_now","_frameDeltaTime","update","_interval","Date","now","value","functions","add","indexOf","remove","splice","arguments","concat","forEach","apply","array","visitCallback","doneCallback","options","elapsed","step","maxTimeMS","pointsPerLoopCycle","probeElements","setTimeout","processSubset","finish","timeStart","round","Bounds3","__webpack_require__","TreeNode","EmptyRegion","asyncFor","root","originalArray","noPoints","api","initAsync","points","verifyPointsInvariant","tempRoot","createRootNode","element","insert","init","bounds","intersectRay","rayOrigin","rayDirection","near","far","undefined","Number","POSITIVE_INFINITY","indices","query","candidate","tmin","half","t1","t2","t3","t4","t5","t6","tmax","dist","idx0","idx1","z0","dist0","z1","intersectSphere","cz","r2","sqr","getRoot","NEGATIVE_INFINITY","side","contains","q0","q3","q4","q5","q6","q7","items","subdivide","quarter","idx","depth","quadIdx","child","node","results","sourceArray","preciseCheck","needsCheck","Easing","freeze","Linear","None","amount","In","Out","InOut","Quadratic","Cubic","Quartic","Quintic","Sinusoidal","sin","PI","Exponential","pow","Circular","sqrt","Elastic","Back","s","Bounce","generatePow","power","EPSILON","performance","Group","_tweens","_tweensAddedDuringUpdate","getAll","_this","keys","map","tweenId","tween","getId","time","preserve","tweenIds","autoStart","Interpolation","v","k","f","floor","fn","Utils","Bezier","pw","bn","Bernstein","CatmullRom","p0","fc","Factorial","p3","v0","v1","Sequence","nextId","_nextId","mainGroup","Tween","_object","_group","_isPaused","_pauseStart","_valuesStart","_valuesEnd","_valuesStartRepeat","_duration","_isDynamic","_initialRepeat","_repeat","_yoyo","_isPlaying","_reversed","_delayTime","_startTime","_easingFunction","_interpolationFunction","_chainedTweens","_onStartCallbackFired","_onEveryStartCallbackFired","_id","_isChainStopped","_propertiesAreSetUp","_goToEnd","isPlaying","isPaused","getDuration","to","target","duration","dynamic","overrideStartingValues","property","_swapEndStartRepeatValues","tmp","prop","_setupProperties","startFromCurrentValues","startValue","startValueIsArray","Array","isArray","propType","isInterpolationList","endValues","temp","l","_handleRelativeValue","console","warn","nestedObject","slice","reverse","stopChainedTweens","_onStopCallback","numChainedTweens","group","delay","repeat","times","repeatDelay","_repeatDelayTime","yoyo","easing","easingFunction","interpolation","interpolationFunction","chain","tweens","_i","onStart","callback","_onStartCallback","onEveryStart","_onEveryStartCallback","onUpdate","_onUpdateCallback","onRepeat","_onRepeatCallback","onComplete","_onCompleteCallback","onStop","_a","endTime","elapsedTime","durationAndDelay","totalTime","calculateElapsedPortion","portion","timeIntoCurrentRepeat","timesRepeated","trunc","_updateProperties","completeCount","isFinite","parseFloat","startIsArray","endIsArray","charAt","endValue","TWEEN","bind","index","obj","Adder","constructor","_partials","Float64Array","_n","hi","lo","valueOf","values","valueof","src_define","factory","extend","parent","definition","create","key","Color","reI","reN","reP","reHex","reRgbInteger","reRgbPercent","reRgbaInteger","reRgbaPercent","reHslPercent","reHslaPercent","named","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","color_formatHex","rgb","formatHex","color_formatRgb","formatRgb","color","format","trim","toLowerCase","exec","parseInt","rgbn","Rgb","rgba","hsla","hasOwnProperty","g","opacity","o","rgb_formatHex","hex","rgb_formatRgb","clampa","clampi","toString","h","Hsl","hslConvert","clamph","clampt","hsl2rgb","m1","m2","copy","channels","assign","displayable","formatHex8","formatHsl","brighter","darker","clamp","lengthSum","lambda0","sinPhi0","cosPhi0","lengthStream","sphere","noop","Z","point","lineStart","lengthPointFirst","lineEnd","lengthLineEnd","polygonStart","polygonEnd","lambda","phi","math","uR","O$","mC","lengthPoint","sinPhi","cosPhi","delta","Wn","cosDelta","fv","_b","coordinates","object","type","distance","fsum","dU","stream","range","ceil","graticuleX","dy","Ho","graticuleY","dx","graticule10","graticule","X1","X0","Y1","Y0","X","Y","DX","DY","precision","lines","mD","filter","outline","extent","_","extentMajor","extentMinor","stepMajor","stepMinor","__WEBPACK_DEFAULT_EXPORT__","_math_js__WEBPACK_IMPORTED_MODULE_0__","cy0","sy0","cy1","sy1","kx0","ky0","kx1","ky1","ZR","Jy","interpolate","B","A","RW","epsilon","epsilon2","pi","halfPi","quarterPi","tau","degrees","radians","atan","atan2","cos","hypot","acos","asin","haversin","streamGeometry","geometry","streamGeometryType","streamObjectType","Feature","FeatureCollection","features","Sphere","Point","MultiPoint","LineString","streamLine","MultiLineString","Polygon","streamPolygon","MultiPolygon","GeometryCollection","geometries","closed","coordinate","_numberArray_js__WEBPACK_IMPORTED_MODULE_0__","genericArray","nb","na","_value_js__WEBPACK_IMPORTED_MODULE_1__","isNumberArray","ArrayBuffer","isView","DataView","src_constant","number","src_color","ZP","am","bm","bs","bi","reA","lastIndex","reB","join","setTime","numberArray","M","basis","v2","v3","nogamma","rgbGamma","B8","gamma","rgbSpline","spline","colors","source","linear","domain","scale","transformer","transform","untransform","unknown","piecewise","output","input","unit","identity","rescale","polymap","bimap","invert","src_number","from","number_number","rangeRound","u","initRange","ticks","count","i1","i2","inc","tickSpec","tickFormat","specifier","tickStep","tickIncrement","formatSpecifier","exponent","formatPrefix","nice","prestep","i0","maxIter","e10","e5","e2","log10","error","factor","ascending","descending","bisector","compare1","compare2","left","mid","zero","center","right","ascendingBisect","bisectRight","prefixExponent","defaultLocale_locale","normalize","d0","d1","r0","r1","bisect","re","match","FormatSpecifier","fill","align","symbol","width","comma","formatDecimalParts","toExponential","coefficient","formatRounded","formatTypes","toFixed","toLocaleString","replace","toPrecision","toUpperCase","src_identity","prefixes","locale","grouping","thousands","numerals","substring","currencyPrefix","currency","currencySuffix","decimal","String","percent","minus","nan","newFormat","prefix","test","suffix","formatType","maybeSuffix","valuePrefix","valueSuffix","valueNegative","formatTrim","out","charCodeAt","padding","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","_defineProperty","_toPrimitive","hint","prim","Symbol","toPrimitive","res","writable","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","iterator","_s","_e","_x","_r","_arr","_d","done","err","return","_unsupportedIterableToArray","_nonIterableRest","_toConsumableArray","_arrayWithoutHoles","_arrayLikeToArray","_iterableToArray","iter","_nonIterableSpread","minLen","name","arr2","_excluded","viewDigest","existingObjs","appendObj","removeObj","_ref7","newObjs","_ref3","_ref3$objBindAttr","objBindAttr","_ref3$dataBindAttr","dataBindAttr","idAccessor","_ref3$purge","isObjValid","removeObjs","prevD","diff","_ref7$createObj","createObj","_ref7$updateObj","updateObj","_ref7$exitObj","exitObj","_ref7$objBindAttr","_ref7$dataBindAttr","_dataBindDiff","_objectSpread2","getOwnPropertyDescriptors","defineProperties","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","sourceKeys","sourceSymbolKeys","propertyIsEnumerable","purge","enter","exit","diffArrays","prevById","index_array_by__WEBPACK_IMPORTED_MODULE_0__","nextById","entries","_ref","_ref2","item","prevSet","Set","nextSet","has","_ref4","_ref5","nextD","updateObjs","_toPropertyKey","keyAccessors","multiItem","flattenKeys","keyAccessor","isProp","Function","indexedResult","reduce","iterObj","itemVal","_itemVal","propVal","rest","includes","level","accKeys","vals","Constructor","lodash_es_isObject","freeGlobal","global","freeSelf","self","lodash_es_now","reWhitespace","_trimmedEndIndex","string","reTrimStart","objectProto","nativeObjectToString","symToStringTag","toStringTag","_getRawTag","isOwn","tag","unmasked","lodash_es_isSymbol","isObjectLike","baseGetTag","_baseGetTag_symToStringTag","getRawTag","NAN","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","lodash_es_toNumber","isSymbol","isObject","other","trimmedEndIndex","isBinary","nativeMax","nativeMin","lodash_es_debounce","func","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","invokeFunc","args","thisArg","shouldInvoke","timeSinceLastCall","timeSinceLastInvoke","timerExpired","timeWaiting","trailingEdge","debounced","isInvoking","clearTimeout","toNumber","cancel","flush","Prop","_ref$default","_ref$triggerUpdate","triggerUpdate","_ref$onChange","onChange","_classCallCheck","instance","defaultVal","newVal","state","_ref2$stateInit","stateInit","_ref2$props","props","rawProps","_ref2$methods","methods","_ref2$aliases","aliases","_ref2$init","initFn","_ref2$update","updateFn","propName","initialised","changedProps","comp","nodeElement","initStatic","digest","_ref3$triggerUpdate","redigest","_ref3$onChange","_ref3$defaultVal","curVal","val","methodName","_methods$methodName","_len","_key","alias","resetProps","_rerender","angle","bounds_lambda0","phi0","lambda1","phi1","lambda2","bounds_lambda00","bounds_phi00","deltaSum","ranges","W0","W1","Z0","Z1","X2","Y2","Z2","centroid_lambda00","centroid_phi00","merge","arrays","util_resulterrbound","util_sum","elen","flen","Q","Qnew","hh","bvirt","enow","fnow","eindex","findex","hindex","vec","ccwerrboundA","ccwerrboundB","ccwerrboundC","C1","C2","D","orient2d","detleft","detright","det","detsum","orient2dadapt","acxtail","acytail","bcxtail","bcytail","ahi","alo","bhi","blo","_j","_0","s1","s0","t0","u3","acx","bcx","acy","bcy","util_splitter","util_estimate","errbound","C1len","C2len","Dlen","EDGE_STACK","Uint32Array","Delaunator","getX","defaultGetX","getY","defaultGetY","coords","maxTriangles","_triangles","_halfedges","Int32Array","_hashSize","_hullPrev","_hullNext","_hullTri","_hullHash","_ids","_dists","hullPrev","hullNext","hullTri","hullHash","minDist","i0x","i0y","i1x","i1y","minRadius","circumradius","ex","ey","bl","cl","i2x","i2y","quicksort","hull","subarray","halfedges","circumcenter","_cx","_cy","_hullStart","hullSize","_hashKey","trianglesLen","_addTriangle","xp","yp","_legalize","pseudoAngle","ar","a0","b0","al","pr","pl","inCircle","fx","fy","cp","ap","hbl","_link","br","ids","dists","tempDist","median","swap","inRing","pt","ring","ignoreBoundary","isInside","xi","yi","xj","yj","lambda00","phi00","areaRingSum","areaSum","areaStream","areaRingStart","areaRingEnd","areaRing","BZ","areaPointFirst","areaPoint","pu","dLambda","sdLambda","adLambda","spherical","cartesian","cartesianDot","cartesianCross","cartesianAddInPlace","cartesianScale","vector","cartesianNormalizeInPlace","boundsStream","boundsPoint","boundsLineStart","boundsLineEnd","boundsRingPoint","boundsRingStart","boundsRingEnd","linePoint","normal","inflection","phii","lambdai","antimeridian","rangeCompare","rangeContains","feature","merged","deltaMax","src_stream","longitude","Xx","polygonContains","polygon","winding","ou","point0","sinPhi1","cosPhi1","point1","absDelta","arc","intersection","phiArc","aW","containsObjectType","containsGeometry","containsGeometryType","containsPoint","containsLine","containsPolygon","ao","bo","ab","ringRadians","pointRadians","pop","centroidStream","centroidPoint","centroidLineStart","centroidLineEnd","centroidRingStart","centroidRingEnd","centroidPointCartesian","centroidLinePointFirst","centroidLinePoint","w","centroidRingPointFirst","centroidRingPoint","_m","centroid","Path","_x0","_y0","_x1","_y1","moveTo","closePath","lineTo","rect","Voronoi","delaunay","xmin","ymin","xmax","ymax","_circumcenters","vectors","_init","circumcenters","x2","y2","x3","y3","render","context","buffer","inedges","ti","tj","_renderSegment","h0","h1","_project","renderBounds","renderCell","_clip","cellPolygons","cell","cellPolygon","S","c0","_regioncode","c1","_clipSegment","_step","neighbors","ci","cj","loop","ai","li","aj","lj","_cell","e0","V","_simplify","_clipInfinite","_clipFinite","P","e1","sx0","sx1","_edgecode","_edge","flip","vx0","vy0","vxn","vyn","unshift","vx","vy","pointX","pointY","Delaunay","that","flatArray","flatIterable","_delaunator","_hullIndex","collinear","cross","hullIndex","voronoi","find","dc","dt","renderHull","renderPoints","hullPolygon","renderTriangle","trianglePolygons","trianglePolygon","compose","rotationIdentity","rotation_rotateRadians","deltaLambda","deltaPhi","deltaGamma","rotationLambda","rotationPhiGamma","forwardRotationLambda","rotation","cosDeltaPhi","sinDeltaPhi","cosDeltaGamma","sinDeltaGamma","line","rejoin","shift","pointEqual","Intersection","entry","segments","compareIntersection","startInside","subject","clip","segment","rejoin_link","current","isSubject","pointVisible","clipLine","sink","ringBuffer","ringSink","polygonStarted","pointRing","ringStart","ringEnd","pointLine","clean","ringSegments","validSegment","sign0","sinLambda0Lambda1","sign1","z4","direction","circleRadius","cosRadius","radius","Kh","TransformStream","bounds_x0","bounds_y0","bounds_boundsStream","fit","projection","fitBounds","clipExtent","translate","path_bounds","fitExtent","cosMinDistance","resample","project","delta2","resample_resample","resampleLineTo","a1","b1","d2","phi2","dx2","dy2","dz","x00","y00","a00","b00","c00","resampleStream","ringPoint","transformRadians","scaleTranslateRotate","sx","sy","alpha","scaleTranslate","cosAlpha","sinAlpha","fi","stereographicRaw","sc","cc","math_degrees","math_radians","math_atan2","math_cos","math_sin","math_sqrt","cartesian_cartesianDot","cartesian_cartesianCross","cartesianAdd","cartesianNormalize","delaunay_spherical","math_asin","delaunay_cartesian","cosphi","excess","triangle","o_midpoint","_isNativeReflectConstruct","Boolean","Reflect","construct","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","_setPrototypeOf","pointInside","pnt","crossesPoleOrAntimeridian","booleanPointInPolygon","getCoord","coord","geom","geojson","bbox","polys","inBBox","insidePoly","inHole","THREE","BufferGeometry","three_module","Float32BufferAttribute","setAttributeFn","setAttribute","ConicPolygonBufferGeometry","_THREE$BufferGeometry","polygonGeoJson","startHeight","endHeight","closedBottom","closedTop","includeSides","curvatureResolution","_possibleConstructorReturn","_assertThisInitialized","parameters","_geoPolygonTriangulat","geoPolygonTriangulate","_ref$resolution","resolution","contour","prevPnt","pnts","interpol","tStep","edgePoints","innerPoints","getInnerGeoPoints","maxDistance","boundariesGeojson","_geoBounds4","_geoBounds4$","minLng","minLat","_geoBounds4$2","maxLng","maxLat","getGeoSpiralGrid","distanceBetweenPoints","_ref8","numPoints","getPntIdx","lat","pntIdxRange","isLngInRange","lng","_geoBounds2","_geoBounds2$","_geoBounds2$2","vt","geoVoronoi","_data","_vx","_vy","valid","geoDelaunay","geo_delaunay_from","pivot","rotate","forward","stereographic","projectAt","projectResample","projectTransform","projectRotateTransform","cache","cacheStream","theta","preclip","postclip","recenter","reset","transformRotate","clipAngle","clip_circle","cr","smallRadius","notHemisphere","visible","intersect","two","pa","pb","n1","n2","n2n2","n1n2","determinant","n1xn2","uu","polar","meridian","code","v00","point2","circleStream","sinRadius","clipRectangle","corner","comparePoint","ca","cb","x__","y__","v__","x_","y_","v_","first","activeStream","bufferStream","clipStream","polygonInside","cleanInside","reflectX","reflectY","fitSize","size","fitWidth","fitHeight","height","zeros","max2","FAR","degenerate","geo_triangles","edges","geo_edges","_index","tri","split","geo_neighbors","npoints","geo_find","distance2","found","xyz","ndist","polygons","centers","geo_polygons","poly","supplement","R0","R1","mesh","geo_mesh","geo_hull","_hull","delete","Map","urquhart","distances","_lengths","_urquhart","edge","coll","properties","site","sitecoordinates","neighbours","links","_distances","_urquart","cellMesh","_found","pntMap","_indices","inds","some","ind","_loop","_indices2","indice","coordIdx","mean","_earcut$flatten","_earcut$flatten$holes","lngUvScale","latUvScale","uvs","_ref6","flatUvs","groupCnt","addGroup","groupData","prevVertCnt","prevIndCnt","generateVertices","altitude","coords3d","polar2Cartesian","generateCap","isTop","generateTorso","_generateVertices","bottomVerts","topVerts","_generateVertices2","holesIdx","lastHoleIdx","v0Idx","v1Idx","holeIdx","setIndex","computeVertexNormals","_inherits","subClass","superClass","THREE$2","Box3","three__WEBPACK_IMPORTED_MODULE_0__","InstancedBufferGeometry","InstancedInterleavedBuffer","InterleavedBufferAttribute","Vector3","WireframeGeometry","setAttributeFn$1","_box$1","_vector","LineSegmentsGeometry","applyMatrix4","matrix","attributes","instanceStart","instanceEnd","needsUpdate","boundingBox","computeBoundingBox","boundingSphere","computeBoundingSphere","setPositions","lineSegments","Float32Array","instanceBuffer","setColors","instanceColorBuffer","fromWireframeGeometry","position","fromEdgesGeometry","fromMesh","fromLineSegments","isGeometry","isBufferGeometry","setFromBufferAttribute","union","getCenter","maxRadiusSq","il","fromBufferAttribute","distanceToSquared","toJSON","applyMatrix","isLineSegmentsGeometry","THREE$1","ShaderLib","ShaderMaterial","UniformsLib","UniformsUtils","Vector2","worldUnits","linewidth","dashScale","dashSize","dashOffset","gapSize","uniforms","common","fog","vertexShader","fragmentShader","LineMaterial","clone","clipping","diffuse","defines","WORLD_UNITS","dashed","USE_DASH","alphaToCoverage","ALPHA_TO_COVERAGE","extensions","derivatives","setValues","isLineMaterial","Line3","MathUtils","Matrix4","Mesh","Vector4","_start","_end","_start4","_end4","_ssOrigin","_ssOrigin3","_mvMatrix","_line","_closestPoint","_box","_sphere","_clipToWorldVector","LineSegments2","material","random","computeLineDistances","lineDistances","distanceTo","instanceDistanceBuffer","raycast","raycaster","camera","threshold","params","Line2","ray","projectionMatrix","matrixWorld","lineWidth","ssMaxWidth","distanceToSphere","distanceToPoint","origin","multiplyScalar","projectionMatrixInverse","sphereMargin","intersectsSphere","distanceToBox","boxMargin","intersectsBox","at","matrixWorldInverse","multiplyMatrices","deltaDist","lerp","param","closestPointToPointParameter","zPos","isInClipSpace","pointOnLine","distanceSqToSegment","face","faceIndex","uv","uv2","LineGeometry","fromLine","isLineGeometry","isLine2","prevLen","interpolateLine","lineCoords","maxDegDistance","GeoJsonGeometry","geoJson","groups","genPoint","concatGroup","genLineString","genPolygon","outer","_ref9","_ref10","newOuter","newHoles","_earcutFlatten","vIdx","_earcutFlatten2","coordsSegment","firstHoleIdx","outerVertices","holeVertices","outerIndices","newG","main","extra","concatArr","src","_iterator","_createForOfIteratorHelper","F","TextGeometry","ExtrudeGeometry","text","font","shapes","generateShapes","bevelThickness","bevelSize","bevelEnabled","Font","isFont","paths","createPaths","chars","line_height","yMax","yMin","underlineThickness","offsetX","offsetY","char","ret","createPath","cpx","cpy","cpx1","cpy1","cpx2","cpy2","glyph","glyphs","familyName","path","ShapePath","_cachedOutline","quadraticCurveTo","bezierCurveTo","ha","toShapes","CSS2DObject","Object3D","document","createElement","isCSS2DObject","style","userSelect","addEventListener","traverse","Element","parentNode","removeChild","recursive","cloneNode","computeMikkTSpaceTangents","MikkTSpace","negateSign","isReady","hasAttribute","getAttributeArray","attribute","normalized","isInterleavedBufferAttribute","dstArray","itemSize","getZ","_geometry","toNonIndexed","tangents","generateTangents","BufferAttribute","mergeGeometries","useGroups","isIndexed","attributesUsed","morphAttributesUsed","morphAttributes","morphTargetsRelative","mergedGeometry","offset","attributesCount","indexOffset","mergedIndex","mergedAttribute","mergeAttributes","numMorphTargets","morphAttributesToMerge","mergedMorphAttribute","TypedArray","gpuType","arrayLength","tupleOffset","getComponent","setComponent","deepCloneAttribute","isInstancedInterleavedBufferAttribute","deinterleaveAttribute","isInstancedBufferAttribute","InstancedBufferAttribute","interleaveAttributes","stride","interleavedBuffer","InterleavedBuffer","getters","setters","iba","newAttribute","cons","meshPerAttribute","setX","setY","setZ","setW","getW","deinterleaveGeometry","morphTargets","attrMap","attr","estimateBytesUsed","mem","getAttribute","BYTES_PER_ELEMENT","getIndex","mergeVertices","tolerance","hashToIndex","positions","vertexCount","nextIndex","attributeNames","tmpAttributes","tmpMorphAttributes","newIndices","morphAttr","halfTolerance","hashMultiplier","hashAdditive","hash","newArray","newMorphArrays","getterFunc","setterFunc","ml","tmpAttribute","tmpMorphAttribute","toTrianglesDrawMode","drawMode","TrianglesDrawMode","TriangleFanDrawMode","TriangleStripDrawMode","numberOfTriangles","newGeometry","clearGroups","computeMorphedAttributes","jl","_vA","_vB","_vC","_tempA","_tempB","_tempC","_morphA","_morphB","_morphC","_calculateMorphedAttributeData","morphAttribute","modifiedAttributeArray","morphInfluences","morphTargetInfluences","influence","morph","addScaledVector","sub","isSkinnedMesh","applyBoneTransform","positionAttribute","morphPosition","normalAttribute","morphNormal","drawRange","modifiedPosition","modifiedNormal","morphedPositionAttribute","morphedNormalAttribute","mergeGroups","materialIndex","groupStart","groupLength","currentGroup","toCreasedNormals","creaseAngle","creaseDot","verts","tempVec1","tempVec2","tempNorm","tempNorm2","hashVertex","resultGeometry","posAttr","vertexMap","i3","subVectors","crossVectors","normalArray","normAttr","otherNormals","lk","otherNorm","dot","setXYZ","_typeof","CSS_UNIT","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","trimLeft","trimRight","tinycolor","opts","ok","mod","stringInputToObject","names","matchers","hsl","hsv","hsva","hex8","parseIntFromHex","hex6","hex4","hex3","isValidCSSUnit","bound01","substr","convertToPercentage","hslToRgb","hue2rgb","boundAlpha","_originalInput","_g","_roundA","_format","_gradientType","gradientType","_ok","rgbToHsl","rgbToHsv","rgbToHex","allow3Char","pad2","rgbaToArgbHex","convertDecimalToHex","_desaturate","toHsl","clamp01","_saturate","_greyscale","desaturate","_lighten","_brighten","toRgb","_darken","_spin","hue","_complement","polyad","_splitcomplement","_analogous","slices","part","_monochromatic","toHsv","modification","isDark","getBrightness","isLight","isValid","getOriginalInput","getFormat","getAlpha","getLuminance","RsRGB","GsRGB","BsRGB","setAlpha","toHsvString","toHslString","toHex","toHexString","toHex8","allow4Char","toHex8String","toRgbString","toPercentageRgb","toPercentageRgbString","toName","hexNames","toFilter","secondColor","hex8String","secondHex8String","formatSet","formattedString","hasAlpha","_applyModification","lighten","brighten","darken","saturate","greyscale","spin","_applyCombination","analogous","complement","monochromatic","splitcomplement","triad","tetrad","fromRatio","newColor","color1","color2","mix","rgb1","rgb2","readability","c2","isReadable","wcag2","parms","wcag2Parms","mostReadable","baseColor","colorList","includeFallbackColors","bestColor","bestScore","burntsienna","flipped","processPercent","RegExp"],"sourceRoot":""}